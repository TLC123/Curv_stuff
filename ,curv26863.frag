#ifdef GLSLVIEWER
uniform vec3 u_eye3d;
uniform vec3 u_centre3d;
uniform vec3 u_up3d;
#endif
vec4 map(vec4 r0)
{
  float r1 = r0[0];
  float r2 = r0[1];
  float r3 = r0[2];
  float r4 = r0[3];
  vec3 r5 = vec3(4.0,4.0,1.0);
  float r6 = r5.x;
  float r7 = r1/r6;
  vec3 r8 = vec3(4.0,4.0,1.0);
  float r9 = r8.y;
  float r10 = r2/r9;
  vec3 r11 = vec3(4.0,4.0,1.0);
  float r12 = r11.z;
  float r13 = r3/r12;
  vec4 r14 = vec4(r7,r10,r13,r4);
  vec4 r15=r14;
  float r16 = r15.x;
  float r17 = r15.y;
  float r18 = r15.z;
  vec3 r19 = vec3(r16,r17,r18);
  float r20 = r15.x;
  float r21=r20;
  float r22 = r15.y;
  float r23=r22;
  float r24 = 0.0;
  float r25=r24;
  float r26 = floor(r21);
  float r27=r26;
  float r28 = floor(r23);
  float r29=r28;
  float r30 = floor(r25);
  float r31=r30;
  float r32 = 0.0;
  float r33=r32;
  float r34 = 1.0;
  float r35=r34;
  float r36 = r21-r27;
  float r37=r36;
  float r38 = r37-r33;
  float r39 = r35-r33;
  float r40 = r38/r39;
  float r41=r40;
  float r42 = 0.0;
  float r43=r42;
  float r44 = 1.0;
  float r45=r44;
  float r46 = max(r41,r43);
  float r47 = min(r46,r45);
  float r48=r47;
  float r49 = r48*r48;
  float r50 = 3.0;
  float r51 = 2.0;
  float r52 = r51*r48;
  float r53 = r50-r52;
  float r54 = r49*r53;
  float r55=r54;
  float r56 = 0.0;
  float r57=r56;
  float r58 = 1.0;
  float r59=r58;
  float r60 = r23-r29;
  float r61=r60;
  float r62 = r61-r57;
  float r63 = r59-r57;
  float r64 = r62/r63;
  float r65=r64;
  float r66 = 0.0;
  float r67=r66;
  float r68 = 1.0;
  float r69=r68;
  float r70 = max(r65,r67);
  float r71 = min(r70,r69);
  float r72=r71;
  float r73 = r72*r72;
  float r74 = 3.0;
  float r75 = 2.0;
  float r76 = r75*r72;
  float r77 = r74-r76;
  float r78 = r73*r77;
  float r79=r78;
  float r80 = 0.0;
  float r81=r80;
  float r82 = 1.0;
  float r83=r82;
  float r84 = r25-r31;
  float r85=r84;
  float r86 = r85-r81;
  float r87 = r83-r81;
  float r88 = r86/r87;
  float r89=r88;
  float r90 = 0.0;
  float r91=r90;
  float r92 = 1.0;
  float r93=r92;
  float r94 = max(r89,r91);
  float r95 = min(r94,r93);
  float r96=r95;
  float r97 = r96*r96;
  float r98 = 3.0;
  float r99 = 2.0;
  float r100 = r99*r96;
  float r101 = r98-r100;
  float r102 = r97*r101;
  float r103=r102;
  float r104=r27;
  float r105=r29;
  float r106=r31;
  float r107=r104;
  float r108 = 43758.5453123;
  float r109 = r107*r108;
  float r110=r109;
  float r111 = 1.0;
  float r112=r111;
  float r113 = r110/r112;
  float r114 = floor(r113);
  float r115 = r112*r114;
  float r116 = r110-r115;
  float r117 = 78.233;
  float r118 = r107*r117;
  float r119 = r116+r118;
  float r120=r119;
  float r121 = 1.0;
  float r122=r121;
  float r123 = r120/r122;
  float r124 = floor(r123);
  float r125 = r122*r124;
  float r126 = r120-r125;
  float r127 = r126+r105;
  float r128=r127;
  float r129 = 43758.5453123;
  float r130 = r128*r129;
  float r131=r130;
  float r132 = 1.0;
  float r133=r132;
  float r134 = r131/r133;
  float r135 = floor(r134);
  float r136 = r133*r135;
  float r137 = r131-r136;
  float r138 = 78.233;
  float r139 = r128*r138;
  float r140 = r137+r139;
  float r141=r140;
  float r142 = 1.0;
  float r143=r142;
  float r144 = r141/r143;
  float r145 = floor(r144);
  float r146 = r143*r145;
  float r147 = r141-r146;
  float r148 = r147+r106;
  float r149=r148;
  float r150 = 43758.5453123;
  float r151 = r149*r150;
  float r152=r151;
  float r153 = 1.0;
  float r154=r153;
  float r155 = r152/r154;
  float r156 = floor(r155);
  float r157 = r154*r156;
  float r158 = r152-r157;
  float r159 = 78.233;
  float r160 = r149*r159;
  float r161 = r158+r160;
  float r162=r161;
  float r163 = 1.0;
  float r164=r163;
  float r165 = r162/r164;
  float r166 = floor(r165);
  float r167 = r164*r166;
  float r168 = r162-r167;
  float r169=r168;
  float r170 = 43758.5453123;
  float r171 = r169*r170;
  float r172=r171;
  float r173 = 1.0;
  float r174=r173;
  float r175 = r172/r174;
  float r176 = floor(r175);
  float r177 = r174*r176;
  float r178 = r172-r177;
  float r179 = 78.233;
  float r180 = r169*r179;
  float r181 = r178+r180;
  float r182=r181;
  float r183 = 1.0;
  float r184=r183;
  float r185 = r182/r184;
  float r186 = floor(r185);
  float r187 = r184*r186;
  float r188 = r182-r187;
  float r189=r105;
  float r190 = 43758.5453123;
  float r191 = r189*r190;
  float r192=r191;
  float r193 = 1.0;
  float r194=r193;
  float r195 = r192/r194;
  float r196 = floor(r195);
  float r197 = r194*r196;
  float r198 = r192-r197;
  float r199 = 78.233;
  float r200 = r189*r199;
  float r201 = r198+r200;
  float r202=r201;
  float r203 = 1.0;
  float r204=r203;
  float r205 = r202/r204;
  float r206 = floor(r205);
  float r207 = r204*r206;
  float r208 = r202-r207;
  float r209 = r208+r106;
  float r210=r209;
  float r211 = 43758.5453123;
  float r212 = r210*r211;
  float r213=r212;
  float r214 = 1.0;
  float r215=r214;
  float r216 = r213/r215;
  float r217 = floor(r216);
  float r218 = r215*r217;
  float r219 = r213-r218;
  float r220 = 78.233;
  float r221 = r210*r220;
  float r222 = r219+r221;
  float r223=r222;
  float r224 = 1.0;
  float r225=r224;
  float r226 = r223/r225;
  float r227 = floor(r226);
  float r228 = r225*r227;
  float r229 = r223-r228;
  float r230 = r229+r104;
  float r231=r230;
  float r232 = 43758.5453123;
  float r233 = r231*r232;
  float r234=r233;
  float r235 = 1.0;
  float r236=r235;
  float r237 = r234/r236;
  float r238 = floor(r237);
  float r239 = r236*r238;
  float r240 = r234-r239;
  float r241 = 78.233;
  float r242 = r231*r241;
  float r243 = r240+r242;
  float r244=r243;
  float r245 = 1.0;
  float r246=r245;
  float r247 = r244/r246;
  float r248 = floor(r247);
  float r249 = r246*r248;
  float r250 = r244-r249;
  float r251=r250;
  float r252 = 43758.5453123;
  float r253 = r251*r252;
  float r254=r253;
  float r255 = 1.0;
  float r256=r255;
  float r257 = r254/r256;
  float r258 = floor(r257);
  float r259 = r256*r258;
  float r260 = r254-r259;
  float r261 = 78.233;
  float r262 = r251*r261;
  float r263 = r260+r262;
  float r264=r263;
  float r265 = 1.0;
  float r266=r265;
  float r267 = r264/r266;
  float r268 = floor(r267);
  float r269 = r266*r268;
  float r270 = r264-r269;
  float r271=r106;
  float r272 = 43758.5453123;
  float r273 = r271*r272;
  float r274=r273;
  float r275 = 1.0;
  float r276=r275;
  float r277 = r274/r276;
  float r278 = floor(r277);
  float r279 = r276*r278;
  float r280 = r274-r279;
  float r281 = 78.233;
  float r282 = r271*r281;
  float r283 = r280+r282;
  float r284=r283;
  float r285 = 1.0;
  float r286=r285;
  float r287 = r284/r286;
  float r288 = floor(r287);
  float r289 = r286*r288;
  float r290 = r284-r289;
  float r291 = r290+r104;
  float r292=r291;
  float r293 = 43758.5453123;
  float r294 = r292*r293;
  float r295=r294;
  float r296 = 1.0;
  float r297=r296;
  float r298 = r295/r297;
  float r299 = floor(r298);
  float r300 = r297*r299;
  float r301 = r295-r300;
  float r302 = 78.233;
  float r303 = r292*r302;
  float r304 = r301+r303;
  float r305=r304;
  float r306 = 1.0;
  float r307=r306;
  float r308 = r305/r307;
  float r309 = floor(r308);
  float r310 = r307*r309;
  float r311 = r305-r310;
  float r312 = r311+r105;
  float r313=r312;
  float r314 = 43758.5453123;
  float r315 = r313*r314;
  float r316=r315;
  float r317 = 1.0;
  float r318=r317;
  float r319 = r316/r318;
  float r320 = floor(r319);
  float r321 = r318*r320;
  float r322 = r316-r321;
  float r323 = 78.233;
  float r324 = r313*r323;
  float r325 = r322+r324;
  float r326=r325;
  float r327 = 1.0;
  float r328=r327;
  float r329 = r326/r328;
  float r330 = floor(r329);
  float r331 = r328*r330;
  float r332 = r326-r331;
  float r333=r332;
  float r334 = 43758.5453123;
  float r335 = r333*r334;
  float r336=r335;
  float r337 = 1.0;
  float r338=r337;
  float r339 = r336/r338;
  float r340 = floor(r339);
  float r341 = r338*r340;
  float r342 = r336-r341;
  float r343 = 78.233;
  float r344 = r333*r343;
  float r345 = r342+r344;
  float r346=r345;
  float r347 = 1.0;
  float r348=r347;
  float r349 = r346/r348;
  float r350 = floor(r349);
  float r351 = r348*r350;
  float r352 = r346-r351;
  vec3 r353 = vec3(r188,r270,r352);
  vec3 r354=r353;
  float r355 = 1.0;
  float r356 = r27+r355;
  float r357=r356;
  float r358=r29;
  float r359=r31;
  float r360=r357;
  float r361 = 43758.5453123;
  float r362 = r360*r361;
  float r363=r362;
  float r364 = 1.0;
  float r365=r364;
  float r366 = r363/r365;
  float r367 = floor(r366);
  float r368 = r365*r367;
  float r369 = r363-r368;
  float r370 = 78.233;
  float r371 = r360*r370;
  float r372 = r369+r371;
  float r373=r372;
  float r374 = 1.0;
  float r375=r374;
  float r376 = r373/r375;
  float r377 = floor(r376);
  float r378 = r375*r377;
  float r379 = r373-r378;
  float r380 = r379+r358;
  float r381=r380;
  float r382 = 43758.5453123;
  float r383 = r381*r382;
  float r384=r383;
  float r385 = 1.0;
  float r386=r385;
  float r387 = r384/r386;
  float r388 = floor(r387);
  float r389 = r386*r388;
  float r390 = r384-r389;
  float r391 = 78.233;
  float r392 = r381*r391;
  float r393 = r390+r392;
  float r394=r393;
  float r395 = 1.0;
  float r396=r395;
  float r397 = r394/r396;
  float r398 = floor(r397);
  float r399 = r396*r398;
  float r400 = r394-r399;
  float r401 = r400+r359;
  float r402=r401;
  float r403 = 43758.5453123;
  float r404 = r402*r403;
  float r405=r404;
  float r406 = 1.0;
  float r407=r406;
  float r408 = r405/r407;
  float r409 = floor(r408);
  float r410 = r407*r409;
  float r411 = r405-r410;
  float r412 = 78.233;
  float r413 = r402*r412;
  float r414 = r411+r413;
  float r415=r414;
  float r416 = 1.0;
  float r417=r416;
  float r418 = r415/r417;
  float r419 = floor(r418);
  float r420 = r417*r419;
  float r421 = r415-r420;
  float r422=r421;
  float r423 = 43758.5453123;
  float r424 = r422*r423;
  float r425=r424;
  float r426 = 1.0;
  float r427=r426;
  float r428 = r425/r427;
  float r429 = floor(r428);
  float r430 = r427*r429;
  float r431 = r425-r430;
  float r432 = 78.233;
  float r433 = r422*r432;
  float r434 = r431+r433;
  float r435=r434;
  float r436 = 1.0;
  float r437=r436;
  float r438 = r435/r437;
  float r439 = floor(r438);
  float r440 = r437*r439;
  float r441 = r435-r440;
  float r442=r358;
  float r443 = 43758.5453123;
  float r444 = r442*r443;
  float r445=r444;
  float r446 = 1.0;
  float r447=r446;
  float r448 = r445/r447;
  float r449 = floor(r448);
  float r450 = r447*r449;
  float r451 = r445-r450;
  float r452 = 78.233;
  float r453 = r442*r452;
  float r454 = r451+r453;
  float r455=r454;
  float r456 = 1.0;
  float r457=r456;
  float r458 = r455/r457;
  float r459 = floor(r458);
  float r460 = r457*r459;
  float r461 = r455-r460;
  float r462 = r461+r359;
  float r463=r462;
  float r464 = 43758.5453123;
  float r465 = r463*r464;
  float r466=r465;
  float r467 = 1.0;
  float r468=r467;
  float r469 = r466/r468;
  float r470 = floor(r469);
  float r471 = r468*r470;
  float r472 = r466-r471;
  float r473 = 78.233;
  float r474 = r463*r473;
  float r475 = r472+r474;
  float r476=r475;
  float r477 = 1.0;
  float r478=r477;
  float r479 = r476/r478;
  float r480 = floor(r479);
  float r481 = r478*r480;
  float r482 = r476-r481;
  float r483 = r482+r357;
  float r484=r483;
  float r485 = 43758.5453123;
  float r486 = r484*r485;
  float r487=r486;
  float r488 = 1.0;
  float r489=r488;
  float r490 = r487/r489;
  float r491 = floor(r490);
  float r492 = r489*r491;
  float r493 = r487-r492;
  float r494 = 78.233;
  float r495 = r484*r494;
  float r496 = r493+r495;
  float r497=r496;
  float r498 = 1.0;
  float r499=r498;
  float r500 = r497/r499;
  float r501 = floor(r500);
  float r502 = r499*r501;
  float r503 = r497-r502;
  float r504=r503;
  float r505 = 43758.5453123;
  float r506 = r504*r505;
  float r507=r506;
  float r508 = 1.0;
  float r509=r508;
  float r510 = r507/r509;
  float r511 = floor(r510);
  float r512 = r509*r511;
  float r513 = r507-r512;
  float r514 = 78.233;
  float r515 = r504*r514;
  float r516 = r513+r515;
  float r517=r516;
  float r518 = 1.0;
  float r519=r518;
  float r520 = r517/r519;
  float r521 = floor(r520);
  float r522 = r519*r521;
  float r523 = r517-r522;
  float r524=r359;
  float r525 = 43758.5453123;
  float r526 = r524*r525;
  float r527=r526;
  float r528 = 1.0;
  float r529=r528;
  float r530 = r527/r529;
  float r531 = floor(r530);
  float r532 = r529*r531;
  float r533 = r527-r532;
  float r534 = 78.233;
  float r535 = r524*r534;
  float r536 = r533+r535;
  float r537=r536;
  float r538 = 1.0;
  float r539=r538;
  float r540 = r537/r539;
  float r541 = floor(r540);
  float r542 = r539*r541;
  float r543 = r537-r542;
  float r544 = r543+r357;
  float r545=r544;
  float r546 = 43758.5453123;
  float r547 = r545*r546;
  float r548=r547;
  float r549 = 1.0;
  float r550=r549;
  float r551 = r548/r550;
  float r552 = floor(r551);
  float r553 = r550*r552;
  float r554 = r548-r553;
  float r555 = 78.233;
  float r556 = r545*r555;
  float r557 = r554+r556;
  float r558=r557;
  float r559 = 1.0;
  float r560=r559;
  float r561 = r558/r560;
  float r562 = floor(r561);
  float r563 = r560*r562;
  float r564 = r558-r563;
  float r565 = r564+r358;
  float r566=r565;
  float r567 = 43758.5453123;
  float r568 = r566*r567;
  float r569=r568;
  float r570 = 1.0;
  float r571=r570;
  float r572 = r569/r571;
  float r573 = floor(r572);
  float r574 = r571*r573;
  float r575 = r569-r574;
  float r576 = 78.233;
  float r577 = r566*r576;
  float r578 = r575+r577;
  float r579=r578;
  float r580 = 1.0;
  float r581=r580;
  float r582 = r579/r581;
  float r583 = floor(r582);
  float r584 = r581*r583;
  float r585 = r579-r584;
  float r586=r585;
  float r587 = 43758.5453123;
  float r588 = r586*r587;
  float r589=r588;
  float r590 = 1.0;
  float r591=r590;
  float r592 = r589/r591;
  float r593 = floor(r592);
  float r594 = r591*r593;
  float r595 = r589-r594;
  float r596 = 78.233;
  float r597 = r586*r596;
  float r598 = r595+r597;
  float r599=r598;
  float r600 = 1.0;
  float r601=r600;
  float r602 = r599/r601;
  float r603 = floor(r602);
  float r604 = r601*r603;
  float r605 = r599-r604;
  vec3 r606 = vec3(r441,r523,r605);
  vec3 r607=r606;
  float r608 = 1.0;
  float r609 = r27+r608;
  float r610=r609;
  float r611 = 1.0;
  float r612 = r29+r611;
  float r613=r612;
  float r614=r31;
  float r615=r610;
  float r616 = 43758.5453123;
  float r617 = r615*r616;
  float r618=r617;
  float r619 = 1.0;
  float r620=r619;
  float r621 = r618/r620;
  float r622 = floor(r621);
  float r623 = r620*r622;
  float r624 = r618-r623;
  float r625 = 78.233;
  float r626 = r615*r625;
  float r627 = r624+r626;
  float r628=r627;
  float r629 = 1.0;
  float r630=r629;
  float r631 = r628/r630;
  float r632 = floor(r631);
  float r633 = r630*r632;
  float r634 = r628-r633;
  float r635 = r634+r613;
  float r636=r635;
  float r637 = 43758.5453123;
  float r638 = r636*r637;
  float r639=r638;
  float r640 = 1.0;
  float r641=r640;
  float r642 = r639/r641;
  float r643 = floor(r642);
  float r644 = r641*r643;
  float r645 = r639-r644;
  float r646 = 78.233;
  float r647 = r636*r646;
  float r648 = r645+r647;
  float r649=r648;
  float r650 = 1.0;
  float r651=r650;
  float r652 = r649/r651;
  float r653 = floor(r652);
  float r654 = r651*r653;
  float r655 = r649-r654;
  float r656 = r655+r614;
  float r657=r656;
  float r658 = 43758.5453123;
  float r659 = r657*r658;
  float r660=r659;
  float r661 = 1.0;
  float r662=r661;
  float r663 = r660/r662;
  float r664 = floor(r663);
  float r665 = r662*r664;
  float r666 = r660-r665;
  float r667 = 78.233;
  float r668 = r657*r667;
  float r669 = r666+r668;
  float r670=r669;
  float r671 = 1.0;
  float r672=r671;
  float r673 = r670/r672;
  float r674 = floor(r673);
  float r675 = r672*r674;
  float r676 = r670-r675;
  float r677=r676;
  float r678 = 43758.5453123;
  float r679 = r677*r678;
  float r680=r679;
  float r681 = 1.0;
  float r682=r681;
  float r683 = r680/r682;
  float r684 = floor(r683);
  float r685 = r682*r684;
  float r686 = r680-r685;
  float r687 = 78.233;
  float r688 = r677*r687;
  float r689 = r686+r688;
  float r690=r689;
  float r691 = 1.0;
  float r692=r691;
  float r693 = r690/r692;
  float r694 = floor(r693);
  float r695 = r692*r694;
  float r696 = r690-r695;
  float r697=r613;
  float r698 = 43758.5453123;
  float r699 = r697*r698;
  float r700=r699;
  float r701 = 1.0;
  float r702=r701;
  float r703 = r700/r702;
  float r704 = floor(r703);
  float r705 = r702*r704;
  float r706 = r700-r705;
  float r707 = 78.233;
  float r708 = r697*r707;
  float r709 = r706+r708;
  float r710=r709;
  float r711 = 1.0;
  float r712=r711;
  float r713 = r710/r712;
  float r714 = floor(r713);
  float r715 = r712*r714;
  float r716 = r710-r715;
  float r717 = r716+r614;
  float r718=r717;
  float r719 = 43758.5453123;
  float r720 = r718*r719;
  float r721=r720;
  float r722 = 1.0;
  float r723=r722;
  float r724 = r721/r723;
  float r725 = floor(r724);
  float r726 = r723*r725;
  float r727 = r721-r726;
  float r728 = 78.233;
  float r729 = r718*r728;
  float r730 = r727+r729;
  float r731=r730;
  float r732 = 1.0;
  float r733=r732;
  float r734 = r731/r733;
  float r735 = floor(r734);
  float r736 = r733*r735;
  float r737 = r731-r736;
  float r738 = r737+r610;
  float r739=r738;
  float r740 = 43758.5453123;
  float r741 = r739*r740;
  float r742=r741;
  float r743 = 1.0;
  float r744=r743;
  float r745 = r742/r744;
  float r746 = floor(r745);
  float r747 = r744*r746;
  float r748 = r742-r747;
  float r749 = 78.233;
  float r750 = r739*r749;
  float r751 = r748+r750;
  float r752=r751;
  float r753 = 1.0;
  float r754=r753;
  float r755 = r752/r754;
  float r756 = floor(r755);
  float r757 = r754*r756;
  float r758 = r752-r757;
  float r759=r758;
  float r760 = 43758.5453123;
  float r761 = r759*r760;
  float r762=r761;
  float r763 = 1.0;
  float r764=r763;
  float r765 = r762/r764;
  float r766 = floor(r765);
  float r767 = r764*r766;
  float r768 = r762-r767;
  float r769 = 78.233;
  float r770 = r759*r769;
  float r771 = r768+r770;
  float r772=r771;
  float r773 = 1.0;
  float r774=r773;
  float r775 = r772/r774;
  float r776 = floor(r775);
  float r777 = r774*r776;
  float r778 = r772-r777;
  float r779=r614;
  float r780 = 43758.5453123;
  float r781 = r779*r780;
  float r782=r781;
  float r783 = 1.0;
  float r784=r783;
  float r785 = r782/r784;
  float r786 = floor(r785);
  float r787 = r784*r786;
  float r788 = r782-r787;
  float r789 = 78.233;
  float r790 = r779*r789;
  float r791 = r788+r790;
  float r792=r791;
  float r793 = 1.0;
  float r794=r793;
  float r795 = r792/r794;
  float r796 = floor(r795);
  float r797 = r794*r796;
  float r798 = r792-r797;
  float r799 = r798+r610;
  float r800=r799;
  float r801 = 43758.5453123;
  float r802 = r800*r801;
  float r803=r802;
  float r804 = 1.0;
  float r805=r804;
  float r806 = r803/r805;
  float r807 = floor(r806);
  float r808 = r805*r807;
  float r809 = r803-r808;
  float r810 = 78.233;
  float r811 = r800*r810;
  float r812 = r809+r811;
  float r813=r812;
  float r814 = 1.0;
  float r815=r814;
  float r816 = r813/r815;
  float r817 = floor(r816);
  float r818 = r815*r817;
  float r819 = r813-r818;
  float r820 = r819+r613;
  float r821=r820;
  float r822 = 43758.5453123;
  float r823 = r821*r822;
  float r824=r823;
  float r825 = 1.0;
  float r826=r825;
  float r827 = r824/r826;
  float r828 = floor(r827);
  float r829 = r826*r828;
  float r830 = r824-r829;
  float r831 = 78.233;
  float r832 = r821*r831;
  float r833 = r830+r832;
  float r834=r833;
  float r835 = 1.0;
  float r836=r835;
  float r837 = r834/r836;
  float r838 = floor(r837);
  float r839 = r836*r838;
  float r840 = r834-r839;
  float r841=r840;
  float r842 = 43758.5453123;
  float r843 = r841*r842;
  float r844=r843;
  float r845 = 1.0;
  float r846=r845;
  float r847 = r844/r846;
  float r848 = floor(r847);
  float r849 = r846*r848;
  float r850 = r844-r849;
  float r851 = 78.233;
  float r852 = r841*r851;
  float r853 = r850+r852;
  float r854=r853;
  float r855 = 1.0;
  float r856=r855;
  float r857 = r854/r856;
  float r858 = floor(r857);
  float r859 = r856*r858;
  float r860 = r854-r859;
  vec3 r861 = vec3(r696,r778,r860);
  vec3 r862=r861;
  float r863=r27;
  float r864 = 1.0;
  float r865 = r29+r864;
  float r866=r865;
  float r867=r31;
  float r868=r863;
  float r869 = 43758.5453123;
  float r870 = r868*r869;
  float r871=r870;
  float r872 = 1.0;
  float r873=r872;
  float r874 = r871/r873;
  float r875 = floor(r874);
  float r876 = r873*r875;
  float r877 = r871-r876;
  float r878 = 78.233;
  float r879 = r868*r878;
  float r880 = r877+r879;
  float r881=r880;
  float r882 = 1.0;
  float r883=r882;
  float r884 = r881/r883;
  float r885 = floor(r884);
  float r886 = r883*r885;
  float r887 = r881-r886;
  float r888 = r887+r866;
  float r889=r888;
  float r890 = 43758.5453123;
  float r891 = r889*r890;
  float r892=r891;
  float r893 = 1.0;
  float r894=r893;
  float r895 = r892/r894;
  float r896 = floor(r895);
  float r897 = r894*r896;
  float r898 = r892-r897;
  float r899 = 78.233;
  float r900 = r889*r899;
  float r901 = r898+r900;
  float r902=r901;
  float r903 = 1.0;
  float r904=r903;
  float r905 = r902/r904;
  float r906 = floor(r905);
  float r907 = r904*r906;
  float r908 = r902-r907;
  float r909 = r908+r867;
  float r910=r909;
  float r911 = 43758.5453123;
  float r912 = r910*r911;
  float r913=r912;
  float r914 = 1.0;
  float r915=r914;
  float r916 = r913/r915;
  float r917 = floor(r916);
  float r918 = r915*r917;
  float r919 = r913-r918;
  float r920 = 78.233;
  float r921 = r910*r920;
  float r922 = r919+r921;
  float r923=r922;
  float r924 = 1.0;
  float r925=r924;
  float r926 = r923/r925;
  float r927 = floor(r926);
  float r928 = r925*r927;
  float r929 = r923-r928;
  float r930=r929;
  float r931 = 43758.5453123;
  float r932 = r930*r931;
  float r933=r932;
  float r934 = 1.0;
  float r935=r934;
  float r936 = r933/r935;
  float r937 = floor(r936);
  float r938 = r935*r937;
  float r939 = r933-r938;
  float r940 = 78.233;
  float r941 = r930*r940;
  float r942 = r939+r941;
  float r943=r942;
  float r944 = 1.0;
  float r945=r944;
  float r946 = r943/r945;
  float r947 = floor(r946);
  float r948 = r945*r947;
  float r949 = r943-r948;
  float r950=r866;
  float r951 = 43758.5453123;
  float r952 = r950*r951;
  float r953=r952;
  float r954 = 1.0;
  float r955=r954;
  float r956 = r953/r955;
  float r957 = floor(r956);
  float r958 = r955*r957;
  float r959 = r953-r958;
  float r960 = 78.233;
  float r961 = r950*r960;
  float r962 = r959+r961;
  float r963=r962;
  float r964 = 1.0;
  float r965=r964;
  float r966 = r963/r965;
  float r967 = floor(r966);
  float r968 = r965*r967;
  float r969 = r963-r968;
  float r970 = r969+r867;
  float r971=r970;
  float r972 = 43758.5453123;
  float r973 = r971*r972;
  float r974=r973;
  float r975 = 1.0;
  float r976=r975;
  float r977 = r974/r976;
  float r978 = floor(r977);
  float r979 = r976*r978;
  float r980 = r974-r979;
  float r981 = 78.233;
  float r982 = r971*r981;
  float r983 = r980+r982;
  float r984=r983;
  float r985 = 1.0;
  float r986=r985;
  float r987 = r984/r986;
  float r988 = floor(r987);
  float r989 = r986*r988;
  float r990 = r984-r989;
  float r991 = r990+r863;
  float r992=r991;
  float r993 = 43758.5453123;
  float r994 = r992*r993;
  float r995=r994;
  float r996 = 1.0;
  float r997=r996;
  float r998 = r995/r997;
  float r999 = floor(r998);
  float r1000 = r997*r999;
  float r1001 = r995-r1000;
  float r1002 = 78.233;
  float r1003 = r992*r1002;
  float r1004 = r1001+r1003;
  float r1005=r1004;
  float r1006 = 1.0;
  float r1007=r1006;
  float r1008 = r1005/r1007;
  float r1009 = floor(r1008);
  float r1010 = r1007*r1009;
  float r1011 = r1005-r1010;
  float r1012=r1011;
  float r1013 = 43758.5453123;
  float r1014 = r1012*r1013;
  float r1015=r1014;
  float r1016 = 1.0;
  float r1017=r1016;
  float r1018 = r1015/r1017;
  float r1019 = floor(r1018);
  float r1020 = r1017*r1019;
  float r1021 = r1015-r1020;
  float r1022 = 78.233;
  float r1023 = r1012*r1022;
  float r1024 = r1021+r1023;
  float r1025=r1024;
  float r1026 = 1.0;
  float r1027=r1026;
  float r1028 = r1025/r1027;
  float r1029 = floor(r1028);
  float r1030 = r1027*r1029;
  float r1031 = r1025-r1030;
  float r1032=r867;
  float r1033 = 43758.5453123;
  float r1034 = r1032*r1033;
  float r1035=r1034;
  float r1036 = 1.0;
  float r1037=r1036;
  float r1038 = r1035/r1037;
  float r1039 = floor(r1038);
  float r1040 = r1037*r1039;
  float r1041 = r1035-r1040;
  float r1042 = 78.233;
  float r1043 = r1032*r1042;
  float r1044 = r1041+r1043;
  float r1045=r1044;
  float r1046 = 1.0;
  float r1047=r1046;
  float r1048 = r1045/r1047;
  float r1049 = floor(r1048);
  float r1050 = r1047*r1049;
  float r1051 = r1045-r1050;
  float r1052 = r1051+r863;
  float r1053=r1052;
  float r1054 = 43758.5453123;
  float r1055 = r1053*r1054;
  float r1056=r1055;
  float r1057 = 1.0;
  float r1058=r1057;
  float r1059 = r1056/r1058;
  float r1060 = floor(r1059);
  float r1061 = r1058*r1060;
  float r1062 = r1056-r1061;
  float r1063 = 78.233;
  float r1064 = r1053*r1063;
  float r1065 = r1062+r1064;
  float r1066=r1065;
  float r1067 = 1.0;
  float r1068=r1067;
  float r1069 = r1066/r1068;
  float r1070 = floor(r1069);
  float r1071 = r1068*r1070;
  float r1072 = r1066-r1071;
  float r1073 = r1072+r866;
  float r1074=r1073;
  float r1075 = 43758.5453123;
  float r1076 = r1074*r1075;
  float r1077=r1076;
  float r1078 = 1.0;
  float r1079=r1078;
  float r1080 = r1077/r1079;
  float r1081 = floor(r1080);
  float r1082 = r1079*r1081;
  float r1083 = r1077-r1082;
  float r1084 = 78.233;
  float r1085 = r1074*r1084;
  float r1086 = r1083+r1085;
  float r1087=r1086;
  float r1088 = 1.0;
  float r1089=r1088;
  float r1090 = r1087/r1089;
  float r1091 = floor(r1090);
  float r1092 = r1089*r1091;
  float r1093 = r1087-r1092;
  float r1094=r1093;
  float r1095 = 43758.5453123;
  float r1096 = r1094*r1095;
  float r1097=r1096;
  float r1098 = 1.0;
  float r1099=r1098;
  float r1100 = r1097/r1099;
  float r1101 = floor(r1100);
  float r1102 = r1099*r1101;
  float r1103 = r1097-r1102;
  float r1104 = 78.233;
  float r1105 = r1094*r1104;
  float r1106 = r1103+r1105;
  float r1107=r1106;
  float r1108 = 1.0;
  float r1109=r1108;
  float r1110 = r1107/r1109;
  float r1111 = floor(r1110);
  float r1112 = r1109*r1111;
  float r1113 = r1107-r1112;
  vec3 r1114 = vec3(r949,r1031,r1113);
  vec3 r1115=r1114;
  float r1116=r27;
  float r1117=r29;
  float r1118 = 1.0;
  float r1119 = r31+r1118;
  float r1120=r1119;
  float r1121=r1116;
  float r1122 = 43758.5453123;
  float r1123 = r1121*r1122;
  float r1124=r1123;
  float r1125 = 1.0;
  float r1126=r1125;
  float r1127 = r1124/r1126;
  float r1128 = floor(r1127);
  float r1129 = r1126*r1128;
  float r1130 = r1124-r1129;
  float r1131 = 78.233;
  float r1132 = r1121*r1131;
  float r1133 = r1130+r1132;
  float r1134=r1133;
  float r1135 = 1.0;
  float r1136=r1135;
  float r1137 = r1134/r1136;
  float r1138 = floor(r1137);
  float r1139 = r1136*r1138;
  float r1140 = r1134-r1139;
  float r1141 = r1140+r1117;
  float r1142=r1141;
  float r1143 = 43758.5453123;
  float r1144 = r1142*r1143;
  float r1145=r1144;
  float r1146 = 1.0;
  float r1147=r1146;
  float r1148 = r1145/r1147;
  float r1149 = floor(r1148);
  float r1150 = r1147*r1149;
  float r1151 = r1145-r1150;
  float r1152 = 78.233;
  float r1153 = r1142*r1152;
  float r1154 = r1151+r1153;
  float r1155=r1154;
  float r1156 = 1.0;
  float r1157=r1156;
  float r1158 = r1155/r1157;
  float r1159 = floor(r1158);
  float r1160 = r1157*r1159;
  float r1161 = r1155-r1160;
  float r1162 = r1161+r1120;
  float r1163=r1162;
  float r1164 = 43758.5453123;
  float r1165 = r1163*r1164;
  float r1166=r1165;
  float r1167 = 1.0;
  float r1168=r1167;
  float r1169 = r1166/r1168;
  float r1170 = floor(r1169);
  float r1171 = r1168*r1170;
  float r1172 = r1166-r1171;
  float r1173 = 78.233;
  float r1174 = r1163*r1173;
  float r1175 = r1172+r1174;
  float r1176=r1175;
  float r1177 = 1.0;
  float r1178=r1177;
  float r1179 = r1176/r1178;
  float r1180 = floor(r1179);
  float r1181 = r1178*r1180;
  float r1182 = r1176-r1181;
  float r1183=r1182;
  float r1184 = 43758.5453123;
  float r1185 = r1183*r1184;
  float r1186=r1185;
  float r1187 = 1.0;
  float r1188=r1187;
  float r1189 = r1186/r1188;
  float r1190 = floor(r1189);
  float r1191 = r1188*r1190;
  float r1192 = r1186-r1191;
  float r1193 = 78.233;
  float r1194 = r1183*r1193;
  float r1195 = r1192+r1194;
  float r1196=r1195;
  float r1197 = 1.0;
  float r1198=r1197;
  float r1199 = r1196/r1198;
  float r1200 = floor(r1199);
  float r1201 = r1198*r1200;
  float r1202 = r1196-r1201;
  float r1203=r1117;
  float r1204 = 43758.5453123;
  float r1205 = r1203*r1204;
  float r1206=r1205;
  float r1207 = 1.0;
  float r1208=r1207;
  float r1209 = r1206/r1208;
  float r1210 = floor(r1209);
  float r1211 = r1208*r1210;
  float r1212 = r1206-r1211;
  float r1213 = 78.233;
  float r1214 = r1203*r1213;
  float r1215 = r1212+r1214;
  float r1216=r1215;
  float r1217 = 1.0;
  float r1218=r1217;
  float r1219 = r1216/r1218;
  float r1220 = floor(r1219);
  float r1221 = r1218*r1220;
  float r1222 = r1216-r1221;
  float r1223 = r1222+r1120;
  float r1224=r1223;
  float r1225 = 43758.5453123;
  float r1226 = r1224*r1225;
  float r1227=r1226;
  float r1228 = 1.0;
  float r1229=r1228;
  float r1230 = r1227/r1229;
  float r1231 = floor(r1230);
  float r1232 = r1229*r1231;
  float r1233 = r1227-r1232;
  float r1234 = 78.233;
  float r1235 = r1224*r1234;
  float r1236 = r1233+r1235;
  float r1237=r1236;
  float r1238 = 1.0;
  float r1239=r1238;
  float r1240 = r1237/r1239;
  float r1241 = floor(r1240);
  float r1242 = r1239*r1241;
  float r1243 = r1237-r1242;
  float r1244 = r1243+r1116;
  float r1245=r1244;
  float r1246 = 43758.5453123;
  float r1247 = r1245*r1246;
  float r1248=r1247;
  float r1249 = 1.0;
  float r1250=r1249;
  float r1251 = r1248/r1250;
  float r1252 = floor(r1251);
  float r1253 = r1250*r1252;
  float r1254 = r1248-r1253;
  float r1255 = 78.233;
  float r1256 = r1245*r1255;
  float r1257 = r1254+r1256;
  float r1258=r1257;
  float r1259 = 1.0;
  float r1260=r1259;
  float r1261 = r1258/r1260;
  float r1262 = floor(r1261);
  float r1263 = r1260*r1262;
  float r1264 = r1258-r1263;
  float r1265=r1264;
  float r1266 = 43758.5453123;
  float r1267 = r1265*r1266;
  float r1268=r1267;
  float r1269 = 1.0;
  float r1270=r1269;
  float r1271 = r1268/r1270;
  float r1272 = floor(r1271);
  float r1273 = r1270*r1272;
  float r1274 = r1268-r1273;
  float r1275 = 78.233;
  float r1276 = r1265*r1275;
  float r1277 = r1274+r1276;
  float r1278=r1277;
  float r1279 = 1.0;
  float r1280=r1279;
  float r1281 = r1278/r1280;
  float r1282 = floor(r1281);
  float r1283 = r1280*r1282;
  float r1284 = r1278-r1283;
  float r1285=r1120;
  float r1286 = 43758.5453123;
  float r1287 = r1285*r1286;
  float r1288=r1287;
  float r1289 = 1.0;
  float r1290=r1289;
  float r1291 = r1288/r1290;
  float r1292 = floor(r1291);
  float r1293 = r1290*r1292;
  float r1294 = r1288-r1293;
  float r1295 = 78.233;
  float r1296 = r1285*r1295;
  float r1297 = r1294+r1296;
  float r1298=r1297;
  float r1299 = 1.0;
  float r1300=r1299;
  float r1301 = r1298/r1300;
  float r1302 = floor(r1301);
  float r1303 = r1300*r1302;
  float r1304 = r1298-r1303;
  float r1305 = r1304+r1116;
  float r1306=r1305;
  float r1307 = 43758.5453123;
  float r1308 = r1306*r1307;
  float r1309=r1308;
  float r1310 = 1.0;
  float r1311=r1310;
  float r1312 = r1309/r1311;
  float r1313 = floor(r1312);
  float r1314 = r1311*r1313;
  float r1315 = r1309-r1314;
  float r1316 = 78.233;
  float r1317 = r1306*r1316;
  float r1318 = r1315+r1317;
  float r1319=r1318;
  float r1320 = 1.0;
  float r1321=r1320;
  float r1322 = r1319/r1321;
  float r1323 = floor(r1322);
  float r1324 = r1321*r1323;
  float r1325 = r1319-r1324;
  float r1326 = r1325+r1117;
  float r1327=r1326;
  float r1328 = 43758.5453123;
  float r1329 = r1327*r1328;
  float r1330=r1329;
  float r1331 = 1.0;
  float r1332=r1331;
  float r1333 = r1330/r1332;
  float r1334 = floor(r1333);
  float r1335 = r1332*r1334;
  float r1336 = r1330-r1335;
  float r1337 = 78.233;
  float r1338 = r1327*r1337;
  float r1339 = r1336+r1338;
  float r1340=r1339;
  float r1341 = 1.0;
  float r1342=r1341;
  float r1343 = r1340/r1342;
  float r1344 = floor(r1343);
  float r1345 = r1342*r1344;
  float r1346 = r1340-r1345;
  float r1347=r1346;
  float r1348 = 43758.5453123;
  float r1349 = r1347*r1348;
  float r1350=r1349;
  float r1351 = 1.0;
  float r1352=r1351;
  float r1353 = r1350/r1352;
  float r1354 = floor(r1353);
  float r1355 = r1352*r1354;
  float r1356 = r1350-r1355;
  float r1357 = 78.233;
  float r1358 = r1347*r1357;
  float r1359 = r1356+r1358;
  float r1360=r1359;
  float r1361 = 1.0;
  float r1362=r1361;
  float r1363 = r1360/r1362;
  float r1364 = floor(r1363);
  float r1365 = r1362*r1364;
  float r1366 = r1360-r1365;
  vec3 r1367 = vec3(r1202,r1284,r1366);
  vec3 r1368=r1367;
  float r1369 = 1.0;
  float r1370 = r27+r1369;
  float r1371=r1370;
  float r1372=r29;
  float r1373 = 1.0;
  float r1374 = r31+r1373;
  float r1375=r1374;
  float r1376=r1371;
  float r1377 = 43758.5453123;
  float r1378 = r1376*r1377;
  float r1379=r1378;
  float r1380 = 1.0;
  float r1381=r1380;
  float r1382 = r1379/r1381;
  float r1383 = floor(r1382);
  float r1384 = r1381*r1383;
  float r1385 = r1379-r1384;
  float r1386 = 78.233;
  float r1387 = r1376*r1386;
  float r1388 = r1385+r1387;
  float r1389=r1388;
  float r1390 = 1.0;
  float r1391=r1390;
  float r1392 = r1389/r1391;
  float r1393 = floor(r1392);
  float r1394 = r1391*r1393;
  float r1395 = r1389-r1394;
  float r1396 = r1395+r1372;
  float r1397=r1396;
  float r1398 = 43758.5453123;
  float r1399 = r1397*r1398;
  float r1400=r1399;
  float r1401 = 1.0;
  float r1402=r1401;
  float r1403 = r1400/r1402;
  float r1404 = floor(r1403);
  float r1405 = r1402*r1404;
  float r1406 = r1400-r1405;
  float r1407 = 78.233;
  float r1408 = r1397*r1407;
  float r1409 = r1406+r1408;
  float r1410=r1409;
  float r1411 = 1.0;
  float r1412=r1411;
  float r1413 = r1410/r1412;
  float r1414 = floor(r1413);
  float r1415 = r1412*r1414;
  float r1416 = r1410-r1415;
  float r1417 = r1416+r1375;
  float r1418=r1417;
  float r1419 = 43758.5453123;
  float r1420 = r1418*r1419;
  float r1421=r1420;
  float r1422 = 1.0;
  float r1423=r1422;
  float r1424 = r1421/r1423;
  float r1425 = floor(r1424);
  float r1426 = r1423*r1425;
  float r1427 = r1421-r1426;
  float r1428 = 78.233;
  float r1429 = r1418*r1428;
  float r1430 = r1427+r1429;
  float r1431=r1430;
  float r1432 = 1.0;
  float r1433=r1432;
  float r1434 = r1431/r1433;
  float r1435 = floor(r1434);
  float r1436 = r1433*r1435;
  float r1437 = r1431-r1436;
  float r1438=r1437;
  float r1439 = 43758.5453123;
  float r1440 = r1438*r1439;
  float r1441=r1440;
  float r1442 = 1.0;
  float r1443=r1442;
  float r1444 = r1441/r1443;
  float r1445 = floor(r1444);
  float r1446 = r1443*r1445;
  float r1447 = r1441-r1446;
  float r1448 = 78.233;
  float r1449 = r1438*r1448;
  float r1450 = r1447+r1449;
  float r1451=r1450;
  float r1452 = 1.0;
  float r1453=r1452;
  float r1454 = r1451/r1453;
  float r1455 = floor(r1454);
  float r1456 = r1453*r1455;
  float r1457 = r1451-r1456;
  float r1458=r1372;
  float r1459 = 43758.5453123;
  float r1460 = r1458*r1459;
  float r1461=r1460;
  float r1462 = 1.0;
  float r1463=r1462;
  float r1464 = r1461/r1463;
  float r1465 = floor(r1464);
  float r1466 = r1463*r1465;
  float r1467 = r1461-r1466;
  float r1468 = 78.233;
  float r1469 = r1458*r1468;
  float r1470 = r1467+r1469;
  float r1471=r1470;
  float r1472 = 1.0;
  float r1473=r1472;
  float r1474 = r1471/r1473;
  float r1475 = floor(r1474);
  float r1476 = r1473*r1475;
  float r1477 = r1471-r1476;
  float r1478 = r1477+r1375;
  float r1479=r1478;
  float r1480 = 43758.5453123;
  float r1481 = r1479*r1480;
  float r1482=r1481;
  float r1483 = 1.0;
  float r1484=r1483;
  float r1485 = r1482/r1484;
  float r1486 = floor(r1485);
  float r1487 = r1484*r1486;
  float r1488 = r1482-r1487;
  float r1489 = 78.233;
  float r1490 = r1479*r1489;
  float r1491 = r1488+r1490;
  float r1492=r1491;
  float r1493 = 1.0;
  float r1494=r1493;
  float r1495 = r1492/r1494;
  float r1496 = floor(r1495);
  float r1497 = r1494*r1496;
  float r1498 = r1492-r1497;
  float r1499 = r1498+r1371;
  float r1500=r1499;
  float r1501 = 43758.5453123;
  float r1502 = r1500*r1501;
  float r1503=r1502;
  float r1504 = 1.0;
  float r1505=r1504;
  float r1506 = r1503/r1505;
  float r1507 = floor(r1506);
  float r1508 = r1505*r1507;
  float r1509 = r1503-r1508;
  float r1510 = 78.233;
  float r1511 = r1500*r1510;
  float r1512 = r1509+r1511;
  float r1513=r1512;
  float r1514 = 1.0;
  float r1515=r1514;
  float r1516 = r1513/r1515;
  float r1517 = floor(r1516);
  float r1518 = r1515*r1517;
  float r1519 = r1513-r1518;
  float r1520=r1519;
  float r1521 = 43758.5453123;
  float r1522 = r1520*r1521;
  float r1523=r1522;
  float r1524 = 1.0;
  float r1525=r1524;
  float r1526 = r1523/r1525;
  float r1527 = floor(r1526);
  float r1528 = r1525*r1527;
  float r1529 = r1523-r1528;
  float r1530 = 78.233;
  float r1531 = r1520*r1530;
  float r1532 = r1529+r1531;
  float r1533=r1532;
  float r1534 = 1.0;
  float r1535=r1534;
  float r1536 = r1533/r1535;
  float r1537 = floor(r1536);
  float r1538 = r1535*r1537;
  float r1539 = r1533-r1538;
  float r1540=r1375;
  float r1541 = 43758.5453123;
  float r1542 = r1540*r1541;
  float r1543=r1542;
  float r1544 = 1.0;
  float r1545=r1544;
  float r1546 = r1543/r1545;
  float r1547 = floor(r1546);
  float r1548 = r1545*r1547;
  float r1549 = r1543-r1548;
  float r1550 = 78.233;
  float r1551 = r1540*r1550;
  float r1552 = r1549+r1551;
  float r1553=r1552;
  float r1554 = 1.0;
  float r1555=r1554;
  float r1556 = r1553/r1555;
  float r1557 = floor(r1556);
  float r1558 = r1555*r1557;
  float r1559 = r1553-r1558;
  float r1560 = r1559+r1371;
  float r1561=r1560;
  float r1562 = 43758.5453123;
  float r1563 = r1561*r1562;
  float r1564=r1563;
  float r1565 = 1.0;
  float r1566=r1565;
  float r1567 = r1564/r1566;
  float r1568 = floor(r1567);
  float r1569 = r1566*r1568;
  float r1570 = r1564-r1569;
  float r1571 = 78.233;
  float r1572 = r1561*r1571;
  float r1573 = r1570+r1572;
  float r1574=r1573;
  float r1575 = 1.0;
  float r1576=r1575;
  float r1577 = r1574/r1576;
  float r1578 = floor(r1577);
  float r1579 = r1576*r1578;
  float r1580 = r1574-r1579;
  float r1581 = r1580+r1372;
  float r1582=r1581;
  float r1583 = 43758.5453123;
  float r1584 = r1582*r1583;
  float r1585=r1584;
  float r1586 = 1.0;
  float r1587=r1586;
  float r1588 = r1585/r1587;
  float r1589 = floor(r1588);
  float r1590 = r1587*r1589;
  float r1591 = r1585-r1590;
  float r1592 = 78.233;
  float r1593 = r1582*r1592;
  float r1594 = r1591+r1593;
  float r1595=r1594;
  float r1596 = 1.0;
  float r1597=r1596;
  float r1598 = r1595/r1597;
  float r1599 = floor(r1598);
  float r1600 = r1597*r1599;
  float r1601 = r1595-r1600;
  float r1602=r1601;
  float r1603 = 43758.5453123;
  float r1604 = r1602*r1603;
  float r1605=r1604;
  float r1606 = 1.0;
  float r1607=r1606;
  float r1608 = r1605/r1607;
  float r1609 = floor(r1608);
  float r1610 = r1607*r1609;
  float r1611 = r1605-r1610;
  float r1612 = 78.233;
  float r1613 = r1602*r1612;
  float r1614 = r1611+r1613;
  float r1615=r1614;
  float r1616 = 1.0;
  float r1617=r1616;
  float r1618 = r1615/r1617;
  float r1619 = floor(r1618);
  float r1620 = r1617*r1619;
  float r1621 = r1615-r1620;
  vec3 r1622 = vec3(r1457,r1539,r1621);
  vec3 r1623=r1622;
  float r1624 = 1.0;
  float r1625 = r27+r1624;
  float r1626=r1625;
  float r1627 = 1.0;
  float r1628 = r29+r1627;
  float r1629=r1628;
  float r1630 = 1.0;
  float r1631 = r31+r1630;
  float r1632=r1631;
  float r1633=r1626;
  float r1634 = 43758.5453123;
  float r1635 = r1633*r1634;
  float r1636=r1635;
  float r1637 = 1.0;
  float r1638=r1637;
  float r1639 = r1636/r1638;
  float r1640 = floor(r1639);
  float r1641 = r1638*r1640;
  float r1642 = r1636-r1641;
  float r1643 = 78.233;
  float r1644 = r1633*r1643;
  float r1645 = r1642+r1644;
  float r1646=r1645;
  float r1647 = 1.0;
  float r1648=r1647;
  float r1649 = r1646/r1648;
  float r1650 = floor(r1649);
  float r1651 = r1648*r1650;
  float r1652 = r1646-r1651;
  float r1653 = r1652+r1629;
  float r1654=r1653;
  float r1655 = 43758.5453123;
  float r1656 = r1654*r1655;
  float r1657=r1656;
  float r1658 = 1.0;
  float r1659=r1658;
  float r1660 = r1657/r1659;
  float r1661 = floor(r1660);
  float r1662 = r1659*r1661;
  float r1663 = r1657-r1662;
  float r1664 = 78.233;
  float r1665 = r1654*r1664;
  float r1666 = r1663+r1665;
  float r1667=r1666;
  float r1668 = 1.0;
  float r1669=r1668;
  float r1670 = r1667/r1669;
  float r1671 = floor(r1670);
  float r1672 = r1669*r1671;
  float r1673 = r1667-r1672;
  float r1674 = r1673+r1632;
  float r1675=r1674;
  float r1676 = 43758.5453123;
  float r1677 = r1675*r1676;
  float r1678=r1677;
  float r1679 = 1.0;
  float r1680=r1679;
  float r1681 = r1678/r1680;
  float r1682 = floor(r1681);
  float r1683 = r1680*r1682;
  float r1684 = r1678-r1683;
  float r1685 = 78.233;
  float r1686 = r1675*r1685;
  float r1687 = r1684+r1686;
  float r1688=r1687;
  float r1689 = 1.0;
  float r1690=r1689;
  float r1691 = r1688/r1690;
  float r1692 = floor(r1691);
  float r1693 = r1690*r1692;
  float r1694 = r1688-r1693;
  float r1695=r1694;
  float r1696 = 43758.5453123;
  float r1697 = r1695*r1696;
  float r1698=r1697;
  float r1699 = 1.0;
  float r1700=r1699;
  float r1701 = r1698/r1700;
  float r1702 = floor(r1701);
  float r1703 = r1700*r1702;
  float r1704 = r1698-r1703;
  float r1705 = 78.233;
  float r1706 = r1695*r1705;
  float r1707 = r1704+r1706;
  float r1708=r1707;
  float r1709 = 1.0;
  float r1710=r1709;
  float r1711 = r1708/r1710;
  float r1712 = floor(r1711);
  float r1713 = r1710*r1712;
  float r1714 = r1708-r1713;
  float r1715=r1629;
  float r1716 = 43758.5453123;
  float r1717 = r1715*r1716;
  float r1718=r1717;
  float r1719 = 1.0;
  float r1720=r1719;
  float r1721 = r1718/r1720;
  float r1722 = floor(r1721);
  float r1723 = r1720*r1722;
  float r1724 = r1718-r1723;
  float r1725 = 78.233;
  float r1726 = r1715*r1725;
  float r1727 = r1724+r1726;
  float r1728=r1727;
  float r1729 = 1.0;
  float r1730=r1729;
  float r1731 = r1728/r1730;
  float r1732 = floor(r1731);
  float r1733 = r1730*r1732;
  float r1734 = r1728-r1733;
  float r1735 = r1734+r1632;
  float r1736=r1735;
  float r1737 = 43758.5453123;
  float r1738 = r1736*r1737;
  float r1739=r1738;
  float r1740 = 1.0;
  float r1741=r1740;
  float r1742 = r1739/r1741;
  float r1743 = floor(r1742);
  float r1744 = r1741*r1743;
  float r1745 = r1739-r1744;
  float r1746 = 78.233;
  float r1747 = r1736*r1746;
  float r1748 = r1745+r1747;
  float r1749=r1748;
  float r1750 = 1.0;
  float r1751=r1750;
  float r1752 = r1749/r1751;
  float r1753 = floor(r1752);
  float r1754 = r1751*r1753;
  float r1755 = r1749-r1754;
  float r1756 = r1755+r1626;
  float r1757=r1756;
  float r1758 = 43758.5453123;
  float r1759 = r1757*r1758;
  float r1760=r1759;
  float r1761 = 1.0;
  float r1762=r1761;
  float r1763 = r1760/r1762;
  float r1764 = floor(r1763);
  float r1765 = r1762*r1764;
  float r1766 = r1760-r1765;
  float r1767 = 78.233;
  float r1768 = r1757*r1767;
  float r1769 = r1766+r1768;
  float r1770=r1769;
  float r1771 = 1.0;
  float r1772=r1771;
  float r1773 = r1770/r1772;
  float r1774 = floor(r1773);
  float r1775 = r1772*r1774;
  float r1776 = r1770-r1775;
  float r1777=r1776;
  float r1778 = 43758.5453123;
  float r1779 = r1777*r1778;
  float r1780=r1779;
  float r1781 = 1.0;
  float r1782=r1781;
  float r1783 = r1780/r1782;
  float r1784 = floor(r1783);
  float r1785 = r1782*r1784;
  float r1786 = r1780-r1785;
  float r1787 = 78.233;
  float r1788 = r1777*r1787;
  float r1789 = r1786+r1788;
  float r1790=r1789;
  float r1791 = 1.0;
  float r1792=r1791;
  float r1793 = r1790/r1792;
  float r1794 = floor(r1793);
  float r1795 = r1792*r1794;
  float r1796 = r1790-r1795;
  float r1797=r1632;
  float r1798 = 43758.5453123;
  float r1799 = r1797*r1798;
  float r1800=r1799;
  float r1801 = 1.0;
  float r1802=r1801;
  float r1803 = r1800/r1802;
  float r1804 = floor(r1803);
  float r1805 = r1802*r1804;
  float r1806 = r1800-r1805;
  float r1807 = 78.233;
  float r1808 = r1797*r1807;
  float r1809 = r1806+r1808;
  float r1810=r1809;
  float r1811 = 1.0;
  float r1812=r1811;
  float r1813 = r1810/r1812;
  float r1814 = floor(r1813);
  float r1815 = r1812*r1814;
  float r1816 = r1810-r1815;
  float r1817 = r1816+r1626;
  float r1818=r1817;
  float r1819 = 43758.5453123;
  float r1820 = r1818*r1819;
  float r1821=r1820;
  float r1822 = 1.0;
  float r1823=r1822;
  float r1824 = r1821/r1823;
  float r1825 = floor(r1824);
  float r1826 = r1823*r1825;
  float r1827 = r1821-r1826;
  float r1828 = 78.233;
  float r1829 = r1818*r1828;
  float r1830 = r1827+r1829;
  float r1831=r1830;
  float r1832 = 1.0;
  float r1833=r1832;
  float r1834 = r1831/r1833;
  float r1835 = floor(r1834);
  float r1836 = r1833*r1835;
  float r1837 = r1831-r1836;
  float r1838 = r1837+r1629;
  float r1839=r1838;
  float r1840 = 43758.5453123;
  float r1841 = r1839*r1840;
  float r1842=r1841;
  float r1843 = 1.0;
  float r1844=r1843;
  float r1845 = r1842/r1844;
  float r1846 = floor(r1845);
  float r1847 = r1844*r1846;
  float r1848 = r1842-r1847;
  float r1849 = 78.233;
  float r1850 = r1839*r1849;
  float r1851 = r1848+r1850;
  float r1852=r1851;
  float r1853 = 1.0;
  float r1854=r1853;
  float r1855 = r1852/r1854;
  float r1856 = floor(r1855);
  float r1857 = r1854*r1856;
  float r1858 = r1852-r1857;
  float r1859=r1858;
  float r1860 = 43758.5453123;
  float r1861 = r1859*r1860;
  float r1862=r1861;
  float r1863 = 1.0;
  float r1864=r1863;
  float r1865 = r1862/r1864;
  float r1866 = floor(r1865);
  float r1867 = r1864*r1866;
  float r1868 = r1862-r1867;
  float r1869 = 78.233;
  float r1870 = r1859*r1869;
  float r1871 = r1868+r1870;
  float r1872=r1871;
  float r1873 = 1.0;
  float r1874=r1873;
  float r1875 = r1872/r1874;
  float r1876 = floor(r1875);
  float r1877 = r1874*r1876;
  float r1878 = r1872-r1877;
  vec3 r1879 = vec3(r1714,r1796,r1878);
  vec3 r1880=r1879;
  float r1881=r27;
  float r1882 = 1.0;
  float r1883 = r29+r1882;
  float r1884=r1883;
  float r1885 = 1.0;
  float r1886 = r31+r1885;
  float r1887=r1886;
  float r1888=r1881;
  float r1889 = 43758.5453123;
  float r1890 = r1888*r1889;
  float r1891=r1890;
  float r1892 = 1.0;
  float r1893=r1892;
  float r1894 = r1891/r1893;
  float r1895 = floor(r1894);
  float r1896 = r1893*r1895;
  float r1897 = r1891-r1896;
  float r1898 = 78.233;
  float r1899 = r1888*r1898;
  float r1900 = r1897+r1899;
  float r1901=r1900;
  float r1902 = 1.0;
  float r1903=r1902;
  float r1904 = r1901/r1903;
  float r1905 = floor(r1904);
  float r1906 = r1903*r1905;
  float r1907 = r1901-r1906;
  float r1908 = r1907+r1884;
  float r1909=r1908;
  float r1910 = 43758.5453123;
  float r1911 = r1909*r1910;
  float r1912=r1911;
  float r1913 = 1.0;
  float r1914=r1913;
  float r1915 = r1912/r1914;
  float r1916 = floor(r1915);
  float r1917 = r1914*r1916;
  float r1918 = r1912-r1917;
  float r1919 = 78.233;
  float r1920 = r1909*r1919;
  float r1921 = r1918+r1920;
  float r1922=r1921;
  float r1923 = 1.0;
  float r1924=r1923;
  float r1925 = r1922/r1924;
  float r1926 = floor(r1925);
  float r1927 = r1924*r1926;
  float r1928 = r1922-r1927;
  float r1929 = r1928+r1887;
  float r1930=r1929;
  float r1931 = 43758.5453123;
  float r1932 = r1930*r1931;
  float r1933=r1932;
  float r1934 = 1.0;
  float r1935=r1934;
  float r1936 = r1933/r1935;
  float r1937 = floor(r1936);
  float r1938 = r1935*r1937;
  float r1939 = r1933-r1938;
  float r1940 = 78.233;
  float r1941 = r1930*r1940;
  float r1942 = r1939+r1941;
  float r1943=r1942;
  float r1944 = 1.0;
  float r1945=r1944;
  float r1946 = r1943/r1945;
  float r1947 = floor(r1946);
  float r1948 = r1945*r1947;
  float r1949 = r1943-r1948;
  float r1950=r1949;
  float r1951 = 43758.5453123;
  float r1952 = r1950*r1951;
  float r1953=r1952;
  float r1954 = 1.0;
  float r1955=r1954;
  float r1956 = r1953/r1955;
  float r1957 = floor(r1956);
  float r1958 = r1955*r1957;
  float r1959 = r1953-r1958;
  float r1960 = 78.233;
  float r1961 = r1950*r1960;
  float r1962 = r1959+r1961;
  float r1963=r1962;
  float r1964 = 1.0;
  float r1965=r1964;
  float r1966 = r1963/r1965;
  float r1967 = floor(r1966);
  float r1968 = r1965*r1967;
  float r1969 = r1963-r1968;
  float r1970=r1884;
  float r1971 = 43758.5453123;
  float r1972 = r1970*r1971;
  float r1973=r1972;
  float r1974 = 1.0;
  float r1975=r1974;
  float r1976 = r1973/r1975;
  float r1977 = floor(r1976);
  float r1978 = r1975*r1977;
  float r1979 = r1973-r1978;
  float r1980 = 78.233;
  float r1981 = r1970*r1980;
  float r1982 = r1979+r1981;
  float r1983=r1982;
  float r1984 = 1.0;
  float r1985=r1984;
  float r1986 = r1983/r1985;
  float r1987 = floor(r1986);
  float r1988 = r1985*r1987;
  float r1989 = r1983-r1988;
  float r1990 = r1989+r1887;
  float r1991=r1990;
  float r1992 = 43758.5453123;
  float r1993 = r1991*r1992;
  float r1994=r1993;
  float r1995 = 1.0;
  float r1996=r1995;
  float r1997 = r1994/r1996;
  float r1998 = floor(r1997);
  float r1999 = r1996*r1998;
  float r2000 = r1994-r1999;
  float r2001 = 78.233;
  float r2002 = r1991*r2001;
  float r2003 = r2000+r2002;
  float r2004=r2003;
  float r2005 = 1.0;
  float r2006=r2005;
  float r2007 = r2004/r2006;
  float r2008 = floor(r2007);
  float r2009 = r2006*r2008;
  float r2010 = r2004-r2009;
  float r2011 = r2010+r1881;
  float r2012=r2011;
  float r2013 = 43758.5453123;
  float r2014 = r2012*r2013;
  float r2015=r2014;
  float r2016 = 1.0;
  float r2017=r2016;
  float r2018 = r2015/r2017;
  float r2019 = floor(r2018);
  float r2020 = r2017*r2019;
  float r2021 = r2015-r2020;
  float r2022 = 78.233;
  float r2023 = r2012*r2022;
  float r2024 = r2021+r2023;
  float r2025=r2024;
  float r2026 = 1.0;
  float r2027=r2026;
  float r2028 = r2025/r2027;
  float r2029 = floor(r2028);
  float r2030 = r2027*r2029;
  float r2031 = r2025-r2030;
  float r2032=r2031;
  float r2033 = 43758.5453123;
  float r2034 = r2032*r2033;
  float r2035=r2034;
  float r2036 = 1.0;
  float r2037=r2036;
  float r2038 = r2035/r2037;
  float r2039 = floor(r2038);
  float r2040 = r2037*r2039;
  float r2041 = r2035-r2040;
  float r2042 = 78.233;
  float r2043 = r2032*r2042;
  float r2044 = r2041+r2043;
  float r2045=r2044;
  float r2046 = 1.0;
  float r2047=r2046;
  float r2048 = r2045/r2047;
  float r2049 = floor(r2048);
  float r2050 = r2047*r2049;
  float r2051 = r2045-r2050;
  float r2052=r1887;
  float r2053 = 43758.5453123;
  float r2054 = r2052*r2053;
  float r2055=r2054;
  float r2056 = 1.0;
  float r2057=r2056;
  float r2058 = r2055/r2057;
  float r2059 = floor(r2058);
  float r2060 = r2057*r2059;
  float r2061 = r2055-r2060;
  float r2062 = 78.233;
  float r2063 = r2052*r2062;
  float r2064 = r2061+r2063;
  float r2065=r2064;
  float r2066 = 1.0;
  float r2067=r2066;
  float r2068 = r2065/r2067;
  float r2069 = floor(r2068);
  float r2070 = r2067*r2069;
  float r2071 = r2065-r2070;
  float r2072 = r2071+r1881;
  float r2073=r2072;
  float r2074 = 43758.5453123;
  float r2075 = r2073*r2074;
  float r2076=r2075;
  float r2077 = 1.0;
  float r2078=r2077;
  float r2079 = r2076/r2078;
  float r2080 = floor(r2079);
  float r2081 = r2078*r2080;
  float r2082 = r2076-r2081;
  float r2083 = 78.233;
  float r2084 = r2073*r2083;
  float r2085 = r2082+r2084;
  float r2086=r2085;
  float r2087 = 1.0;
  float r2088=r2087;
  float r2089 = r2086/r2088;
  float r2090 = floor(r2089);
  float r2091 = r2088*r2090;
  float r2092 = r2086-r2091;
  float r2093 = r2092+r1884;
  float r2094=r2093;
  float r2095 = 43758.5453123;
  float r2096 = r2094*r2095;
  float r2097=r2096;
  float r2098 = 1.0;
  float r2099=r2098;
  float r2100 = r2097/r2099;
  float r2101 = floor(r2100);
  float r2102 = r2099*r2101;
  float r2103 = r2097-r2102;
  float r2104 = 78.233;
  float r2105 = r2094*r2104;
  float r2106 = r2103+r2105;
  float r2107=r2106;
  float r2108 = 1.0;
  float r2109=r2108;
  float r2110 = r2107/r2109;
  float r2111 = floor(r2110);
  float r2112 = r2109*r2111;
  float r2113 = r2107-r2112;
  float r2114=r2113;
  float r2115 = 43758.5453123;
  float r2116 = r2114*r2115;
  float r2117=r2116;
  float r2118 = 1.0;
  float r2119=r2118;
  float r2120 = r2117/r2119;
  float r2121 = floor(r2120);
  float r2122 = r2119*r2121;
  float r2123 = r2117-r2122;
  float r2124 = 78.233;
  float r2125 = r2114*r2124;
  float r2126 = r2123+r2125;
  float r2127=r2126;
  float r2128 = 1.0;
  float r2129=r2128;
  float r2130 = r2127/r2129;
  float r2131 = floor(r2130);
  float r2132 = r2129*r2131;
  float r2133 = r2127-r2132;
  vec3 r2134 = vec3(r1969,r2051,r2133);
  vec3 r2135=r2134;
  vec3 r2136=r354;
  vec3 r2137=r607;
  float r2138=r55;
  float r2139 = 1.0;
  float r2140 = r2139-r2138;
  vec3 r2141 = r2136*vec3(r2140,r2140,r2140);
  vec3 r2142 = r2137*vec3(r2138,r2138,r2138);
  vec3 r2143 = r2141+r2142;
  vec3 r2144=r2143;
  vec3 r2145=r1115;
  vec3 r2146=r862;
  float r2147=r55;
  float r2148 = 1.0;
  float r2149 = r2148-r2147;
  vec3 r2150 = r2145*vec3(r2149,r2149,r2149);
  vec3 r2151 = r2146*vec3(r2147,r2147,r2147);
  vec3 r2152 = r2150+r2151;
  vec3 r2153=r2152;
  vec3 r2154=r1368;
  vec3 r2155=r1623;
  float r2156=r55;
  float r2157 = 1.0;
  float r2158 = r2157-r2156;
  vec3 r2159 = r2154*vec3(r2158,r2158,r2158);
  vec3 r2160 = r2155*vec3(r2156,r2156,r2156);
  vec3 r2161 = r2159+r2160;
  vec3 r2162=r2161;
  vec3 r2163=r2135;
  vec3 r2164=r1880;
  float r2165=r55;
  float r2166 = 1.0;
  float r2167 = r2166-r2165;
  vec3 r2168 = r2163*vec3(r2167,r2167,r2167);
  vec3 r2169 = r2164*vec3(r2165,r2165,r2165);
  vec3 r2170 = r2168+r2169;
  vec3 r2171=r2170;
  vec3 r2172=r2144;
  vec3 r2173=r2153;
  float r2174=r79;
  float r2175 = 1.0;
  float r2176 = r2175-r2174;
  vec3 r2177 = r2172*vec3(r2176,r2176,r2176);
  vec3 r2178 = r2173*vec3(r2174,r2174,r2174);
  vec3 r2179 = r2177+r2178;
  vec3 r2180=r2179;
  vec3 r2181=r2162;
  vec3 r2182=r2171;
  float r2183=r79;
  float r2184 = 1.0;
  float r2185 = r2184-r2183;
  vec3 r2186 = r2181*vec3(r2185,r2185,r2185);
  vec3 r2187 = r2182*vec3(r2183,r2183,r2183);
  vec3 r2188 = r2186+r2187;
  vec3 r2189=r2188;
  vec3 r2190=r2180;
  vec3 r2191=r2189;
  float r2192=r103;
  float r2193 = 1.0;
  float r2194 = r2193-r2192;
  vec3 r2195 = r2190*vec3(r2194,r2194,r2194);
  vec3 r2196 = r2191*vec3(r2192,r2192,r2192);
  vec3 r2197 = r2195+r2196;
  vec3 r2198=r2197;
  float r2199 = r2198.x;
  float r2200 = 0.25;
  float r2201 = r2199*r2200;
  float r2202 = 0.0;
  float r2203=r2202;
  float r2204 = r15.y;
  float r2205 = 2.0;
  float r2206 = r2204/r2205;
  float r2207=r2206;
  float r2208 = r15.x;
  float r2209=r2208;
  float r2210 = floor(r2203);
  float r2211=r2210;
  float r2212 = floor(r2207);
  float r2213=r2212;
  float r2214 = floor(r2209);
  float r2215=r2214;
  float r2216 = 0.0;
  float r2217=r2216;
  float r2218 = 1.0;
  float r2219=r2218;
  float r2220 = r2203-r2211;
  float r2221=r2220;
  float r2222 = r2221-r2217;
  float r2223 = r2219-r2217;
  float r2224 = r2222/r2223;
  float r2225=r2224;
  float r2226 = 0.0;
  float r2227=r2226;
  float r2228 = 1.0;
  float r2229=r2228;
  float r2230 = max(r2225,r2227);
  float r2231 = min(r2230,r2229);
  float r2232=r2231;
  float r2233 = r2232*r2232;
  float r2234 = 3.0;
  float r2235 = 2.0;
  float r2236 = r2235*r2232;
  float r2237 = r2234-r2236;
  float r2238 = r2233*r2237;
  float r2239=r2238;
  float r2240 = 0.0;
  float r2241=r2240;
  float r2242 = 1.0;
  float r2243=r2242;
  float r2244 = r2207-r2213;
  float r2245=r2244;
  float r2246 = r2245-r2241;
  float r2247 = r2243-r2241;
  float r2248 = r2246/r2247;
  float r2249=r2248;
  float r2250 = 0.0;
  float r2251=r2250;
  float r2252 = 1.0;
  float r2253=r2252;
  float r2254 = max(r2249,r2251);
  float r2255 = min(r2254,r2253);
  float r2256=r2255;
  float r2257 = r2256*r2256;
  float r2258 = 3.0;
  float r2259 = 2.0;
  float r2260 = r2259*r2256;
  float r2261 = r2258-r2260;
  float r2262 = r2257*r2261;
  float r2263=r2262;
  float r2264 = 0.0;
  float r2265=r2264;
  float r2266 = 1.0;
  float r2267=r2266;
  float r2268 = r2209-r2215;
  float r2269=r2268;
  float r2270 = r2269-r2265;
  float r2271 = r2267-r2265;
  float r2272 = r2270/r2271;
  float r2273=r2272;
  float r2274 = 0.0;
  float r2275=r2274;
  float r2276 = 1.0;
  float r2277=r2276;
  float r2278 = max(r2273,r2275);
  float r2279 = min(r2278,r2277);
  float r2280=r2279;
  float r2281 = r2280*r2280;
  float r2282 = 3.0;
  float r2283 = 2.0;
  float r2284 = r2283*r2280;
  float r2285 = r2282-r2284;
  float r2286 = r2281*r2285;
  float r2287=r2286;
  float r2288=r2211;
  float r2289=r2213;
  float r2290=r2215;
  float r2291=r2288;
  float r2292 = 43758.5453123;
  float r2293 = r2291*r2292;
  float r2294=r2293;
  float r2295 = 1.0;
  float r2296=r2295;
  float r2297 = r2294/r2296;
  float r2298 = floor(r2297);
  float r2299 = r2296*r2298;
  float r2300 = r2294-r2299;
  float r2301 = 78.233;
  float r2302 = r2291*r2301;
  float r2303 = r2300+r2302;
  float r2304=r2303;
  float r2305 = 1.0;
  float r2306=r2305;
  float r2307 = r2304/r2306;
  float r2308 = floor(r2307);
  float r2309 = r2306*r2308;
  float r2310 = r2304-r2309;
  float r2311 = r2310+r2289;
  float r2312=r2311;
  float r2313 = 43758.5453123;
  float r2314 = r2312*r2313;
  float r2315=r2314;
  float r2316 = 1.0;
  float r2317=r2316;
  float r2318 = r2315/r2317;
  float r2319 = floor(r2318);
  float r2320 = r2317*r2319;
  float r2321 = r2315-r2320;
  float r2322 = 78.233;
  float r2323 = r2312*r2322;
  float r2324 = r2321+r2323;
  float r2325=r2324;
  float r2326 = 1.0;
  float r2327=r2326;
  float r2328 = r2325/r2327;
  float r2329 = floor(r2328);
  float r2330 = r2327*r2329;
  float r2331 = r2325-r2330;
  float r2332 = r2331+r2290;
  float r2333=r2332;
  float r2334 = 43758.5453123;
  float r2335 = r2333*r2334;
  float r2336=r2335;
  float r2337 = 1.0;
  float r2338=r2337;
  float r2339 = r2336/r2338;
  float r2340 = floor(r2339);
  float r2341 = r2338*r2340;
  float r2342 = r2336-r2341;
  float r2343 = 78.233;
  float r2344 = r2333*r2343;
  float r2345 = r2342+r2344;
  float r2346=r2345;
  float r2347 = 1.0;
  float r2348=r2347;
  float r2349 = r2346/r2348;
  float r2350 = floor(r2349);
  float r2351 = r2348*r2350;
  float r2352 = r2346-r2351;
  float r2353=r2352;
  float r2354 = 43758.5453123;
  float r2355 = r2353*r2354;
  float r2356=r2355;
  float r2357 = 1.0;
  float r2358=r2357;
  float r2359 = r2356/r2358;
  float r2360 = floor(r2359);
  float r2361 = r2358*r2360;
  float r2362 = r2356-r2361;
  float r2363 = 78.233;
  float r2364 = r2353*r2363;
  float r2365 = r2362+r2364;
  float r2366=r2365;
  float r2367 = 1.0;
  float r2368=r2367;
  float r2369 = r2366/r2368;
  float r2370 = floor(r2369);
  float r2371 = r2368*r2370;
  float r2372 = r2366-r2371;
  float r2373=r2289;
  float r2374 = 43758.5453123;
  float r2375 = r2373*r2374;
  float r2376=r2375;
  float r2377 = 1.0;
  float r2378=r2377;
  float r2379 = r2376/r2378;
  float r2380 = floor(r2379);
  float r2381 = r2378*r2380;
  float r2382 = r2376-r2381;
  float r2383 = 78.233;
  float r2384 = r2373*r2383;
  float r2385 = r2382+r2384;
  float r2386=r2385;
  float r2387 = 1.0;
  float r2388=r2387;
  float r2389 = r2386/r2388;
  float r2390 = floor(r2389);
  float r2391 = r2388*r2390;
  float r2392 = r2386-r2391;
  float r2393 = r2392+r2290;
  float r2394=r2393;
  float r2395 = 43758.5453123;
  float r2396 = r2394*r2395;
  float r2397=r2396;
  float r2398 = 1.0;
  float r2399=r2398;
  float r2400 = r2397/r2399;
  float r2401 = floor(r2400);
  float r2402 = r2399*r2401;
  float r2403 = r2397-r2402;
  float r2404 = 78.233;
  float r2405 = r2394*r2404;
  float r2406 = r2403+r2405;
  float r2407=r2406;
  float r2408 = 1.0;
  float r2409=r2408;
  float r2410 = r2407/r2409;
  float r2411 = floor(r2410);
  float r2412 = r2409*r2411;
  float r2413 = r2407-r2412;
  float r2414 = r2413+r2288;
  float r2415=r2414;
  float r2416 = 43758.5453123;
  float r2417 = r2415*r2416;
  float r2418=r2417;
  float r2419 = 1.0;
  float r2420=r2419;
  float r2421 = r2418/r2420;
  float r2422 = floor(r2421);
  float r2423 = r2420*r2422;
  float r2424 = r2418-r2423;
  float r2425 = 78.233;
  float r2426 = r2415*r2425;
  float r2427 = r2424+r2426;
  float r2428=r2427;
  float r2429 = 1.0;
  float r2430=r2429;
  float r2431 = r2428/r2430;
  float r2432 = floor(r2431);
  float r2433 = r2430*r2432;
  float r2434 = r2428-r2433;
  float r2435=r2434;
  float r2436 = 43758.5453123;
  float r2437 = r2435*r2436;
  float r2438=r2437;
  float r2439 = 1.0;
  float r2440=r2439;
  float r2441 = r2438/r2440;
  float r2442 = floor(r2441);
  float r2443 = r2440*r2442;
  float r2444 = r2438-r2443;
  float r2445 = 78.233;
  float r2446 = r2435*r2445;
  float r2447 = r2444+r2446;
  float r2448=r2447;
  float r2449 = 1.0;
  float r2450=r2449;
  float r2451 = r2448/r2450;
  float r2452 = floor(r2451);
  float r2453 = r2450*r2452;
  float r2454 = r2448-r2453;
  float r2455=r2290;
  float r2456 = 43758.5453123;
  float r2457 = r2455*r2456;
  float r2458=r2457;
  float r2459 = 1.0;
  float r2460=r2459;
  float r2461 = r2458/r2460;
  float r2462 = floor(r2461);
  float r2463 = r2460*r2462;
  float r2464 = r2458-r2463;
  float r2465 = 78.233;
  float r2466 = r2455*r2465;
  float r2467 = r2464+r2466;
  float r2468=r2467;
  float r2469 = 1.0;
  float r2470=r2469;
  float r2471 = r2468/r2470;
  float r2472 = floor(r2471);
  float r2473 = r2470*r2472;
  float r2474 = r2468-r2473;
  float r2475 = r2474+r2288;
  float r2476=r2475;
  float r2477 = 43758.5453123;
  float r2478 = r2476*r2477;
  float r2479=r2478;
  float r2480 = 1.0;
  float r2481=r2480;
  float r2482 = r2479/r2481;
  float r2483 = floor(r2482);
  float r2484 = r2481*r2483;
  float r2485 = r2479-r2484;
  float r2486 = 78.233;
  float r2487 = r2476*r2486;
  float r2488 = r2485+r2487;
  float r2489=r2488;
  float r2490 = 1.0;
  float r2491=r2490;
  float r2492 = r2489/r2491;
  float r2493 = floor(r2492);
  float r2494 = r2491*r2493;
  float r2495 = r2489-r2494;
  float r2496 = r2495+r2289;
  float r2497=r2496;
  float r2498 = 43758.5453123;
  float r2499 = r2497*r2498;
  float r2500=r2499;
  float r2501 = 1.0;
  float r2502=r2501;
  float r2503 = r2500/r2502;
  float r2504 = floor(r2503);
  float r2505 = r2502*r2504;
  float r2506 = r2500-r2505;
  float r2507 = 78.233;
  float r2508 = r2497*r2507;
  float r2509 = r2506+r2508;
  float r2510=r2509;
  float r2511 = 1.0;
  float r2512=r2511;
  float r2513 = r2510/r2512;
  float r2514 = floor(r2513);
  float r2515 = r2512*r2514;
  float r2516 = r2510-r2515;
  float r2517=r2516;
  float r2518 = 43758.5453123;
  float r2519 = r2517*r2518;
  float r2520=r2519;
  float r2521 = 1.0;
  float r2522=r2521;
  float r2523 = r2520/r2522;
  float r2524 = floor(r2523);
  float r2525 = r2522*r2524;
  float r2526 = r2520-r2525;
  float r2527 = 78.233;
  float r2528 = r2517*r2527;
  float r2529 = r2526+r2528;
  float r2530=r2529;
  float r2531 = 1.0;
  float r2532=r2531;
  float r2533 = r2530/r2532;
  float r2534 = floor(r2533);
  float r2535 = r2532*r2534;
  float r2536 = r2530-r2535;
  vec3 r2537 = vec3(r2372,r2454,r2536);
  vec3 r2538=r2537;
  float r2539 = 1.0;
  float r2540 = r2211+r2539;
  float r2541=r2540;
  float r2542=r2213;
  float r2543=r2215;
  float r2544=r2541;
  float r2545 = 43758.5453123;
  float r2546 = r2544*r2545;
  float r2547=r2546;
  float r2548 = 1.0;
  float r2549=r2548;
  float r2550 = r2547/r2549;
  float r2551 = floor(r2550);
  float r2552 = r2549*r2551;
  float r2553 = r2547-r2552;
  float r2554 = 78.233;
  float r2555 = r2544*r2554;
  float r2556 = r2553+r2555;
  float r2557=r2556;
  float r2558 = 1.0;
  float r2559=r2558;
  float r2560 = r2557/r2559;
  float r2561 = floor(r2560);
  float r2562 = r2559*r2561;
  float r2563 = r2557-r2562;
  float r2564 = r2563+r2542;
  float r2565=r2564;
  float r2566 = 43758.5453123;
  float r2567 = r2565*r2566;
  float r2568=r2567;
  float r2569 = 1.0;
  float r2570=r2569;
  float r2571 = r2568/r2570;
  float r2572 = floor(r2571);
  float r2573 = r2570*r2572;
  float r2574 = r2568-r2573;
  float r2575 = 78.233;
  float r2576 = r2565*r2575;
  float r2577 = r2574+r2576;
  float r2578=r2577;
  float r2579 = 1.0;
  float r2580=r2579;
  float r2581 = r2578/r2580;
  float r2582 = floor(r2581);
  float r2583 = r2580*r2582;
  float r2584 = r2578-r2583;
  float r2585 = r2584+r2543;
  float r2586=r2585;
  float r2587 = 43758.5453123;
  float r2588 = r2586*r2587;
  float r2589=r2588;
  float r2590 = 1.0;
  float r2591=r2590;
  float r2592 = r2589/r2591;
  float r2593 = floor(r2592);
  float r2594 = r2591*r2593;
  float r2595 = r2589-r2594;
  float r2596 = 78.233;
  float r2597 = r2586*r2596;
  float r2598 = r2595+r2597;
  float r2599=r2598;
  float r2600 = 1.0;
  float r2601=r2600;
  float r2602 = r2599/r2601;
  float r2603 = floor(r2602);
  float r2604 = r2601*r2603;
  float r2605 = r2599-r2604;
  float r2606=r2605;
  float r2607 = 43758.5453123;
  float r2608 = r2606*r2607;
  float r2609=r2608;
  float r2610 = 1.0;
  float r2611=r2610;
  float r2612 = r2609/r2611;
  float r2613 = floor(r2612);
  float r2614 = r2611*r2613;
  float r2615 = r2609-r2614;
  float r2616 = 78.233;
  float r2617 = r2606*r2616;
  float r2618 = r2615+r2617;
  float r2619=r2618;
  float r2620 = 1.0;
  float r2621=r2620;
  float r2622 = r2619/r2621;
  float r2623 = floor(r2622);
  float r2624 = r2621*r2623;
  float r2625 = r2619-r2624;
  float r2626=r2542;
  float r2627 = 43758.5453123;
  float r2628 = r2626*r2627;
  float r2629=r2628;
  float r2630 = 1.0;
  float r2631=r2630;
  float r2632 = r2629/r2631;
  float r2633 = floor(r2632);
  float r2634 = r2631*r2633;
  float r2635 = r2629-r2634;
  float r2636 = 78.233;
  float r2637 = r2626*r2636;
  float r2638 = r2635+r2637;
  float r2639=r2638;
  float r2640 = 1.0;
  float r2641=r2640;
  float r2642 = r2639/r2641;
  float r2643 = floor(r2642);
  float r2644 = r2641*r2643;
  float r2645 = r2639-r2644;
  float r2646 = r2645+r2543;
  float r2647=r2646;
  float r2648 = 43758.5453123;
  float r2649 = r2647*r2648;
  float r2650=r2649;
  float r2651 = 1.0;
  float r2652=r2651;
  float r2653 = r2650/r2652;
  float r2654 = floor(r2653);
  float r2655 = r2652*r2654;
  float r2656 = r2650-r2655;
  float r2657 = 78.233;
  float r2658 = r2647*r2657;
  float r2659 = r2656+r2658;
  float r2660=r2659;
  float r2661 = 1.0;
  float r2662=r2661;
  float r2663 = r2660/r2662;
  float r2664 = floor(r2663);
  float r2665 = r2662*r2664;
  float r2666 = r2660-r2665;
  float r2667 = r2666+r2541;
  float r2668=r2667;
  float r2669 = 43758.5453123;
  float r2670 = r2668*r2669;
  float r2671=r2670;
  float r2672 = 1.0;
  float r2673=r2672;
  float r2674 = r2671/r2673;
  float r2675 = floor(r2674);
  float r2676 = r2673*r2675;
  float r2677 = r2671-r2676;
  float r2678 = 78.233;
  float r2679 = r2668*r2678;
  float r2680 = r2677+r2679;
  float r2681=r2680;
  float r2682 = 1.0;
  float r2683=r2682;
  float r2684 = r2681/r2683;
  float r2685 = floor(r2684);
  float r2686 = r2683*r2685;
  float r2687 = r2681-r2686;
  float r2688=r2687;
  float r2689 = 43758.5453123;
  float r2690 = r2688*r2689;
  float r2691=r2690;
  float r2692 = 1.0;
  float r2693=r2692;
  float r2694 = r2691/r2693;
  float r2695 = floor(r2694);
  float r2696 = r2693*r2695;
  float r2697 = r2691-r2696;
  float r2698 = 78.233;
  float r2699 = r2688*r2698;
  float r2700 = r2697+r2699;
  float r2701=r2700;
  float r2702 = 1.0;
  float r2703=r2702;
  float r2704 = r2701/r2703;
  float r2705 = floor(r2704);
  float r2706 = r2703*r2705;
  float r2707 = r2701-r2706;
  float r2708=r2543;
  float r2709 = 43758.5453123;
  float r2710 = r2708*r2709;
  float r2711=r2710;
  float r2712 = 1.0;
  float r2713=r2712;
  float r2714 = r2711/r2713;
  float r2715 = floor(r2714);
  float r2716 = r2713*r2715;
  float r2717 = r2711-r2716;
  float r2718 = 78.233;
  float r2719 = r2708*r2718;
  float r2720 = r2717+r2719;
  float r2721=r2720;
  float r2722 = 1.0;
  float r2723=r2722;
  float r2724 = r2721/r2723;
  float r2725 = floor(r2724);
  float r2726 = r2723*r2725;
  float r2727 = r2721-r2726;
  float r2728 = r2727+r2541;
  float r2729=r2728;
  float r2730 = 43758.5453123;
  float r2731 = r2729*r2730;
  float r2732=r2731;
  float r2733 = 1.0;
  float r2734=r2733;
  float r2735 = r2732/r2734;
  float r2736 = floor(r2735);
  float r2737 = r2734*r2736;
  float r2738 = r2732-r2737;
  float r2739 = 78.233;
  float r2740 = r2729*r2739;
  float r2741 = r2738+r2740;
  float r2742=r2741;
  float r2743 = 1.0;
  float r2744=r2743;
  float r2745 = r2742/r2744;
  float r2746 = floor(r2745);
  float r2747 = r2744*r2746;
  float r2748 = r2742-r2747;
  float r2749 = r2748+r2542;
  float r2750=r2749;
  float r2751 = 43758.5453123;
  float r2752 = r2750*r2751;
  float r2753=r2752;
  float r2754 = 1.0;
  float r2755=r2754;
  float r2756 = r2753/r2755;
  float r2757 = floor(r2756);
  float r2758 = r2755*r2757;
  float r2759 = r2753-r2758;
  float r2760 = 78.233;
  float r2761 = r2750*r2760;
  float r2762 = r2759+r2761;
  float r2763=r2762;
  float r2764 = 1.0;
  float r2765=r2764;
  float r2766 = r2763/r2765;
  float r2767 = floor(r2766);
  float r2768 = r2765*r2767;
  float r2769 = r2763-r2768;
  float r2770=r2769;
  float r2771 = 43758.5453123;
  float r2772 = r2770*r2771;
  float r2773=r2772;
  float r2774 = 1.0;
  float r2775=r2774;
  float r2776 = r2773/r2775;
  float r2777 = floor(r2776);
  float r2778 = r2775*r2777;
  float r2779 = r2773-r2778;
  float r2780 = 78.233;
  float r2781 = r2770*r2780;
  float r2782 = r2779+r2781;
  float r2783=r2782;
  float r2784 = 1.0;
  float r2785=r2784;
  float r2786 = r2783/r2785;
  float r2787 = floor(r2786);
  float r2788 = r2785*r2787;
  float r2789 = r2783-r2788;
  vec3 r2790 = vec3(r2625,r2707,r2789);
  vec3 r2791=r2790;
  float r2792 = 1.0;
  float r2793 = r2211+r2792;
  float r2794=r2793;
  float r2795 = 1.0;
  float r2796 = r2213+r2795;
  float r2797=r2796;
  float r2798=r2215;
  float r2799=r2794;
  float r2800 = 43758.5453123;
  float r2801 = r2799*r2800;
  float r2802=r2801;
  float r2803 = 1.0;
  float r2804=r2803;
  float r2805 = r2802/r2804;
  float r2806 = floor(r2805);
  float r2807 = r2804*r2806;
  float r2808 = r2802-r2807;
  float r2809 = 78.233;
  float r2810 = r2799*r2809;
  float r2811 = r2808+r2810;
  float r2812=r2811;
  float r2813 = 1.0;
  float r2814=r2813;
  float r2815 = r2812/r2814;
  float r2816 = floor(r2815);
  float r2817 = r2814*r2816;
  float r2818 = r2812-r2817;
  float r2819 = r2818+r2797;
  float r2820=r2819;
  float r2821 = 43758.5453123;
  float r2822 = r2820*r2821;
  float r2823=r2822;
  float r2824 = 1.0;
  float r2825=r2824;
  float r2826 = r2823/r2825;
  float r2827 = floor(r2826);
  float r2828 = r2825*r2827;
  float r2829 = r2823-r2828;
  float r2830 = 78.233;
  float r2831 = r2820*r2830;
  float r2832 = r2829+r2831;
  float r2833=r2832;
  float r2834 = 1.0;
  float r2835=r2834;
  float r2836 = r2833/r2835;
  float r2837 = floor(r2836);
  float r2838 = r2835*r2837;
  float r2839 = r2833-r2838;
  float r2840 = r2839+r2798;
  float r2841=r2840;
  float r2842 = 43758.5453123;
  float r2843 = r2841*r2842;
  float r2844=r2843;
  float r2845 = 1.0;
  float r2846=r2845;
  float r2847 = r2844/r2846;
  float r2848 = floor(r2847);
  float r2849 = r2846*r2848;
  float r2850 = r2844-r2849;
  float r2851 = 78.233;
  float r2852 = r2841*r2851;
  float r2853 = r2850+r2852;
  float r2854=r2853;
  float r2855 = 1.0;
  float r2856=r2855;
  float r2857 = r2854/r2856;
  float r2858 = floor(r2857);
  float r2859 = r2856*r2858;
  float r2860 = r2854-r2859;
  float r2861=r2860;
  float r2862 = 43758.5453123;
  float r2863 = r2861*r2862;
  float r2864=r2863;
  float r2865 = 1.0;
  float r2866=r2865;
  float r2867 = r2864/r2866;
  float r2868 = floor(r2867);
  float r2869 = r2866*r2868;
  float r2870 = r2864-r2869;
  float r2871 = 78.233;
  float r2872 = r2861*r2871;
  float r2873 = r2870+r2872;
  float r2874=r2873;
  float r2875 = 1.0;
  float r2876=r2875;
  float r2877 = r2874/r2876;
  float r2878 = floor(r2877);
  float r2879 = r2876*r2878;
  float r2880 = r2874-r2879;
  float r2881=r2797;
  float r2882 = 43758.5453123;
  float r2883 = r2881*r2882;
  float r2884=r2883;
  float r2885 = 1.0;
  float r2886=r2885;
  float r2887 = r2884/r2886;
  float r2888 = floor(r2887);
  float r2889 = r2886*r2888;
  float r2890 = r2884-r2889;
  float r2891 = 78.233;
  float r2892 = r2881*r2891;
  float r2893 = r2890+r2892;
  float r2894=r2893;
  float r2895 = 1.0;
  float r2896=r2895;
  float r2897 = r2894/r2896;
  float r2898 = floor(r2897);
  float r2899 = r2896*r2898;
  float r2900 = r2894-r2899;
  float r2901 = r2900+r2798;
  float r2902=r2901;
  float r2903 = 43758.5453123;
  float r2904 = r2902*r2903;
  float r2905=r2904;
  float r2906 = 1.0;
  float r2907=r2906;
  float r2908 = r2905/r2907;
  float r2909 = floor(r2908);
  float r2910 = r2907*r2909;
  float r2911 = r2905-r2910;
  float r2912 = 78.233;
  float r2913 = r2902*r2912;
  float r2914 = r2911+r2913;
  float r2915=r2914;
  float r2916 = 1.0;
  float r2917=r2916;
  float r2918 = r2915/r2917;
  float r2919 = floor(r2918);
  float r2920 = r2917*r2919;
  float r2921 = r2915-r2920;
  float r2922 = r2921+r2794;
  float r2923=r2922;
  float r2924 = 43758.5453123;
  float r2925 = r2923*r2924;
  float r2926=r2925;
  float r2927 = 1.0;
  float r2928=r2927;
  float r2929 = r2926/r2928;
  float r2930 = floor(r2929);
  float r2931 = r2928*r2930;
  float r2932 = r2926-r2931;
  float r2933 = 78.233;
  float r2934 = r2923*r2933;
  float r2935 = r2932+r2934;
  float r2936=r2935;
  float r2937 = 1.0;
  float r2938=r2937;
  float r2939 = r2936/r2938;
  float r2940 = floor(r2939);
  float r2941 = r2938*r2940;
  float r2942 = r2936-r2941;
  float r2943=r2942;
  float r2944 = 43758.5453123;
  float r2945 = r2943*r2944;
  float r2946=r2945;
  float r2947 = 1.0;
  float r2948=r2947;
  float r2949 = r2946/r2948;
  float r2950 = floor(r2949);
  float r2951 = r2948*r2950;
  float r2952 = r2946-r2951;
  float r2953 = 78.233;
  float r2954 = r2943*r2953;
  float r2955 = r2952+r2954;
  float r2956=r2955;
  float r2957 = 1.0;
  float r2958=r2957;
  float r2959 = r2956/r2958;
  float r2960 = floor(r2959);
  float r2961 = r2958*r2960;
  float r2962 = r2956-r2961;
  float r2963=r2798;
  float r2964 = 43758.5453123;
  float r2965 = r2963*r2964;
  float r2966=r2965;
  float r2967 = 1.0;
  float r2968=r2967;
  float r2969 = r2966/r2968;
  float r2970 = floor(r2969);
  float r2971 = r2968*r2970;
  float r2972 = r2966-r2971;
  float r2973 = 78.233;
  float r2974 = r2963*r2973;
  float r2975 = r2972+r2974;
  float r2976=r2975;
  float r2977 = 1.0;
  float r2978=r2977;
  float r2979 = r2976/r2978;
  float r2980 = floor(r2979);
  float r2981 = r2978*r2980;
  float r2982 = r2976-r2981;
  float r2983 = r2982+r2794;
  float r2984=r2983;
  float r2985 = 43758.5453123;
  float r2986 = r2984*r2985;
  float r2987=r2986;
  float r2988 = 1.0;
  float r2989=r2988;
  float r2990 = r2987/r2989;
  float r2991 = floor(r2990);
  float r2992 = r2989*r2991;
  float r2993 = r2987-r2992;
  float r2994 = 78.233;
  float r2995 = r2984*r2994;
  float r2996 = r2993+r2995;
  float r2997=r2996;
  float r2998 = 1.0;
  float r2999=r2998;
  float r3000 = r2997/r2999;
  float r3001 = floor(r3000);
  float r3002 = r2999*r3001;
  float r3003 = r2997-r3002;
  float r3004 = r3003+r2797;
  float r3005=r3004;
  float r3006 = 43758.5453123;
  float r3007 = r3005*r3006;
  float r3008=r3007;
  float r3009 = 1.0;
  float r3010=r3009;
  float r3011 = r3008/r3010;
  float r3012 = floor(r3011);
  float r3013 = r3010*r3012;
  float r3014 = r3008-r3013;
  float r3015 = 78.233;
  float r3016 = r3005*r3015;
  float r3017 = r3014+r3016;
  float r3018=r3017;
  float r3019 = 1.0;
  float r3020=r3019;
  float r3021 = r3018/r3020;
  float r3022 = floor(r3021);
  float r3023 = r3020*r3022;
  float r3024 = r3018-r3023;
  float r3025=r3024;
  float r3026 = 43758.5453123;
  float r3027 = r3025*r3026;
  float r3028=r3027;
  float r3029 = 1.0;
  float r3030=r3029;
  float r3031 = r3028/r3030;
  float r3032 = floor(r3031);
  float r3033 = r3030*r3032;
  float r3034 = r3028-r3033;
  float r3035 = 78.233;
  float r3036 = r3025*r3035;
  float r3037 = r3034+r3036;
  float r3038=r3037;
  float r3039 = 1.0;
  float r3040=r3039;
  float r3041 = r3038/r3040;
  float r3042 = floor(r3041);
  float r3043 = r3040*r3042;
  float r3044 = r3038-r3043;
  vec3 r3045 = vec3(r2880,r2962,r3044);
  vec3 r3046=r3045;
  float r3047=r2211;
  float r3048 = 1.0;
  float r3049 = r2213+r3048;
  float r3050=r3049;
  float r3051=r2215;
  float r3052=r3047;
  float r3053 = 43758.5453123;
  float r3054 = r3052*r3053;
  float r3055=r3054;
  float r3056 = 1.0;
  float r3057=r3056;
  float r3058 = r3055/r3057;
  float r3059 = floor(r3058);
  float r3060 = r3057*r3059;
  float r3061 = r3055-r3060;
  float r3062 = 78.233;
  float r3063 = r3052*r3062;
  float r3064 = r3061+r3063;
  float r3065=r3064;
  float r3066 = 1.0;
  float r3067=r3066;
  float r3068 = r3065/r3067;
  float r3069 = floor(r3068);
  float r3070 = r3067*r3069;
  float r3071 = r3065-r3070;
  float r3072 = r3071+r3050;
  float r3073=r3072;
  float r3074 = 43758.5453123;
  float r3075 = r3073*r3074;
  float r3076=r3075;
  float r3077 = 1.0;
  float r3078=r3077;
  float r3079 = r3076/r3078;
  float r3080 = floor(r3079);
  float r3081 = r3078*r3080;
  float r3082 = r3076-r3081;
  float r3083 = 78.233;
  float r3084 = r3073*r3083;
  float r3085 = r3082+r3084;
  float r3086=r3085;
  float r3087 = 1.0;
  float r3088=r3087;
  float r3089 = r3086/r3088;
  float r3090 = floor(r3089);
  float r3091 = r3088*r3090;
  float r3092 = r3086-r3091;
  float r3093 = r3092+r3051;
  float r3094=r3093;
  float r3095 = 43758.5453123;
  float r3096 = r3094*r3095;
  float r3097=r3096;
  float r3098 = 1.0;
  float r3099=r3098;
  float r3100 = r3097/r3099;
  float r3101 = floor(r3100);
  float r3102 = r3099*r3101;
  float r3103 = r3097-r3102;
  float r3104 = 78.233;
  float r3105 = r3094*r3104;
  float r3106 = r3103+r3105;
  float r3107=r3106;
  float r3108 = 1.0;
  float r3109=r3108;
  float r3110 = r3107/r3109;
  float r3111 = floor(r3110);
  float r3112 = r3109*r3111;
  float r3113 = r3107-r3112;
  float r3114=r3113;
  float r3115 = 43758.5453123;
  float r3116 = r3114*r3115;
  float r3117=r3116;
  float r3118 = 1.0;
  float r3119=r3118;
  float r3120 = r3117/r3119;
  float r3121 = floor(r3120);
  float r3122 = r3119*r3121;
  float r3123 = r3117-r3122;
  float r3124 = 78.233;
  float r3125 = r3114*r3124;
  float r3126 = r3123+r3125;
  float r3127=r3126;
  float r3128 = 1.0;
  float r3129=r3128;
  float r3130 = r3127/r3129;
  float r3131 = floor(r3130);
  float r3132 = r3129*r3131;
  float r3133 = r3127-r3132;
  float r3134=r3050;
  float r3135 = 43758.5453123;
  float r3136 = r3134*r3135;
  float r3137=r3136;
  float r3138 = 1.0;
  float r3139=r3138;
  float r3140 = r3137/r3139;
  float r3141 = floor(r3140);
  float r3142 = r3139*r3141;
  float r3143 = r3137-r3142;
  float r3144 = 78.233;
  float r3145 = r3134*r3144;
  float r3146 = r3143+r3145;
  float r3147=r3146;
  float r3148 = 1.0;
  float r3149=r3148;
  float r3150 = r3147/r3149;
  float r3151 = floor(r3150);
  float r3152 = r3149*r3151;
  float r3153 = r3147-r3152;
  float r3154 = r3153+r3051;
  float r3155=r3154;
  float r3156 = 43758.5453123;
  float r3157 = r3155*r3156;
  float r3158=r3157;
  float r3159 = 1.0;
  float r3160=r3159;
  float r3161 = r3158/r3160;
  float r3162 = floor(r3161);
  float r3163 = r3160*r3162;
  float r3164 = r3158-r3163;
  float r3165 = 78.233;
  float r3166 = r3155*r3165;
  float r3167 = r3164+r3166;
  float r3168=r3167;
  float r3169 = 1.0;
  float r3170=r3169;
  float r3171 = r3168/r3170;
  float r3172 = floor(r3171);
  float r3173 = r3170*r3172;
  float r3174 = r3168-r3173;
  float r3175 = r3174+r3047;
  float r3176=r3175;
  float r3177 = 43758.5453123;
  float r3178 = r3176*r3177;
  float r3179=r3178;
  float r3180 = 1.0;
  float r3181=r3180;
  float r3182 = r3179/r3181;
  float r3183 = floor(r3182);
  float r3184 = r3181*r3183;
  float r3185 = r3179-r3184;
  float r3186 = 78.233;
  float r3187 = r3176*r3186;
  float r3188 = r3185+r3187;
  float r3189=r3188;
  float r3190 = 1.0;
  float r3191=r3190;
  float r3192 = r3189/r3191;
  float r3193 = floor(r3192);
  float r3194 = r3191*r3193;
  float r3195 = r3189-r3194;
  float r3196=r3195;
  float r3197 = 43758.5453123;
  float r3198 = r3196*r3197;
  float r3199=r3198;
  float r3200 = 1.0;
  float r3201=r3200;
  float r3202 = r3199/r3201;
  float r3203 = floor(r3202);
  float r3204 = r3201*r3203;
  float r3205 = r3199-r3204;
  float r3206 = 78.233;
  float r3207 = r3196*r3206;
  float r3208 = r3205+r3207;
  float r3209=r3208;
  float r3210 = 1.0;
  float r3211=r3210;
  float r3212 = r3209/r3211;
  float r3213 = floor(r3212);
  float r3214 = r3211*r3213;
  float r3215 = r3209-r3214;
  float r3216=r3051;
  float r3217 = 43758.5453123;
  float r3218 = r3216*r3217;
  float r3219=r3218;
  float r3220 = 1.0;
  float r3221=r3220;
  float r3222 = r3219/r3221;
  float r3223 = floor(r3222);
  float r3224 = r3221*r3223;
  float r3225 = r3219-r3224;
  float r3226 = 78.233;
  float r3227 = r3216*r3226;
  float r3228 = r3225+r3227;
  float r3229=r3228;
  float r3230 = 1.0;
  float r3231=r3230;
  float r3232 = r3229/r3231;
  float r3233 = floor(r3232);
  float r3234 = r3231*r3233;
  float r3235 = r3229-r3234;
  float r3236 = r3235+r3047;
  float r3237=r3236;
  float r3238 = 43758.5453123;
  float r3239 = r3237*r3238;
  float r3240=r3239;
  float r3241 = 1.0;
  float r3242=r3241;
  float r3243 = r3240/r3242;
  float r3244 = floor(r3243);
  float r3245 = r3242*r3244;
  float r3246 = r3240-r3245;
  float r3247 = 78.233;
  float r3248 = r3237*r3247;
  float r3249 = r3246+r3248;
  float r3250=r3249;
  float r3251 = 1.0;
  float r3252=r3251;
  float r3253 = r3250/r3252;
  float r3254 = floor(r3253);
  float r3255 = r3252*r3254;
  float r3256 = r3250-r3255;
  float r3257 = r3256+r3050;
  float r3258=r3257;
  float r3259 = 43758.5453123;
  float r3260 = r3258*r3259;
  float r3261=r3260;
  float r3262 = 1.0;
  float r3263=r3262;
  float r3264 = r3261/r3263;
  float r3265 = floor(r3264);
  float r3266 = r3263*r3265;
  float r3267 = r3261-r3266;
  float r3268 = 78.233;
  float r3269 = r3258*r3268;
  float r3270 = r3267+r3269;
  float r3271=r3270;
  float r3272 = 1.0;
  float r3273=r3272;
  float r3274 = r3271/r3273;
  float r3275 = floor(r3274);
  float r3276 = r3273*r3275;
  float r3277 = r3271-r3276;
  float r3278=r3277;
  float r3279 = 43758.5453123;
  float r3280 = r3278*r3279;
  float r3281=r3280;
  float r3282 = 1.0;
  float r3283=r3282;
  float r3284 = r3281/r3283;
  float r3285 = floor(r3284);
  float r3286 = r3283*r3285;
  float r3287 = r3281-r3286;
  float r3288 = 78.233;
  float r3289 = r3278*r3288;
  float r3290 = r3287+r3289;
  float r3291=r3290;
  float r3292 = 1.0;
  float r3293=r3292;
  float r3294 = r3291/r3293;
  float r3295 = floor(r3294);
  float r3296 = r3293*r3295;
  float r3297 = r3291-r3296;
  vec3 r3298 = vec3(r3133,r3215,r3297);
  vec3 r3299=r3298;
  float r3300=r2211;
  float r3301=r2213;
  float r3302 = 1.0;
  float r3303 = r2215+r3302;
  float r3304=r3303;
  float r3305=r3300;
  float r3306 = 43758.5453123;
  float r3307 = r3305*r3306;
  float r3308=r3307;
  float r3309 = 1.0;
  float r3310=r3309;
  float r3311 = r3308/r3310;
  float r3312 = floor(r3311);
  float r3313 = r3310*r3312;
  float r3314 = r3308-r3313;
  float r3315 = 78.233;
  float r3316 = r3305*r3315;
  float r3317 = r3314+r3316;
  float r3318=r3317;
  float r3319 = 1.0;
  float r3320=r3319;
  float r3321 = r3318/r3320;
  float r3322 = floor(r3321);
  float r3323 = r3320*r3322;
  float r3324 = r3318-r3323;
  float r3325 = r3324+r3301;
  float r3326=r3325;
  float r3327 = 43758.5453123;
  float r3328 = r3326*r3327;
  float r3329=r3328;
  float r3330 = 1.0;
  float r3331=r3330;
  float r3332 = r3329/r3331;
  float r3333 = floor(r3332);
  float r3334 = r3331*r3333;
  float r3335 = r3329-r3334;
  float r3336 = 78.233;
  float r3337 = r3326*r3336;
  float r3338 = r3335+r3337;
  float r3339=r3338;
  float r3340 = 1.0;
  float r3341=r3340;
  float r3342 = r3339/r3341;
  float r3343 = floor(r3342);
  float r3344 = r3341*r3343;
  float r3345 = r3339-r3344;
  float r3346 = r3345+r3304;
  float r3347=r3346;
  float r3348 = 43758.5453123;
  float r3349 = r3347*r3348;
  float r3350=r3349;
  float r3351 = 1.0;
  float r3352=r3351;
  float r3353 = r3350/r3352;
  float r3354 = floor(r3353);
  float r3355 = r3352*r3354;
  float r3356 = r3350-r3355;
  float r3357 = 78.233;
  float r3358 = r3347*r3357;
  float r3359 = r3356+r3358;
  float r3360=r3359;
  float r3361 = 1.0;
  float r3362=r3361;
  float r3363 = r3360/r3362;
  float r3364 = floor(r3363);
  float r3365 = r3362*r3364;
  float r3366 = r3360-r3365;
  float r3367=r3366;
  float r3368 = 43758.5453123;
  float r3369 = r3367*r3368;
  float r3370=r3369;
  float r3371 = 1.0;
  float r3372=r3371;
  float r3373 = r3370/r3372;
  float r3374 = floor(r3373);
  float r3375 = r3372*r3374;
  float r3376 = r3370-r3375;
  float r3377 = 78.233;
  float r3378 = r3367*r3377;
  float r3379 = r3376+r3378;
  float r3380=r3379;
  float r3381 = 1.0;
  float r3382=r3381;
  float r3383 = r3380/r3382;
  float r3384 = floor(r3383);
  float r3385 = r3382*r3384;
  float r3386 = r3380-r3385;
  float r3387=r3301;
  float r3388 = 43758.5453123;
  float r3389 = r3387*r3388;
  float r3390=r3389;
  float r3391 = 1.0;
  float r3392=r3391;
  float r3393 = r3390/r3392;
  float r3394 = floor(r3393);
  float r3395 = r3392*r3394;
  float r3396 = r3390-r3395;
  float r3397 = 78.233;
  float r3398 = r3387*r3397;
  float r3399 = r3396+r3398;
  float r3400=r3399;
  float r3401 = 1.0;
  float r3402=r3401;
  float r3403 = r3400/r3402;
  float r3404 = floor(r3403);
  float r3405 = r3402*r3404;
  float r3406 = r3400-r3405;
  float r3407 = r3406+r3304;
  float r3408=r3407;
  float r3409 = 43758.5453123;
  float r3410 = r3408*r3409;
  float r3411=r3410;
  float r3412 = 1.0;
  float r3413=r3412;
  float r3414 = r3411/r3413;
  float r3415 = floor(r3414);
  float r3416 = r3413*r3415;
  float r3417 = r3411-r3416;
  float r3418 = 78.233;
  float r3419 = r3408*r3418;
  float r3420 = r3417+r3419;
  float r3421=r3420;
  float r3422 = 1.0;
  float r3423=r3422;
  float r3424 = r3421/r3423;
  float r3425 = floor(r3424);
  float r3426 = r3423*r3425;
  float r3427 = r3421-r3426;
  float r3428 = r3427+r3300;
  float r3429=r3428;
  float r3430 = 43758.5453123;
  float r3431 = r3429*r3430;
  float r3432=r3431;
  float r3433 = 1.0;
  float r3434=r3433;
  float r3435 = r3432/r3434;
  float r3436 = floor(r3435);
  float r3437 = r3434*r3436;
  float r3438 = r3432-r3437;
  float r3439 = 78.233;
  float r3440 = r3429*r3439;
  float r3441 = r3438+r3440;
  float r3442=r3441;
  float r3443 = 1.0;
  float r3444=r3443;
  float r3445 = r3442/r3444;
  float r3446 = floor(r3445);
  float r3447 = r3444*r3446;
  float r3448 = r3442-r3447;
  float r3449=r3448;
  float r3450 = 43758.5453123;
  float r3451 = r3449*r3450;
  float r3452=r3451;
  float r3453 = 1.0;
  float r3454=r3453;
  float r3455 = r3452/r3454;
  float r3456 = floor(r3455);
  float r3457 = r3454*r3456;
  float r3458 = r3452-r3457;
  float r3459 = 78.233;
  float r3460 = r3449*r3459;
  float r3461 = r3458+r3460;
  float r3462=r3461;
  float r3463 = 1.0;
  float r3464=r3463;
  float r3465 = r3462/r3464;
  float r3466 = floor(r3465);
  float r3467 = r3464*r3466;
  float r3468 = r3462-r3467;
  float r3469=r3304;
  float r3470 = 43758.5453123;
  float r3471 = r3469*r3470;
  float r3472=r3471;
  float r3473 = 1.0;
  float r3474=r3473;
  float r3475 = r3472/r3474;
  float r3476 = floor(r3475);
  float r3477 = r3474*r3476;
  float r3478 = r3472-r3477;
  float r3479 = 78.233;
  float r3480 = r3469*r3479;
  float r3481 = r3478+r3480;
  float r3482=r3481;
  float r3483 = 1.0;
  float r3484=r3483;
  float r3485 = r3482/r3484;
  float r3486 = floor(r3485);
  float r3487 = r3484*r3486;
  float r3488 = r3482-r3487;
  float r3489 = r3488+r3300;
  float r3490=r3489;
  float r3491 = 43758.5453123;
  float r3492 = r3490*r3491;
  float r3493=r3492;
  float r3494 = 1.0;
  float r3495=r3494;
  float r3496 = r3493/r3495;
  float r3497 = floor(r3496);
  float r3498 = r3495*r3497;
  float r3499 = r3493-r3498;
  float r3500 = 78.233;
  float r3501 = r3490*r3500;
  float r3502 = r3499+r3501;
  float r3503=r3502;
  float r3504 = 1.0;
  float r3505=r3504;
  float r3506 = r3503/r3505;
  float r3507 = floor(r3506);
  float r3508 = r3505*r3507;
  float r3509 = r3503-r3508;
  float r3510 = r3509+r3301;
  float r3511=r3510;
  float r3512 = 43758.5453123;
  float r3513 = r3511*r3512;
  float r3514=r3513;
  float r3515 = 1.0;
  float r3516=r3515;
  float r3517 = r3514/r3516;
  float r3518 = floor(r3517);
  float r3519 = r3516*r3518;
  float r3520 = r3514-r3519;
  float r3521 = 78.233;
  float r3522 = r3511*r3521;
  float r3523 = r3520+r3522;
  float r3524=r3523;
  float r3525 = 1.0;
  float r3526=r3525;
  float r3527 = r3524/r3526;
  float r3528 = floor(r3527);
  float r3529 = r3526*r3528;
  float r3530 = r3524-r3529;
  float r3531=r3530;
  float r3532 = 43758.5453123;
  float r3533 = r3531*r3532;
  float r3534=r3533;
  float r3535 = 1.0;
  float r3536=r3535;
  float r3537 = r3534/r3536;
  float r3538 = floor(r3537);
  float r3539 = r3536*r3538;
  float r3540 = r3534-r3539;
  float r3541 = 78.233;
  float r3542 = r3531*r3541;
  float r3543 = r3540+r3542;
  float r3544=r3543;
  float r3545 = 1.0;
  float r3546=r3545;
  float r3547 = r3544/r3546;
  float r3548 = floor(r3547);
  float r3549 = r3546*r3548;
  float r3550 = r3544-r3549;
  vec3 r3551 = vec3(r3386,r3468,r3550);
  vec3 r3552=r3551;
  float r3553 = 1.0;
  float r3554 = r2211+r3553;
  float r3555=r3554;
  float r3556=r2213;
  float r3557 = 1.0;
  float r3558 = r2215+r3557;
  float r3559=r3558;
  float r3560=r3555;
  float r3561 = 43758.5453123;
  float r3562 = r3560*r3561;
  float r3563=r3562;
  float r3564 = 1.0;
  float r3565=r3564;
  float r3566 = r3563/r3565;
  float r3567 = floor(r3566);
  float r3568 = r3565*r3567;
  float r3569 = r3563-r3568;
  float r3570 = 78.233;
  float r3571 = r3560*r3570;
  float r3572 = r3569+r3571;
  float r3573=r3572;
  float r3574 = 1.0;
  float r3575=r3574;
  float r3576 = r3573/r3575;
  float r3577 = floor(r3576);
  float r3578 = r3575*r3577;
  float r3579 = r3573-r3578;
  float r3580 = r3579+r3556;
  float r3581=r3580;
  float r3582 = 43758.5453123;
  float r3583 = r3581*r3582;
  float r3584=r3583;
  float r3585 = 1.0;
  float r3586=r3585;
  float r3587 = r3584/r3586;
  float r3588 = floor(r3587);
  float r3589 = r3586*r3588;
  float r3590 = r3584-r3589;
  float r3591 = 78.233;
  float r3592 = r3581*r3591;
  float r3593 = r3590+r3592;
  float r3594=r3593;
  float r3595 = 1.0;
  float r3596=r3595;
  float r3597 = r3594/r3596;
  float r3598 = floor(r3597);
  float r3599 = r3596*r3598;
  float r3600 = r3594-r3599;
  float r3601 = r3600+r3559;
  float r3602=r3601;
  float r3603 = 43758.5453123;
  float r3604 = r3602*r3603;
  float r3605=r3604;
  float r3606 = 1.0;
  float r3607=r3606;
  float r3608 = r3605/r3607;
  float r3609 = floor(r3608);
  float r3610 = r3607*r3609;
  float r3611 = r3605-r3610;
  float r3612 = 78.233;
  float r3613 = r3602*r3612;
  float r3614 = r3611+r3613;
  float r3615=r3614;
  float r3616 = 1.0;
  float r3617=r3616;
  float r3618 = r3615/r3617;
  float r3619 = floor(r3618);
  float r3620 = r3617*r3619;
  float r3621 = r3615-r3620;
  float r3622=r3621;
  float r3623 = 43758.5453123;
  float r3624 = r3622*r3623;
  float r3625=r3624;
  float r3626 = 1.0;
  float r3627=r3626;
  float r3628 = r3625/r3627;
  float r3629 = floor(r3628);
  float r3630 = r3627*r3629;
  float r3631 = r3625-r3630;
  float r3632 = 78.233;
  float r3633 = r3622*r3632;
  float r3634 = r3631+r3633;
  float r3635=r3634;
  float r3636 = 1.0;
  float r3637=r3636;
  float r3638 = r3635/r3637;
  float r3639 = floor(r3638);
  float r3640 = r3637*r3639;
  float r3641 = r3635-r3640;
  float r3642=r3556;
  float r3643 = 43758.5453123;
  float r3644 = r3642*r3643;
  float r3645=r3644;
  float r3646 = 1.0;
  float r3647=r3646;
  float r3648 = r3645/r3647;
  float r3649 = floor(r3648);
  float r3650 = r3647*r3649;
  float r3651 = r3645-r3650;
  float r3652 = 78.233;
  float r3653 = r3642*r3652;
  float r3654 = r3651+r3653;
  float r3655=r3654;
  float r3656 = 1.0;
  float r3657=r3656;
  float r3658 = r3655/r3657;
  float r3659 = floor(r3658);
  float r3660 = r3657*r3659;
  float r3661 = r3655-r3660;
  float r3662 = r3661+r3559;
  float r3663=r3662;
  float r3664 = 43758.5453123;
  float r3665 = r3663*r3664;
  float r3666=r3665;
  float r3667 = 1.0;
  float r3668=r3667;
  float r3669 = r3666/r3668;
  float r3670 = floor(r3669);
  float r3671 = r3668*r3670;
  float r3672 = r3666-r3671;
  float r3673 = 78.233;
  float r3674 = r3663*r3673;
  float r3675 = r3672+r3674;
  float r3676=r3675;
  float r3677 = 1.0;
  float r3678=r3677;
  float r3679 = r3676/r3678;
  float r3680 = floor(r3679);
  float r3681 = r3678*r3680;
  float r3682 = r3676-r3681;
  float r3683 = r3682+r3555;
  float r3684=r3683;
  float r3685 = 43758.5453123;
  float r3686 = r3684*r3685;
  float r3687=r3686;
  float r3688 = 1.0;
  float r3689=r3688;
  float r3690 = r3687/r3689;
  float r3691 = floor(r3690);
  float r3692 = r3689*r3691;
  float r3693 = r3687-r3692;
  float r3694 = 78.233;
  float r3695 = r3684*r3694;
  float r3696 = r3693+r3695;
  float r3697=r3696;
  float r3698 = 1.0;
  float r3699=r3698;
  float r3700 = r3697/r3699;
  float r3701 = floor(r3700);
  float r3702 = r3699*r3701;
  float r3703 = r3697-r3702;
  float r3704=r3703;
  float r3705 = 43758.5453123;
  float r3706 = r3704*r3705;
  float r3707=r3706;
  float r3708 = 1.0;
  float r3709=r3708;
  float r3710 = r3707/r3709;
  float r3711 = floor(r3710);
  float r3712 = r3709*r3711;
  float r3713 = r3707-r3712;
  float r3714 = 78.233;
  float r3715 = r3704*r3714;
  float r3716 = r3713+r3715;
  float r3717=r3716;
  float r3718 = 1.0;
  float r3719=r3718;
  float r3720 = r3717/r3719;
  float r3721 = floor(r3720);
  float r3722 = r3719*r3721;
  float r3723 = r3717-r3722;
  float r3724=r3559;
  float r3725 = 43758.5453123;
  float r3726 = r3724*r3725;
  float r3727=r3726;
  float r3728 = 1.0;
  float r3729=r3728;
  float r3730 = r3727/r3729;
  float r3731 = floor(r3730);
  float r3732 = r3729*r3731;
  float r3733 = r3727-r3732;
  float r3734 = 78.233;
  float r3735 = r3724*r3734;
  float r3736 = r3733+r3735;
  float r3737=r3736;
  float r3738 = 1.0;
  float r3739=r3738;
  float r3740 = r3737/r3739;
  float r3741 = floor(r3740);
  float r3742 = r3739*r3741;
  float r3743 = r3737-r3742;
  float r3744 = r3743+r3555;
  float r3745=r3744;
  float r3746 = 43758.5453123;
  float r3747 = r3745*r3746;
  float r3748=r3747;
  float r3749 = 1.0;
  float r3750=r3749;
  float r3751 = r3748/r3750;
  float r3752 = floor(r3751);
  float r3753 = r3750*r3752;
  float r3754 = r3748-r3753;
  float r3755 = 78.233;
  float r3756 = r3745*r3755;
  float r3757 = r3754+r3756;
  float r3758=r3757;
  float r3759 = 1.0;
  float r3760=r3759;
  float r3761 = r3758/r3760;
  float r3762 = floor(r3761);
  float r3763 = r3760*r3762;
  float r3764 = r3758-r3763;
  float r3765 = r3764+r3556;
  float r3766=r3765;
  float r3767 = 43758.5453123;
  float r3768 = r3766*r3767;
  float r3769=r3768;
  float r3770 = 1.0;
  float r3771=r3770;
  float r3772 = r3769/r3771;
  float r3773 = floor(r3772);
  float r3774 = r3771*r3773;
  float r3775 = r3769-r3774;
  float r3776 = 78.233;
  float r3777 = r3766*r3776;
  float r3778 = r3775+r3777;
  float r3779=r3778;
  float r3780 = 1.0;
  float r3781=r3780;
  float r3782 = r3779/r3781;
  float r3783 = floor(r3782);
  float r3784 = r3781*r3783;
  float r3785 = r3779-r3784;
  float r3786=r3785;
  float r3787 = 43758.5453123;
  float r3788 = r3786*r3787;
  float r3789=r3788;
  float r3790 = 1.0;
  float r3791=r3790;
  float r3792 = r3789/r3791;
  float r3793 = floor(r3792);
  float r3794 = r3791*r3793;
  float r3795 = r3789-r3794;
  float r3796 = 78.233;
  float r3797 = r3786*r3796;
  float r3798 = r3795+r3797;
  float r3799=r3798;
  float r3800 = 1.0;
  float r3801=r3800;
  float r3802 = r3799/r3801;
  float r3803 = floor(r3802);
  float r3804 = r3801*r3803;
  float r3805 = r3799-r3804;
  vec3 r3806 = vec3(r3641,r3723,r3805);
  vec3 r3807=r3806;
  float r3808 = 1.0;
  float r3809 = r2211+r3808;
  float r3810=r3809;
  float r3811 = 1.0;
  float r3812 = r2213+r3811;
  float r3813=r3812;
  float r3814 = 1.0;
  float r3815 = r2215+r3814;
  float r3816=r3815;
  float r3817=r3810;
  float r3818 = 43758.5453123;
  float r3819 = r3817*r3818;
  float r3820=r3819;
  float r3821 = 1.0;
  float r3822=r3821;
  float r3823 = r3820/r3822;
  float r3824 = floor(r3823);
  float r3825 = r3822*r3824;
  float r3826 = r3820-r3825;
  float r3827 = 78.233;
  float r3828 = r3817*r3827;
  float r3829 = r3826+r3828;
  float r3830=r3829;
  float r3831 = 1.0;
  float r3832=r3831;
  float r3833 = r3830/r3832;
  float r3834 = floor(r3833);
  float r3835 = r3832*r3834;
  float r3836 = r3830-r3835;
  float r3837 = r3836+r3813;
  float r3838=r3837;
  float r3839 = 43758.5453123;
  float r3840 = r3838*r3839;
  float r3841=r3840;
  float r3842 = 1.0;
  float r3843=r3842;
  float r3844 = r3841/r3843;
  float r3845 = floor(r3844);
  float r3846 = r3843*r3845;
  float r3847 = r3841-r3846;
  float r3848 = 78.233;
  float r3849 = r3838*r3848;
  float r3850 = r3847+r3849;
  float r3851=r3850;
  float r3852 = 1.0;
  float r3853=r3852;
  float r3854 = r3851/r3853;
  float r3855 = floor(r3854);
  float r3856 = r3853*r3855;
  float r3857 = r3851-r3856;
  float r3858 = r3857+r3816;
  float r3859=r3858;
  float r3860 = 43758.5453123;
  float r3861 = r3859*r3860;
  float r3862=r3861;
  float r3863 = 1.0;
  float r3864=r3863;
  float r3865 = r3862/r3864;
  float r3866 = floor(r3865);
  float r3867 = r3864*r3866;
  float r3868 = r3862-r3867;
  float r3869 = 78.233;
  float r3870 = r3859*r3869;
  float r3871 = r3868+r3870;
  float r3872=r3871;
  float r3873 = 1.0;
  float r3874=r3873;
  float r3875 = r3872/r3874;
  float r3876 = floor(r3875);
  float r3877 = r3874*r3876;
  float r3878 = r3872-r3877;
  float r3879=r3878;
  float r3880 = 43758.5453123;
  float r3881 = r3879*r3880;
  float r3882=r3881;
  float r3883 = 1.0;
  float r3884=r3883;
  float r3885 = r3882/r3884;
  float r3886 = floor(r3885);
  float r3887 = r3884*r3886;
  float r3888 = r3882-r3887;
  float r3889 = 78.233;
  float r3890 = r3879*r3889;
  float r3891 = r3888+r3890;
  float r3892=r3891;
  float r3893 = 1.0;
  float r3894=r3893;
  float r3895 = r3892/r3894;
  float r3896 = floor(r3895);
  float r3897 = r3894*r3896;
  float r3898 = r3892-r3897;
  float r3899=r3813;
  float r3900 = 43758.5453123;
  float r3901 = r3899*r3900;
  float r3902=r3901;
  float r3903 = 1.0;
  float r3904=r3903;
  float r3905 = r3902/r3904;
  float r3906 = floor(r3905);
  float r3907 = r3904*r3906;
  float r3908 = r3902-r3907;
  float r3909 = 78.233;
  float r3910 = r3899*r3909;
  float r3911 = r3908+r3910;
  float r3912=r3911;
  float r3913 = 1.0;
  float r3914=r3913;
  float r3915 = r3912/r3914;
  float r3916 = floor(r3915);
  float r3917 = r3914*r3916;
  float r3918 = r3912-r3917;
  float r3919 = r3918+r3816;
  float r3920=r3919;
  float r3921 = 43758.5453123;
  float r3922 = r3920*r3921;
  float r3923=r3922;
  float r3924 = 1.0;
  float r3925=r3924;
  float r3926 = r3923/r3925;
  float r3927 = floor(r3926);
  float r3928 = r3925*r3927;
  float r3929 = r3923-r3928;
  float r3930 = 78.233;
  float r3931 = r3920*r3930;
  float r3932 = r3929+r3931;
  float r3933=r3932;
  float r3934 = 1.0;
  float r3935=r3934;
  float r3936 = r3933/r3935;
  float r3937 = floor(r3936);
  float r3938 = r3935*r3937;
  float r3939 = r3933-r3938;
  float r3940 = r3939+r3810;
  float r3941=r3940;
  float r3942 = 43758.5453123;
  float r3943 = r3941*r3942;
  float r3944=r3943;
  float r3945 = 1.0;
  float r3946=r3945;
  float r3947 = r3944/r3946;
  float r3948 = floor(r3947);
  float r3949 = r3946*r3948;
  float r3950 = r3944-r3949;
  float r3951 = 78.233;
  float r3952 = r3941*r3951;
  float r3953 = r3950+r3952;
  float r3954=r3953;
  float r3955 = 1.0;
  float r3956=r3955;
  float r3957 = r3954/r3956;
  float r3958 = floor(r3957);
  float r3959 = r3956*r3958;
  float r3960 = r3954-r3959;
  float r3961=r3960;
  float r3962 = 43758.5453123;
  float r3963 = r3961*r3962;
  float r3964=r3963;
  float r3965 = 1.0;
  float r3966=r3965;
  float r3967 = r3964/r3966;
  float r3968 = floor(r3967);
  float r3969 = r3966*r3968;
  float r3970 = r3964-r3969;
  float r3971 = 78.233;
  float r3972 = r3961*r3971;
  float r3973 = r3970+r3972;
  float r3974=r3973;
  float r3975 = 1.0;
  float r3976=r3975;
  float r3977 = r3974/r3976;
  float r3978 = floor(r3977);
  float r3979 = r3976*r3978;
  float r3980 = r3974-r3979;
  float r3981=r3816;
  float r3982 = 43758.5453123;
  float r3983 = r3981*r3982;
  float r3984=r3983;
  float r3985 = 1.0;
  float r3986=r3985;
  float r3987 = r3984/r3986;
  float r3988 = floor(r3987);
  float r3989 = r3986*r3988;
  float r3990 = r3984-r3989;
  float r3991 = 78.233;
  float r3992 = r3981*r3991;
  float r3993 = r3990+r3992;
  float r3994=r3993;
  float r3995 = 1.0;
  float r3996=r3995;
  float r3997 = r3994/r3996;
  float r3998 = floor(r3997);
  float r3999 = r3996*r3998;
  float r4000 = r3994-r3999;
  float r4001 = r4000+r3810;
  float r4002=r4001;
  float r4003 = 43758.5453123;
  float r4004 = r4002*r4003;
  float r4005=r4004;
  float r4006 = 1.0;
  float r4007=r4006;
  float r4008 = r4005/r4007;
  float r4009 = floor(r4008);
  float r4010 = r4007*r4009;
  float r4011 = r4005-r4010;
  float r4012 = 78.233;
  float r4013 = r4002*r4012;
  float r4014 = r4011+r4013;
  float r4015=r4014;
  float r4016 = 1.0;
  float r4017=r4016;
  float r4018 = r4015/r4017;
  float r4019 = floor(r4018);
  float r4020 = r4017*r4019;
  float r4021 = r4015-r4020;
  float r4022 = r4021+r3813;
  float r4023=r4022;
  float r4024 = 43758.5453123;
  float r4025 = r4023*r4024;
  float r4026=r4025;
  float r4027 = 1.0;
  float r4028=r4027;
  float r4029 = r4026/r4028;
  float r4030 = floor(r4029);
  float r4031 = r4028*r4030;
  float r4032 = r4026-r4031;
  float r4033 = 78.233;
  float r4034 = r4023*r4033;
  float r4035 = r4032+r4034;
  float r4036=r4035;
  float r4037 = 1.0;
  float r4038=r4037;
  float r4039 = r4036/r4038;
  float r4040 = floor(r4039);
  float r4041 = r4038*r4040;
  float r4042 = r4036-r4041;
  float r4043=r4042;
  float r4044 = 43758.5453123;
  float r4045 = r4043*r4044;
  float r4046=r4045;
  float r4047 = 1.0;
  float r4048=r4047;
  float r4049 = r4046/r4048;
  float r4050 = floor(r4049);
  float r4051 = r4048*r4050;
  float r4052 = r4046-r4051;
  float r4053 = 78.233;
  float r4054 = r4043*r4053;
  float r4055 = r4052+r4054;
  float r4056=r4055;
  float r4057 = 1.0;
  float r4058=r4057;
  float r4059 = r4056/r4058;
  float r4060 = floor(r4059);
  float r4061 = r4058*r4060;
  float r4062 = r4056-r4061;
  vec3 r4063 = vec3(r3898,r3980,r4062);
  vec3 r4064=r4063;
  float r4065=r2211;
  float r4066 = 1.0;
  float r4067 = r2213+r4066;
  float r4068=r4067;
  float r4069 = 1.0;
  float r4070 = r2215+r4069;
  float r4071=r4070;
  float r4072=r4065;
  float r4073 = 43758.5453123;
  float r4074 = r4072*r4073;
  float r4075=r4074;
  float r4076 = 1.0;
  float r4077=r4076;
  float r4078 = r4075/r4077;
  float r4079 = floor(r4078);
  float r4080 = r4077*r4079;
  float r4081 = r4075-r4080;
  float r4082 = 78.233;
  float r4083 = r4072*r4082;
  float r4084 = r4081+r4083;
  float r4085=r4084;
  float r4086 = 1.0;
  float r4087=r4086;
  float r4088 = r4085/r4087;
  float r4089 = floor(r4088);
  float r4090 = r4087*r4089;
  float r4091 = r4085-r4090;
  float r4092 = r4091+r4068;
  float r4093=r4092;
  float r4094 = 43758.5453123;
  float r4095 = r4093*r4094;
  float r4096=r4095;
  float r4097 = 1.0;
  float r4098=r4097;
  float r4099 = r4096/r4098;
  float r4100 = floor(r4099);
  float r4101 = r4098*r4100;
  float r4102 = r4096-r4101;
  float r4103 = 78.233;
  float r4104 = r4093*r4103;
  float r4105 = r4102+r4104;
  float r4106=r4105;
  float r4107 = 1.0;
  float r4108=r4107;
  float r4109 = r4106/r4108;
  float r4110 = floor(r4109);
  float r4111 = r4108*r4110;
  float r4112 = r4106-r4111;
  float r4113 = r4112+r4071;
  float r4114=r4113;
  float r4115 = 43758.5453123;
  float r4116 = r4114*r4115;
  float r4117=r4116;
  float r4118 = 1.0;
  float r4119=r4118;
  float r4120 = r4117/r4119;
  float r4121 = floor(r4120);
  float r4122 = r4119*r4121;
  float r4123 = r4117-r4122;
  float r4124 = 78.233;
  float r4125 = r4114*r4124;
  float r4126 = r4123+r4125;
  float r4127=r4126;
  float r4128 = 1.0;
  float r4129=r4128;
  float r4130 = r4127/r4129;
  float r4131 = floor(r4130);
  float r4132 = r4129*r4131;
  float r4133 = r4127-r4132;
  float r4134=r4133;
  float r4135 = 43758.5453123;
  float r4136 = r4134*r4135;
  float r4137=r4136;
  float r4138 = 1.0;
  float r4139=r4138;
  float r4140 = r4137/r4139;
  float r4141 = floor(r4140);
  float r4142 = r4139*r4141;
  float r4143 = r4137-r4142;
  float r4144 = 78.233;
  float r4145 = r4134*r4144;
  float r4146 = r4143+r4145;
  float r4147=r4146;
  float r4148 = 1.0;
  float r4149=r4148;
  float r4150 = r4147/r4149;
  float r4151 = floor(r4150);
  float r4152 = r4149*r4151;
  float r4153 = r4147-r4152;
  float r4154=r4068;
  float r4155 = 43758.5453123;
  float r4156 = r4154*r4155;
  float r4157=r4156;
  float r4158 = 1.0;
  float r4159=r4158;
  float r4160 = r4157/r4159;
  float r4161 = floor(r4160);
  float r4162 = r4159*r4161;
  float r4163 = r4157-r4162;
  float r4164 = 78.233;
  float r4165 = r4154*r4164;
  float r4166 = r4163+r4165;
  float r4167=r4166;
  float r4168 = 1.0;
  float r4169=r4168;
  float r4170 = r4167/r4169;
  float r4171 = floor(r4170);
  float r4172 = r4169*r4171;
  float r4173 = r4167-r4172;
  float r4174 = r4173+r4071;
  float r4175=r4174;
  float r4176 = 43758.5453123;
  float r4177 = r4175*r4176;
  float r4178=r4177;
  float r4179 = 1.0;
  float r4180=r4179;
  float r4181 = r4178/r4180;
  float r4182 = floor(r4181);
  float r4183 = r4180*r4182;
  float r4184 = r4178-r4183;
  float r4185 = 78.233;
  float r4186 = r4175*r4185;
  float r4187 = r4184+r4186;
  float r4188=r4187;
  float r4189 = 1.0;
  float r4190=r4189;
  float r4191 = r4188/r4190;
  float r4192 = floor(r4191);
  float r4193 = r4190*r4192;
  float r4194 = r4188-r4193;
  float r4195 = r4194+r4065;
  float r4196=r4195;
  float r4197 = 43758.5453123;
  float r4198 = r4196*r4197;
  float r4199=r4198;
  float r4200 = 1.0;
  float r4201=r4200;
  float r4202 = r4199/r4201;
  float r4203 = floor(r4202);
  float r4204 = r4201*r4203;
  float r4205 = r4199-r4204;
  float r4206 = 78.233;
  float r4207 = r4196*r4206;
  float r4208 = r4205+r4207;
  float r4209=r4208;
  float r4210 = 1.0;
  float r4211=r4210;
  float r4212 = r4209/r4211;
  float r4213 = floor(r4212);
  float r4214 = r4211*r4213;
  float r4215 = r4209-r4214;
  float r4216=r4215;
  float r4217 = 43758.5453123;
  float r4218 = r4216*r4217;
  float r4219=r4218;
  float r4220 = 1.0;
  float r4221=r4220;
  float r4222 = r4219/r4221;
  float r4223 = floor(r4222);
  float r4224 = r4221*r4223;
  float r4225 = r4219-r4224;
  float r4226 = 78.233;
  float r4227 = r4216*r4226;
  float r4228 = r4225+r4227;
  float r4229=r4228;
  float r4230 = 1.0;
  float r4231=r4230;
  float r4232 = r4229/r4231;
  float r4233 = floor(r4232);
  float r4234 = r4231*r4233;
  float r4235 = r4229-r4234;
  float r4236=r4071;
  float r4237 = 43758.5453123;
  float r4238 = r4236*r4237;
  float r4239=r4238;
  float r4240 = 1.0;
  float r4241=r4240;
  float r4242 = r4239/r4241;
  float r4243 = floor(r4242);
  float r4244 = r4241*r4243;
  float r4245 = r4239-r4244;
  float r4246 = 78.233;
  float r4247 = r4236*r4246;
  float r4248 = r4245+r4247;
  float r4249=r4248;
  float r4250 = 1.0;
  float r4251=r4250;
  float r4252 = r4249/r4251;
  float r4253 = floor(r4252);
  float r4254 = r4251*r4253;
  float r4255 = r4249-r4254;
  float r4256 = r4255+r4065;
  float r4257=r4256;
  float r4258 = 43758.5453123;
  float r4259 = r4257*r4258;
  float r4260=r4259;
  float r4261 = 1.0;
  float r4262=r4261;
  float r4263 = r4260/r4262;
  float r4264 = floor(r4263);
  float r4265 = r4262*r4264;
  float r4266 = r4260-r4265;
  float r4267 = 78.233;
  float r4268 = r4257*r4267;
  float r4269 = r4266+r4268;
  float r4270=r4269;
  float r4271 = 1.0;
  float r4272=r4271;
  float r4273 = r4270/r4272;
  float r4274 = floor(r4273);
  float r4275 = r4272*r4274;
  float r4276 = r4270-r4275;
  float r4277 = r4276+r4068;
  float r4278=r4277;
  float r4279 = 43758.5453123;
  float r4280 = r4278*r4279;
  float r4281=r4280;
  float r4282 = 1.0;
  float r4283=r4282;
  float r4284 = r4281/r4283;
  float r4285 = floor(r4284);
  float r4286 = r4283*r4285;
  float r4287 = r4281-r4286;
  float r4288 = 78.233;
  float r4289 = r4278*r4288;
  float r4290 = r4287+r4289;
  float r4291=r4290;
  float r4292 = 1.0;
  float r4293=r4292;
  float r4294 = r4291/r4293;
  float r4295 = floor(r4294);
  float r4296 = r4293*r4295;
  float r4297 = r4291-r4296;
  float r4298=r4297;
  float r4299 = 43758.5453123;
  float r4300 = r4298*r4299;
  float r4301=r4300;
  float r4302 = 1.0;
  float r4303=r4302;
  float r4304 = r4301/r4303;
  float r4305 = floor(r4304);
  float r4306 = r4303*r4305;
  float r4307 = r4301-r4306;
  float r4308 = 78.233;
  float r4309 = r4298*r4308;
  float r4310 = r4307+r4309;
  float r4311=r4310;
  float r4312 = 1.0;
  float r4313=r4312;
  float r4314 = r4311/r4313;
  float r4315 = floor(r4314);
  float r4316 = r4313*r4315;
  float r4317 = r4311-r4316;
  vec3 r4318 = vec3(r4153,r4235,r4317);
  vec3 r4319=r4318;
  vec3 r4320=r2538;
  vec3 r4321=r2791;
  float r4322=r2239;
  float r4323 = 1.0;
  float r4324 = r4323-r4322;
  vec3 r4325 = r4320*vec3(r4324,r4324,r4324);
  vec3 r4326 = r4321*vec3(r4322,r4322,r4322);
  vec3 r4327 = r4325+r4326;
  vec3 r4328=r4327;
  vec3 r4329=r3299;
  vec3 r4330=r3046;
  float r4331=r2239;
  float r4332 = 1.0;
  float r4333 = r4332-r4331;
  vec3 r4334 = r4329*vec3(r4333,r4333,r4333);
  vec3 r4335 = r4330*vec3(r4331,r4331,r4331);
  vec3 r4336 = r4334+r4335;
  vec3 r4337=r4336;
  vec3 r4338=r3552;
  vec3 r4339=r3807;
  float r4340=r2239;
  float r4341 = 1.0;
  float r4342 = r4341-r4340;
  vec3 r4343 = r4338*vec3(r4342,r4342,r4342);
  vec3 r4344 = r4339*vec3(r4340,r4340,r4340);
  vec3 r4345 = r4343+r4344;
  vec3 r4346=r4345;
  vec3 r4347=r4319;
  vec3 r4348=r4064;
  float r4349=r2239;
  float r4350 = 1.0;
  float r4351 = r4350-r4349;
  vec3 r4352 = r4347*vec3(r4351,r4351,r4351);
  vec3 r4353 = r4348*vec3(r4349,r4349,r4349);
  vec3 r4354 = r4352+r4353;
  vec3 r4355=r4354;
  vec3 r4356=r4328;
  vec3 r4357=r4337;
  float r4358=r2263;
  float r4359 = 1.0;
  float r4360 = r4359-r4358;
  vec3 r4361 = r4356*vec3(r4360,r4360,r4360);
  vec3 r4362 = r4357*vec3(r4358,r4358,r4358);
  vec3 r4363 = r4361+r4362;
  vec3 r4364=r4363;
  vec3 r4365=r4346;
  vec3 r4366=r4355;
  float r4367=r2263;
  float r4368 = 1.0;
  float r4369 = r4368-r4367;
  vec3 r4370 = r4365*vec3(r4369,r4369,r4369);
  vec3 r4371 = r4366*vec3(r4367,r4367,r4367);
  vec3 r4372 = r4370+r4371;
  vec3 r4373=r4372;
  vec3 r4374=r4364;
  vec3 r4375=r4373;
  float r4376=r2287;
  float r4377 = 1.0;
  float r4378 = r4377-r4376;
  vec3 r4379 = r4374*vec3(r4378,r4378,r4378);
  vec3 r4380 = r4375*vec3(r4376,r4376,r4376);
  vec3 r4381 = r4379+r4380;
  vec3 r4382=r4381;
  float r4383 = r4382.y;
  float r4384 = 0.25;
  float r4385 = r4383*r4384;
  float r4386 = 0.0;
  float r4387=r4386;
  float r4388 = r15.y;
  float r4389=r4388;
  float r4390 = r15.z;
  float r4391 = 2.0;
  float r4392 = r4390/r4391;
  float r4393=r4392;
  float r4394 = floor(r4387);
  float r4395=r4394;
  float r4396 = floor(r4389);
  float r4397=r4396;
  float r4398 = floor(r4393);
  float r4399=r4398;
  float r4400 = 0.0;
  float r4401=r4400;
  float r4402 = 1.0;
  float r4403=r4402;
  float r4404 = r4387-r4395;
  float r4405=r4404;
  float r4406 = r4405-r4401;
  float r4407 = r4403-r4401;
  float r4408 = r4406/r4407;
  float r4409=r4408;
  float r4410 = 0.0;
  float r4411=r4410;
  float r4412 = 1.0;
  float r4413=r4412;
  float r4414 = max(r4409,r4411);
  float r4415 = min(r4414,r4413);
  float r4416=r4415;
  float r4417 = r4416*r4416;
  float r4418 = 3.0;
  float r4419 = 2.0;
  float r4420 = r4419*r4416;
  float r4421 = r4418-r4420;
  float r4422 = r4417*r4421;
  float r4423=r4422;
  float r4424 = 0.0;
  float r4425=r4424;
  float r4426 = 1.0;
  float r4427=r4426;
  float r4428 = r4389-r4397;
  float r4429=r4428;
  float r4430 = r4429-r4425;
  float r4431 = r4427-r4425;
  float r4432 = r4430/r4431;
  float r4433=r4432;
  float r4434 = 0.0;
  float r4435=r4434;
  float r4436 = 1.0;
  float r4437=r4436;
  float r4438 = max(r4433,r4435);
  float r4439 = min(r4438,r4437);
  float r4440=r4439;
  float r4441 = r4440*r4440;
  float r4442 = 3.0;
  float r4443 = 2.0;
  float r4444 = r4443*r4440;
  float r4445 = r4442-r4444;
  float r4446 = r4441*r4445;
  float r4447=r4446;
  float r4448 = 0.0;
  float r4449=r4448;
  float r4450 = 1.0;
  float r4451=r4450;
  float r4452 = r4393-r4399;
  float r4453=r4452;
  float r4454 = r4453-r4449;
  float r4455 = r4451-r4449;
  float r4456 = r4454/r4455;
  float r4457=r4456;
  float r4458 = 0.0;
  float r4459=r4458;
  float r4460 = 1.0;
  float r4461=r4460;
  float r4462 = max(r4457,r4459);
  float r4463 = min(r4462,r4461);
  float r4464=r4463;
  float r4465 = r4464*r4464;
  float r4466 = 3.0;
  float r4467 = 2.0;
  float r4468 = r4467*r4464;
  float r4469 = r4466-r4468;
  float r4470 = r4465*r4469;
  float r4471=r4470;
  float r4472=r4395;
  float r4473=r4397;
  float r4474=r4399;
  float r4475=r4472;
  float r4476 = 43758.5453123;
  float r4477 = r4475*r4476;
  float r4478=r4477;
  float r4479 = 1.0;
  float r4480=r4479;
  float r4481 = r4478/r4480;
  float r4482 = floor(r4481);
  float r4483 = r4480*r4482;
  float r4484 = r4478-r4483;
  float r4485 = 78.233;
  float r4486 = r4475*r4485;
  float r4487 = r4484+r4486;
  float r4488=r4487;
  float r4489 = 1.0;
  float r4490=r4489;
  float r4491 = r4488/r4490;
  float r4492 = floor(r4491);
  float r4493 = r4490*r4492;
  float r4494 = r4488-r4493;
  float r4495 = r4494+r4473;
  float r4496=r4495;
  float r4497 = 43758.5453123;
  float r4498 = r4496*r4497;
  float r4499=r4498;
  float r4500 = 1.0;
  float r4501=r4500;
  float r4502 = r4499/r4501;
  float r4503 = floor(r4502);
  float r4504 = r4501*r4503;
  float r4505 = r4499-r4504;
  float r4506 = 78.233;
  float r4507 = r4496*r4506;
  float r4508 = r4505+r4507;
  float r4509=r4508;
  float r4510 = 1.0;
  float r4511=r4510;
  float r4512 = r4509/r4511;
  float r4513 = floor(r4512);
  float r4514 = r4511*r4513;
  float r4515 = r4509-r4514;
  float r4516 = r4515+r4474;
  float r4517=r4516;
  float r4518 = 43758.5453123;
  float r4519 = r4517*r4518;
  float r4520=r4519;
  float r4521 = 1.0;
  float r4522=r4521;
  float r4523 = r4520/r4522;
  float r4524 = floor(r4523);
  float r4525 = r4522*r4524;
  float r4526 = r4520-r4525;
  float r4527 = 78.233;
  float r4528 = r4517*r4527;
  float r4529 = r4526+r4528;
  float r4530=r4529;
  float r4531 = 1.0;
  float r4532=r4531;
  float r4533 = r4530/r4532;
  float r4534 = floor(r4533);
  float r4535 = r4532*r4534;
  float r4536 = r4530-r4535;
  float r4537=r4536;
  float r4538 = 43758.5453123;
  float r4539 = r4537*r4538;
  float r4540=r4539;
  float r4541 = 1.0;
  float r4542=r4541;
  float r4543 = r4540/r4542;
  float r4544 = floor(r4543);
  float r4545 = r4542*r4544;
  float r4546 = r4540-r4545;
  float r4547 = 78.233;
  float r4548 = r4537*r4547;
  float r4549 = r4546+r4548;
  float r4550=r4549;
  float r4551 = 1.0;
  float r4552=r4551;
  float r4553 = r4550/r4552;
  float r4554 = floor(r4553);
  float r4555 = r4552*r4554;
  float r4556 = r4550-r4555;
  float r4557=r4473;
  float r4558 = 43758.5453123;
  float r4559 = r4557*r4558;
  float r4560=r4559;
  float r4561 = 1.0;
  float r4562=r4561;
  float r4563 = r4560/r4562;
  float r4564 = floor(r4563);
  float r4565 = r4562*r4564;
  float r4566 = r4560-r4565;
  float r4567 = 78.233;
  float r4568 = r4557*r4567;
  float r4569 = r4566+r4568;
  float r4570=r4569;
  float r4571 = 1.0;
  float r4572=r4571;
  float r4573 = r4570/r4572;
  float r4574 = floor(r4573);
  float r4575 = r4572*r4574;
  float r4576 = r4570-r4575;
  float r4577 = r4576+r4474;
  float r4578=r4577;
  float r4579 = 43758.5453123;
  float r4580 = r4578*r4579;
  float r4581=r4580;
  float r4582 = 1.0;
  float r4583=r4582;
  float r4584 = r4581/r4583;
  float r4585 = floor(r4584);
  float r4586 = r4583*r4585;
  float r4587 = r4581-r4586;
  float r4588 = 78.233;
  float r4589 = r4578*r4588;
  float r4590 = r4587+r4589;
  float r4591=r4590;
  float r4592 = 1.0;
  float r4593=r4592;
  float r4594 = r4591/r4593;
  float r4595 = floor(r4594);
  float r4596 = r4593*r4595;
  float r4597 = r4591-r4596;
  float r4598 = r4597+r4472;
  float r4599=r4598;
  float r4600 = 43758.5453123;
  float r4601 = r4599*r4600;
  float r4602=r4601;
  float r4603 = 1.0;
  float r4604=r4603;
  float r4605 = r4602/r4604;
  float r4606 = floor(r4605);
  float r4607 = r4604*r4606;
  float r4608 = r4602-r4607;
  float r4609 = 78.233;
  float r4610 = r4599*r4609;
  float r4611 = r4608+r4610;
  float r4612=r4611;
  float r4613 = 1.0;
  float r4614=r4613;
  float r4615 = r4612/r4614;
  float r4616 = floor(r4615);
  float r4617 = r4614*r4616;
  float r4618 = r4612-r4617;
  float r4619=r4618;
  float r4620 = 43758.5453123;
  float r4621 = r4619*r4620;
  float r4622=r4621;
  float r4623 = 1.0;
  float r4624=r4623;
  float r4625 = r4622/r4624;
  float r4626 = floor(r4625);
  float r4627 = r4624*r4626;
  float r4628 = r4622-r4627;
  float r4629 = 78.233;
  float r4630 = r4619*r4629;
  float r4631 = r4628+r4630;
  float r4632=r4631;
  float r4633 = 1.0;
  float r4634=r4633;
  float r4635 = r4632/r4634;
  float r4636 = floor(r4635);
  float r4637 = r4634*r4636;
  float r4638 = r4632-r4637;
  float r4639=r4474;
  float r4640 = 43758.5453123;
  float r4641 = r4639*r4640;
  float r4642=r4641;
  float r4643 = 1.0;
  float r4644=r4643;
  float r4645 = r4642/r4644;
  float r4646 = floor(r4645);
  float r4647 = r4644*r4646;
  float r4648 = r4642-r4647;
  float r4649 = 78.233;
  float r4650 = r4639*r4649;
  float r4651 = r4648+r4650;
  float r4652=r4651;
  float r4653 = 1.0;
  float r4654=r4653;
  float r4655 = r4652/r4654;
  float r4656 = floor(r4655);
  float r4657 = r4654*r4656;
  float r4658 = r4652-r4657;
  float r4659 = r4658+r4472;
  float r4660=r4659;
  float r4661 = 43758.5453123;
  float r4662 = r4660*r4661;
  float r4663=r4662;
  float r4664 = 1.0;
  float r4665=r4664;
  float r4666 = r4663/r4665;
  float r4667 = floor(r4666);
  float r4668 = r4665*r4667;
  float r4669 = r4663-r4668;
  float r4670 = 78.233;
  float r4671 = r4660*r4670;
  float r4672 = r4669+r4671;
  float r4673=r4672;
  float r4674 = 1.0;
  float r4675=r4674;
  float r4676 = r4673/r4675;
  float r4677 = floor(r4676);
  float r4678 = r4675*r4677;
  float r4679 = r4673-r4678;
  float r4680 = r4679+r4473;
  float r4681=r4680;
  float r4682 = 43758.5453123;
  float r4683 = r4681*r4682;
  float r4684=r4683;
  float r4685 = 1.0;
  float r4686=r4685;
  float r4687 = r4684/r4686;
  float r4688 = floor(r4687);
  float r4689 = r4686*r4688;
  float r4690 = r4684-r4689;
  float r4691 = 78.233;
  float r4692 = r4681*r4691;
  float r4693 = r4690+r4692;
  float r4694=r4693;
  float r4695 = 1.0;
  float r4696=r4695;
  float r4697 = r4694/r4696;
  float r4698 = floor(r4697);
  float r4699 = r4696*r4698;
  float r4700 = r4694-r4699;
  float r4701=r4700;
  float r4702 = 43758.5453123;
  float r4703 = r4701*r4702;
  float r4704=r4703;
  float r4705 = 1.0;
  float r4706=r4705;
  float r4707 = r4704/r4706;
  float r4708 = floor(r4707);
  float r4709 = r4706*r4708;
  float r4710 = r4704-r4709;
  float r4711 = 78.233;
  float r4712 = r4701*r4711;
  float r4713 = r4710+r4712;
  float r4714=r4713;
  float r4715 = 1.0;
  float r4716=r4715;
  float r4717 = r4714/r4716;
  float r4718 = floor(r4717);
  float r4719 = r4716*r4718;
  float r4720 = r4714-r4719;
  vec3 r4721 = vec3(r4556,r4638,r4720);
  vec3 r4722=r4721;
  float r4723 = 1.0;
  float r4724 = r4395+r4723;
  float r4725=r4724;
  float r4726=r4397;
  float r4727=r4399;
  float r4728=r4725;
  float r4729 = 43758.5453123;
  float r4730 = r4728*r4729;
  float r4731=r4730;
  float r4732 = 1.0;
  float r4733=r4732;
  float r4734 = r4731/r4733;
  float r4735 = floor(r4734);
  float r4736 = r4733*r4735;
  float r4737 = r4731-r4736;
  float r4738 = 78.233;
  float r4739 = r4728*r4738;
  float r4740 = r4737+r4739;
  float r4741=r4740;
  float r4742 = 1.0;
  float r4743=r4742;
  float r4744 = r4741/r4743;
  float r4745 = floor(r4744);
  float r4746 = r4743*r4745;
  float r4747 = r4741-r4746;
  float r4748 = r4747+r4726;
  float r4749=r4748;
  float r4750 = 43758.5453123;
  float r4751 = r4749*r4750;
  float r4752=r4751;
  float r4753 = 1.0;
  float r4754=r4753;
  float r4755 = r4752/r4754;
  float r4756 = floor(r4755);
  float r4757 = r4754*r4756;
  float r4758 = r4752-r4757;
  float r4759 = 78.233;
  float r4760 = r4749*r4759;
  float r4761 = r4758+r4760;
  float r4762=r4761;
  float r4763 = 1.0;
  float r4764=r4763;
  float r4765 = r4762/r4764;
  float r4766 = floor(r4765);
  float r4767 = r4764*r4766;
  float r4768 = r4762-r4767;
  float r4769 = r4768+r4727;
  float r4770=r4769;
  float r4771 = 43758.5453123;
  float r4772 = r4770*r4771;
  float r4773=r4772;
  float r4774 = 1.0;
  float r4775=r4774;
  float r4776 = r4773/r4775;
  float r4777 = floor(r4776);
  float r4778 = r4775*r4777;
  float r4779 = r4773-r4778;
  float r4780 = 78.233;
  float r4781 = r4770*r4780;
  float r4782 = r4779+r4781;
  float r4783=r4782;
  float r4784 = 1.0;
  float r4785=r4784;
  float r4786 = r4783/r4785;
  float r4787 = floor(r4786);
  float r4788 = r4785*r4787;
  float r4789 = r4783-r4788;
  float r4790=r4789;
  float r4791 = 43758.5453123;
  float r4792 = r4790*r4791;
  float r4793=r4792;
  float r4794 = 1.0;
  float r4795=r4794;
  float r4796 = r4793/r4795;
  float r4797 = floor(r4796);
  float r4798 = r4795*r4797;
  float r4799 = r4793-r4798;
  float r4800 = 78.233;
  float r4801 = r4790*r4800;
  float r4802 = r4799+r4801;
  float r4803=r4802;
  float r4804 = 1.0;
  float r4805=r4804;
  float r4806 = r4803/r4805;
  float r4807 = floor(r4806);
  float r4808 = r4805*r4807;
  float r4809 = r4803-r4808;
  float r4810=r4726;
  float r4811 = 43758.5453123;
  float r4812 = r4810*r4811;
  float r4813=r4812;
  float r4814 = 1.0;
  float r4815=r4814;
  float r4816 = r4813/r4815;
  float r4817 = floor(r4816);
  float r4818 = r4815*r4817;
  float r4819 = r4813-r4818;
  float r4820 = 78.233;
  float r4821 = r4810*r4820;
  float r4822 = r4819+r4821;
  float r4823=r4822;
  float r4824 = 1.0;
  float r4825=r4824;
  float r4826 = r4823/r4825;
  float r4827 = floor(r4826);
  float r4828 = r4825*r4827;
  float r4829 = r4823-r4828;
  float r4830 = r4829+r4727;
  float r4831=r4830;
  float r4832 = 43758.5453123;
  float r4833 = r4831*r4832;
  float r4834=r4833;
  float r4835 = 1.0;
  float r4836=r4835;
  float r4837 = r4834/r4836;
  float r4838 = floor(r4837);
  float r4839 = r4836*r4838;
  float r4840 = r4834-r4839;
  float r4841 = 78.233;
  float r4842 = r4831*r4841;
  float r4843 = r4840+r4842;
  float r4844=r4843;
  float r4845 = 1.0;
  float r4846=r4845;
  float r4847 = r4844/r4846;
  float r4848 = floor(r4847);
  float r4849 = r4846*r4848;
  float r4850 = r4844-r4849;
  float r4851 = r4850+r4725;
  float r4852=r4851;
  float r4853 = 43758.5453123;
  float r4854 = r4852*r4853;
  float r4855=r4854;
  float r4856 = 1.0;
  float r4857=r4856;
  float r4858 = r4855/r4857;
  float r4859 = floor(r4858);
  float r4860 = r4857*r4859;
  float r4861 = r4855-r4860;
  float r4862 = 78.233;
  float r4863 = r4852*r4862;
  float r4864 = r4861+r4863;
  float r4865=r4864;
  float r4866 = 1.0;
  float r4867=r4866;
  float r4868 = r4865/r4867;
  float r4869 = floor(r4868);
  float r4870 = r4867*r4869;
  float r4871 = r4865-r4870;
  float r4872=r4871;
  float r4873 = 43758.5453123;
  float r4874 = r4872*r4873;
  float r4875=r4874;
  float r4876 = 1.0;
  float r4877=r4876;
  float r4878 = r4875/r4877;
  float r4879 = floor(r4878);
  float r4880 = r4877*r4879;
  float r4881 = r4875-r4880;
  float r4882 = 78.233;
  float r4883 = r4872*r4882;
  float r4884 = r4881+r4883;
  float r4885=r4884;
  float r4886 = 1.0;
  float r4887=r4886;
  float r4888 = r4885/r4887;
  float r4889 = floor(r4888);
  float r4890 = r4887*r4889;
  float r4891 = r4885-r4890;
  float r4892=r4727;
  float r4893 = 43758.5453123;
  float r4894 = r4892*r4893;
  float r4895=r4894;
  float r4896 = 1.0;
  float r4897=r4896;
  float r4898 = r4895/r4897;
  float r4899 = floor(r4898);
  float r4900 = r4897*r4899;
  float r4901 = r4895-r4900;
  float r4902 = 78.233;
  float r4903 = r4892*r4902;
  float r4904 = r4901+r4903;
  float r4905=r4904;
  float r4906 = 1.0;
  float r4907=r4906;
  float r4908 = r4905/r4907;
  float r4909 = floor(r4908);
  float r4910 = r4907*r4909;
  float r4911 = r4905-r4910;
  float r4912 = r4911+r4725;
  float r4913=r4912;
  float r4914 = 43758.5453123;
  float r4915 = r4913*r4914;
  float r4916=r4915;
  float r4917 = 1.0;
  float r4918=r4917;
  float r4919 = r4916/r4918;
  float r4920 = floor(r4919);
  float r4921 = r4918*r4920;
  float r4922 = r4916-r4921;
  float r4923 = 78.233;
  float r4924 = r4913*r4923;
  float r4925 = r4922+r4924;
  float r4926=r4925;
  float r4927 = 1.0;
  float r4928=r4927;
  float r4929 = r4926/r4928;
  float r4930 = floor(r4929);
  float r4931 = r4928*r4930;
  float r4932 = r4926-r4931;
  float r4933 = r4932+r4726;
  float r4934=r4933;
  float r4935 = 43758.5453123;
  float r4936 = r4934*r4935;
  float r4937=r4936;
  float r4938 = 1.0;
  float r4939=r4938;
  float r4940 = r4937/r4939;
  float r4941 = floor(r4940);
  float r4942 = r4939*r4941;
  float r4943 = r4937-r4942;
  float r4944 = 78.233;
  float r4945 = r4934*r4944;
  float r4946 = r4943+r4945;
  float r4947=r4946;
  float r4948 = 1.0;
  float r4949=r4948;
  float r4950 = r4947/r4949;
  float r4951 = floor(r4950);
  float r4952 = r4949*r4951;
  float r4953 = r4947-r4952;
  float r4954=r4953;
  float r4955 = 43758.5453123;
  float r4956 = r4954*r4955;
  float r4957=r4956;
  float r4958 = 1.0;
  float r4959=r4958;
  float r4960 = r4957/r4959;
  float r4961 = floor(r4960);
  float r4962 = r4959*r4961;
  float r4963 = r4957-r4962;
  float r4964 = 78.233;
  float r4965 = r4954*r4964;
  float r4966 = r4963+r4965;
  float r4967=r4966;
  float r4968 = 1.0;
  float r4969=r4968;
  float r4970 = r4967/r4969;
  float r4971 = floor(r4970);
  float r4972 = r4969*r4971;
  float r4973 = r4967-r4972;
  vec3 r4974 = vec3(r4809,r4891,r4973);
  vec3 r4975=r4974;
  float r4976 = 1.0;
  float r4977 = r4395+r4976;
  float r4978=r4977;
  float r4979 = 1.0;
  float r4980 = r4397+r4979;
  float r4981=r4980;
  float r4982=r4399;
  float r4983=r4978;
  float r4984 = 43758.5453123;
  float r4985 = r4983*r4984;
  float r4986=r4985;
  float r4987 = 1.0;
  float r4988=r4987;
  float r4989 = r4986/r4988;
  float r4990 = floor(r4989);
  float r4991 = r4988*r4990;
  float r4992 = r4986-r4991;
  float r4993 = 78.233;
  float r4994 = r4983*r4993;
  float r4995 = r4992+r4994;
  float r4996=r4995;
  float r4997 = 1.0;
  float r4998=r4997;
  float r4999 = r4996/r4998;
  float r5000 = floor(r4999);
  float r5001 = r4998*r5000;
  float r5002 = r4996-r5001;
  float r5003 = r5002+r4981;
  float r5004=r5003;
  float r5005 = 43758.5453123;
  float r5006 = r5004*r5005;
  float r5007=r5006;
  float r5008 = 1.0;
  float r5009=r5008;
  float r5010 = r5007/r5009;
  float r5011 = floor(r5010);
  float r5012 = r5009*r5011;
  float r5013 = r5007-r5012;
  float r5014 = 78.233;
  float r5015 = r5004*r5014;
  float r5016 = r5013+r5015;
  float r5017=r5016;
  float r5018 = 1.0;
  float r5019=r5018;
  float r5020 = r5017/r5019;
  float r5021 = floor(r5020);
  float r5022 = r5019*r5021;
  float r5023 = r5017-r5022;
  float r5024 = r5023+r4982;
  float r5025=r5024;
  float r5026 = 43758.5453123;
  float r5027 = r5025*r5026;
  float r5028=r5027;
  float r5029 = 1.0;
  float r5030=r5029;
  float r5031 = r5028/r5030;
  float r5032 = floor(r5031);
  float r5033 = r5030*r5032;
  float r5034 = r5028-r5033;
  float r5035 = 78.233;
  float r5036 = r5025*r5035;
  float r5037 = r5034+r5036;
  float r5038=r5037;
  float r5039 = 1.0;
  float r5040=r5039;
  float r5041 = r5038/r5040;
  float r5042 = floor(r5041);
  float r5043 = r5040*r5042;
  float r5044 = r5038-r5043;
  float r5045=r5044;
  float r5046 = 43758.5453123;
  float r5047 = r5045*r5046;
  float r5048=r5047;
  float r5049 = 1.0;
  float r5050=r5049;
  float r5051 = r5048/r5050;
  float r5052 = floor(r5051);
  float r5053 = r5050*r5052;
  float r5054 = r5048-r5053;
  float r5055 = 78.233;
  float r5056 = r5045*r5055;
  float r5057 = r5054+r5056;
  float r5058=r5057;
  float r5059 = 1.0;
  float r5060=r5059;
  float r5061 = r5058/r5060;
  float r5062 = floor(r5061);
  float r5063 = r5060*r5062;
  float r5064 = r5058-r5063;
  float r5065=r4981;
  float r5066 = 43758.5453123;
  float r5067 = r5065*r5066;
  float r5068=r5067;
  float r5069 = 1.0;
  float r5070=r5069;
  float r5071 = r5068/r5070;
  float r5072 = floor(r5071);
  float r5073 = r5070*r5072;
  float r5074 = r5068-r5073;
  float r5075 = 78.233;
  float r5076 = r5065*r5075;
  float r5077 = r5074+r5076;
  float r5078=r5077;
  float r5079 = 1.0;
  float r5080=r5079;
  float r5081 = r5078/r5080;
  float r5082 = floor(r5081);
  float r5083 = r5080*r5082;
  float r5084 = r5078-r5083;
  float r5085 = r5084+r4982;
  float r5086=r5085;
  float r5087 = 43758.5453123;
  float r5088 = r5086*r5087;
  float r5089=r5088;
  float r5090 = 1.0;
  float r5091=r5090;
  float r5092 = r5089/r5091;
  float r5093 = floor(r5092);
  float r5094 = r5091*r5093;
  float r5095 = r5089-r5094;
  float r5096 = 78.233;
  float r5097 = r5086*r5096;
  float r5098 = r5095+r5097;
  float r5099=r5098;
  float r5100 = 1.0;
  float r5101=r5100;
  float r5102 = r5099/r5101;
  float r5103 = floor(r5102);
  float r5104 = r5101*r5103;
  float r5105 = r5099-r5104;
  float r5106 = r5105+r4978;
  float r5107=r5106;
  float r5108 = 43758.5453123;
  float r5109 = r5107*r5108;
  float r5110=r5109;
  float r5111 = 1.0;
  float r5112=r5111;
  float r5113 = r5110/r5112;
  float r5114 = floor(r5113);
  float r5115 = r5112*r5114;
  float r5116 = r5110-r5115;
  float r5117 = 78.233;
  float r5118 = r5107*r5117;
  float r5119 = r5116+r5118;
  float r5120=r5119;
  float r5121 = 1.0;
  float r5122=r5121;
  float r5123 = r5120/r5122;
  float r5124 = floor(r5123);
  float r5125 = r5122*r5124;
  float r5126 = r5120-r5125;
  float r5127=r5126;
  float r5128 = 43758.5453123;
  float r5129 = r5127*r5128;
  float r5130=r5129;
  float r5131 = 1.0;
  float r5132=r5131;
  float r5133 = r5130/r5132;
  float r5134 = floor(r5133);
  float r5135 = r5132*r5134;
  float r5136 = r5130-r5135;
  float r5137 = 78.233;
  float r5138 = r5127*r5137;
  float r5139 = r5136+r5138;
  float r5140=r5139;
  float r5141 = 1.0;
  float r5142=r5141;
  float r5143 = r5140/r5142;
  float r5144 = floor(r5143);
  float r5145 = r5142*r5144;
  float r5146 = r5140-r5145;
  float r5147=r4982;
  float r5148 = 43758.5453123;
  float r5149 = r5147*r5148;
  float r5150=r5149;
  float r5151 = 1.0;
  float r5152=r5151;
  float r5153 = r5150/r5152;
  float r5154 = floor(r5153);
  float r5155 = r5152*r5154;
  float r5156 = r5150-r5155;
  float r5157 = 78.233;
  float r5158 = r5147*r5157;
  float r5159 = r5156+r5158;
  float r5160=r5159;
  float r5161 = 1.0;
  float r5162=r5161;
  float r5163 = r5160/r5162;
  float r5164 = floor(r5163);
  float r5165 = r5162*r5164;
  float r5166 = r5160-r5165;
  float r5167 = r5166+r4978;
  float r5168=r5167;
  float r5169 = 43758.5453123;
  float r5170 = r5168*r5169;
  float r5171=r5170;
  float r5172 = 1.0;
  float r5173=r5172;
  float r5174 = r5171/r5173;
  float r5175 = floor(r5174);
  float r5176 = r5173*r5175;
  float r5177 = r5171-r5176;
  float r5178 = 78.233;
  float r5179 = r5168*r5178;
  float r5180 = r5177+r5179;
  float r5181=r5180;
  float r5182 = 1.0;
  float r5183=r5182;
  float r5184 = r5181/r5183;
  float r5185 = floor(r5184);
  float r5186 = r5183*r5185;
  float r5187 = r5181-r5186;
  float r5188 = r5187+r4981;
  float r5189=r5188;
  float r5190 = 43758.5453123;
  float r5191 = r5189*r5190;
  float r5192=r5191;
  float r5193 = 1.0;
  float r5194=r5193;
  float r5195 = r5192/r5194;
  float r5196 = floor(r5195);
  float r5197 = r5194*r5196;
  float r5198 = r5192-r5197;
  float r5199 = 78.233;
  float r5200 = r5189*r5199;
  float r5201 = r5198+r5200;
  float r5202=r5201;
  float r5203 = 1.0;
  float r5204=r5203;
  float r5205 = r5202/r5204;
  float r5206 = floor(r5205);
  float r5207 = r5204*r5206;
  float r5208 = r5202-r5207;
  float r5209=r5208;
  float r5210 = 43758.5453123;
  float r5211 = r5209*r5210;
  float r5212=r5211;
  float r5213 = 1.0;
  float r5214=r5213;
  float r5215 = r5212/r5214;
  float r5216 = floor(r5215);
  float r5217 = r5214*r5216;
  float r5218 = r5212-r5217;
  float r5219 = 78.233;
  float r5220 = r5209*r5219;
  float r5221 = r5218+r5220;
  float r5222=r5221;
  float r5223 = 1.0;
  float r5224=r5223;
  float r5225 = r5222/r5224;
  float r5226 = floor(r5225);
  float r5227 = r5224*r5226;
  float r5228 = r5222-r5227;
  vec3 r5229 = vec3(r5064,r5146,r5228);
  vec3 r5230=r5229;
  float r5231=r4395;
  float r5232 = 1.0;
  float r5233 = r4397+r5232;
  float r5234=r5233;
  float r5235=r4399;
  float r5236=r5231;
  float r5237 = 43758.5453123;
  float r5238 = r5236*r5237;
  float r5239=r5238;
  float r5240 = 1.0;
  float r5241=r5240;
  float r5242 = r5239/r5241;
  float r5243 = floor(r5242);
  float r5244 = r5241*r5243;
  float r5245 = r5239-r5244;
  float r5246 = 78.233;
  float r5247 = r5236*r5246;
  float r5248 = r5245+r5247;
  float r5249=r5248;
  float r5250 = 1.0;
  float r5251=r5250;
  float r5252 = r5249/r5251;
  float r5253 = floor(r5252);
  float r5254 = r5251*r5253;
  float r5255 = r5249-r5254;
  float r5256 = r5255+r5234;
  float r5257=r5256;
  float r5258 = 43758.5453123;
  float r5259 = r5257*r5258;
  float r5260=r5259;
  float r5261 = 1.0;
  float r5262=r5261;
  float r5263 = r5260/r5262;
  float r5264 = floor(r5263);
  float r5265 = r5262*r5264;
  float r5266 = r5260-r5265;
  float r5267 = 78.233;
  float r5268 = r5257*r5267;
  float r5269 = r5266+r5268;
  float r5270=r5269;
  float r5271 = 1.0;
  float r5272=r5271;
  float r5273 = r5270/r5272;
  float r5274 = floor(r5273);
  float r5275 = r5272*r5274;
  float r5276 = r5270-r5275;
  float r5277 = r5276+r5235;
  float r5278=r5277;
  float r5279 = 43758.5453123;
  float r5280 = r5278*r5279;
  float r5281=r5280;
  float r5282 = 1.0;
  float r5283=r5282;
  float r5284 = r5281/r5283;
  float r5285 = floor(r5284);
  float r5286 = r5283*r5285;
  float r5287 = r5281-r5286;
  float r5288 = 78.233;
  float r5289 = r5278*r5288;
  float r5290 = r5287+r5289;
  float r5291=r5290;
  float r5292 = 1.0;
  float r5293=r5292;
  float r5294 = r5291/r5293;
  float r5295 = floor(r5294);
  float r5296 = r5293*r5295;
  float r5297 = r5291-r5296;
  float r5298=r5297;
  float r5299 = 43758.5453123;
  float r5300 = r5298*r5299;
  float r5301=r5300;
  float r5302 = 1.0;
  float r5303=r5302;
  float r5304 = r5301/r5303;
  float r5305 = floor(r5304);
  float r5306 = r5303*r5305;
  float r5307 = r5301-r5306;
  float r5308 = 78.233;
  float r5309 = r5298*r5308;
  float r5310 = r5307+r5309;
  float r5311=r5310;
  float r5312 = 1.0;
  float r5313=r5312;
  float r5314 = r5311/r5313;
  float r5315 = floor(r5314);
  float r5316 = r5313*r5315;
  float r5317 = r5311-r5316;
  float r5318=r5234;
  float r5319 = 43758.5453123;
  float r5320 = r5318*r5319;
  float r5321=r5320;
  float r5322 = 1.0;
  float r5323=r5322;
  float r5324 = r5321/r5323;
  float r5325 = floor(r5324);
  float r5326 = r5323*r5325;
  float r5327 = r5321-r5326;
  float r5328 = 78.233;
  float r5329 = r5318*r5328;
  float r5330 = r5327+r5329;
  float r5331=r5330;
  float r5332 = 1.0;
  float r5333=r5332;
  float r5334 = r5331/r5333;
  float r5335 = floor(r5334);
  float r5336 = r5333*r5335;
  float r5337 = r5331-r5336;
  float r5338 = r5337+r5235;
  float r5339=r5338;
  float r5340 = 43758.5453123;
  float r5341 = r5339*r5340;
  float r5342=r5341;
  float r5343 = 1.0;
  float r5344=r5343;
  float r5345 = r5342/r5344;
  float r5346 = floor(r5345);
  float r5347 = r5344*r5346;
  float r5348 = r5342-r5347;
  float r5349 = 78.233;
  float r5350 = r5339*r5349;
  float r5351 = r5348+r5350;
  float r5352=r5351;
  float r5353 = 1.0;
  float r5354=r5353;
  float r5355 = r5352/r5354;
  float r5356 = floor(r5355);
  float r5357 = r5354*r5356;
  float r5358 = r5352-r5357;
  float r5359 = r5358+r5231;
  float r5360=r5359;
  float r5361 = 43758.5453123;
  float r5362 = r5360*r5361;
  float r5363=r5362;
  float r5364 = 1.0;
  float r5365=r5364;
  float r5366 = r5363/r5365;
  float r5367 = floor(r5366);
  float r5368 = r5365*r5367;
  float r5369 = r5363-r5368;
  float r5370 = 78.233;
  float r5371 = r5360*r5370;
  float r5372 = r5369+r5371;
  float r5373=r5372;
  float r5374 = 1.0;
  float r5375=r5374;
  float r5376 = r5373/r5375;
  float r5377 = floor(r5376);
  float r5378 = r5375*r5377;
  float r5379 = r5373-r5378;
  float r5380=r5379;
  float r5381 = 43758.5453123;
  float r5382 = r5380*r5381;
  float r5383=r5382;
  float r5384 = 1.0;
  float r5385=r5384;
  float r5386 = r5383/r5385;
  float r5387 = floor(r5386);
  float r5388 = r5385*r5387;
  float r5389 = r5383-r5388;
  float r5390 = 78.233;
  float r5391 = r5380*r5390;
  float r5392 = r5389+r5391;
  float r5393=r5392;
  float r5394 = 1.0;
  float r5395=r5394;
  float r5396 = r5393/r5395;
  float r5397 = floor(r5396);
  float r5398 = r5395*r5397;
  float r5399 = r5393-r5398;
  float r5400=r5235;
  float r5401 = 43758.5453123;
  float r5402 = r5400*r5401;
  float r5403=r5402;
  float r5404 = 1.0;
  float r5405=r5404;
  float r5406 = r5403/r5405;
  float r5407 = floor(r5406);
  float r5408 = r5405*r5407;
  float r5409 = r5403-r5408;
  float r5410 = 78.233;
  float r5411 = r5400*r5410;
  float r5412 = r5409+r5411;
  float r5413=r5412;
  float r5414 = 1.0;
  float r5415=r5414;
  float r5416 = r5413/r5415;
  float r5417 = floor(r5416);
  float r5418 = r5415*r5417;
  float r5419 = r5413-r5418;
  float r5420 = r5419+r5231;
  float r5421=r5420;
  float r5422 = 43758.5453123;
  float r5423 = r5421*r5422;
  float r5424=r5423;
  float r5425 = 1.0;
  float r5426=r5425;
  float r5427 = r5424/r5426;
  float r5428 = floor(r5427);
  float r5429 = r5426*r5428;
  float r5430 = r5424-r5429;
  float r5431 = 78.233;
  float r5432 = r5421*r5431;
  float r5433 = r5430+r5432;
  float r5434=r5433;
  float r5435 = 1.0;
  float r5436=r5435;
  float r5437 = r5434/r5436;
  float r5438 = floor(r5437);
  float r5439 = r5436*r5438;
  float r5440 = r5434-r5439;
  float r5441 = r5440+r5234;
  float r5442=r5441;
  float r5443 = 43758.5453123;
  float r5444 = r5442*r5443;
  float r5445=r5444;
  float r5446 = 1.0;
  float r5447=r5446;
  float r5448 = r5445/r5447;
  float r5449 = floor(r5448);
  float r5450 = r5447*r5449;
  float r5451 = r5445-r5450;
  float r5452 = 78.233;
  float r5453 = r5442*r5452;
  float r5454 = r5451+r5453;
  float r5455=r5454;
  float r5456 = 1.0;
  float r5457=r5456;
  float r5458 = r5455/r5457;
  float r5459 = floor(r5458);
  float r5460 = r5457*r5459;
  float r5461 = r5455-r5460;
  float r5462=r5461;
  float r5463 = 43758.5453123;
  float r5464 = r5462*r5463;
  float r5465=r5464;
  float r5466 = 1.0;
  float r5467=r5466;
  float r5468 = r5465/r5467;
  float r5469 = floor(r5468);
  float r5470 = r5467*r5469;
  float r5471 = r5465-r5470;
  float r5472 = 78.233;
  float r5473 = r5462*r5472;
  float r5474 = r5471+r5473;
  float r5475=r5474;
  float r5476 = 1.0;
  float r5477=r5476;
  float r5478 = r5475/r5477;
  float r5479 = floor(r5478);
  float r5480 = r5477*r5479;
  float r5481 = r5475-r5480;
  vec3 r5482 = vec3(r5317,r5399,r5481);
  vec3 r5483=r5482;
  float r5484=r4395;
  float r5485=r4397;
  float r5486 = 1.0;
  float r5487 = r4399+r5486;
  float r5488=r5487;
  float r5489=r5484;
  float r5490 = 43758.5453123;
  float r5491 = r5489*r5490;
  float r5492=r5491;
  float r5493 = 1.0;
  float r5494=r5493;
  float r5495 = r5492/r5494;
  float r5496 = floor(r5495);
  float r5497 = r5494*r5496;
  float r5498 = r5492-r5497;
  float r5499 = 78.233;
  float r5500 = r5489*r5499;
  float r5501 = r5498+r5500;
  float r5502=r5501;
  float r5503 = 1.0;
  float r5504=r5503;
  float r5505 = r5502/r5504;
  float r5506 = floor(r5505);
  float r5507 = r5504*r5506;
  float r5508 = r5502-r5507;
  float r5509 = r5508+r5485;
  float r5510=r5509;
  float r5511 = 43758.5453123;
  float r5512 = r5510*r5511;
  float r5513=r5512;
  float r5514 = 1.0;
  float r5515=r5514;
  float r5516 = r5513/r5515;
  float r5517 = floor(r5516);
  float r5518 = r5515*r5517;
  float r5519 = r5513-r5518;
  float r5520 = 78.233;
  float r5521 = r5510*r5520;
  float r5522 = r5519+r5521;
  float r5523=r5522;
  float r5524 = 1.0;
  float r5525=r5524;
  float r5526 = r5523/r5525;
  float r5527 = floor(r5526);
  float r5528 = r5525*r5527;
  float r5529 = r5523-r5528;
  float r5530 = r5529+r5488;
  float r5531=r5530;
  float r5532 = 43758.5453123;
  float r5533 = r5531*r5532;
  float r5534=r5533;
  float r5535 = 1.0;
  float r5536=r5535;
  float r5537 = r5534/r5536;
  float r5538 = floor(r5537);
  float r5539 = r5536*r5538;
  float r5540 = r5534-r5539;
  float r5541 = 78.233;
  float r5542 = r5531*r5541;
  float r5543 = r5540+r5542;
  float r5544=r5543;
  float r5545 = 1.0;
  float r5546=r5545;
  float r5547 = r5544/r5546;
  float r5548 = floor(r5547);
  float r5549 = r5546*r5548;
  float r5550 = r5544-r5549;
  float r5551=r5550;
  float r5552 = 43758.5453123;
  float r5553 = r5551*r5552;
  float r5554=r5553;
  float r5555 = 1.0;
  float r5556=r5555;
  float r5557 = r5554/r5556;
  float r5558 = floor(r5557);
  float r5559 = r5556*r5558;
  float r5560 = r5554-r5559;
  float r5561 = 78.233;
  float r5562 = r5551*r5561;
  float r5563 = r5560+r5562;
  float r5564=r5563;
  float r5565 = 1.0;
  float r5566=r5565;
  float r5567 = r5564/r5566;
  float r5568 = floor(r5567);
  float r5569 = r5566*r5568;
  float r5570 = r5564-r5569;
  float r5571=r5485;
  float r5572 = 43758.5453123;
  float r5573 = r5571*r5572;
  float r5574=r5573;
  float r5575 = 1.0;
  float r5576=r5575;
  float r5577 = r5574/r5576;
  float r5578 = floor(r5577);
  float r5579 = r5576*r5578;
  float r5580 = r5574-r5579;
  float r5581 = 78.233;
  float r5582 = r5571*r5581;
  float r5583 = r5580+r5582;
  float r5584=r5583;
  float r5585 = 1.0;
  float r5586=r5585;
  float r5587 = r5584/r5586;
  float r5588 = floor(r5587);
  float r5589 = r5586*r5588;
  float r5590 = r5584-r5589;
  float r5591 = r5590+r5488;
  float r5592=r5591;
  float r5593 = 43758.5453123;
  float r5594 = r5592*r5593;
  float r5595=r5594;
  float r5596 = 1.0;
  float r5597=r5596;
  float r5598 = r5595/r5597;
  float r5599 = floor(r5598);
  float r5600 = r5597*r5599;
  float r5601 = r5595-r5600;
  float r5602 = 78.233;
  float r5603 = r5592*r5602;
  float r5604 = r5601+r5603;
  float r5605=r5604;
  float r5606 = 1.0;
  float r5607=r5606;
  float r5608 = r5605/r5607;
  float r5609 = floor(r5608);
  float r5610 = r5607*r5609;
  float r5611 = r5605-r5610;
  float r5612 = r5611+r5484;
  float r5613=r5612;
  float r5614 = 43758.5453123;
  float r5615 = r5613*r5614;
  float r5616=r5615;
  float r5617 = 1.0;
  float r5618=r5617;
  float r5619 = r5616/r5618;
  float r5620 = floor(r5619);
  float r5621 = r5618*r5620;
  float r5622 = r5616-r5621;
  float r5623 = 78.233;
  float r5624 = r5613*r5623;
  float r5625 = r5622+r5624;
  float r5626=r5625;
  float r5627 = 1.0;
  float r5628=r5627;
  float r5629 = r5626/r5628;
  float r5630 = floor(r5629);
  float r5631 = r5628*r5630;
  float r5632 = r5626-r5631;
  float r5633=r5632;
  float r5634 = 43758.5453123;
  float r5635 = r5633*r5634;
  float r5636=r5635;
  float r5637 = 1.0;
  float r5638=r5637;
  float r5639 = r5636/r5638;
  float r5640 = floor(r5639);
  float r5641 = r5638*r5640;
  float r5642 = r5636-r5641;
  float r5643 = 78.233;
  float r5644 = r5633*r5643;
  float r5645 = r5642+r5644;
  float r5646=r5645;
  float r5647 = 1.0;
  float r5648=r5647;
  float r5649 = r5646/r5648;
  float r5650 = floor(r5649);
  float r5651 = r5648*r5650;
  float r5652 = r5646-r5651;
  float r5653=r5488;
  float r5654 = 43758.5453123;
  float r5655 = r5653*r5654;
  float r5656=r5655;
  float r5657 = 1.0;
  float r5658=r5657;
  float r5659 = r5656/r5658;
  float r5660 = floor(r5659);
  float r5661 = r5658*r5660;
  float r5662 = r5656-r5661;
  float r5663 = 78.233;
  float r5664 = r5653*r5663;
  float r5665 = r5662+r5664;
  float r5666=r5665;
  float r5667 = 1.0;
  float r5668=r5667;
  float r5669 = r5666/r5668;
  float r5670 = floor(r5669);
  float r5671 = r5668*r5670;
  float r5672 = r5666-r5671;
  float r5673 = r5672+r5484;
  float r5674=r5673;
  float r5675 = 43758.5453123;
  float r5676 = r5674*r5675;
  float r5677=r5676;
  float r5678 = 1.0;
  float r5679=r5678;
  float r5680 = r5677/r5679;
  float r5681 = floor(r5680);
  float r5682 = r5679*r5681;
  float r5683 = r5677-r5682;
  float r5684 = 78.233;
  float r5685 = r5674*r5684;
  float r5686 = r5683+r5685;
  float r5687=r5686;
  float r5688 = 1.0;
  float r5689=r5688;
  float r5690 = r5687/r5689;
  float r5691 = floor(r5690);
  float r5692 = r5689*r5691;
  float r5693 = r5687-r5692;
  float r5694 = r5693+r5485;
  float r5695=r5694;
  float r5696 = 43758.5453123;
  float r5697 = r5695*r5696;
  float r5698=r5697;
  float r5699 = 1.0;
  float r5700=r5699;
  float r5701 = r5698/r5700;
  float r5702 = floor(r5701);
  float r5703 = r5700*r5702;
  float r5704 = r5698-r5703;
  float r5705 = 78.233;
  float r5706 = r5695*r5705;
  float r5707 = r5704+r5706;
  float r5708=r5707;
  float r5709 = 1.0;
  float r5710=r5709;
  float r5711 = r5708/r5710;
  float r5712 = floor(r5711);
  float r5713 = r5710*r5712;
  float r5714 = r5708-r5713;
  float r5715=r5714;
  float r5716 = 43758.5453123;
  float r5717 = r5715*r5716;
  float r5718=r5717;
  float r5719 = 1.0;
  float r5720=r5719;
  float r5721 = r5718/r5720;
  float r5722 = floor(r5721);
  float r5723 = r5720*r5722;
  float r5724 = r5718-r5723;
  float r5725 = 78.233;
  float r5726 = r5715*r5725;
  float r5727 = r5724+r5726;
  float r5728=r5727;
  float r5729 = 1.0;
  float r5730=r5729;
  float r5731 = r5728/r5730;
  float r5732 = floor(r5731);
  float r5733 = r5730*r5732;
  float r5734 = r5728-r5733;
  vec3 r5735 = vec3(r5570,r5652,r5734);
  vec3 r5736=r5735;
  float r5737 = 1.0;
  float r5738 = r4395+r5737;
  float r5739=r5738;
  float r5740=r4397;
  float r5741 = 1.0;
  float r5742 = r4399+r5741;
  float r5743=r5742;
  float r5744=r5739;
  float r5745 = 43758.5453123;
  float r5746 = r5744*r5745;
  float r5747=r5746;
  float r5748 = 1.0;
  float r5749=r5748;
  float r5750 = r5747/r5749;
  float r5751 = floor(r5750);
  float r5752 = r5749*r5751;
  float r5753 = r5747-r5752;
  float r5754 = 78.233;
  float r5755 = r5744*r5754;
  float r5756 = r5753+r5755;
  float r5757=r5756;
  float r5758 = 1.0;
  float r5759=r5758;
  float r5760 = r5757/r5759;
  float r5761 = floor(r5760);
  float r5762 = r5759*r5761;
  float r5763 = r5757-r5762;
  float r5764 = r5763+r5740;
  float r5765=r5764;
  float r5766 = 43758.5453123;
  float r5767 = r5765*r5766;
  float r5768=r5767;
  float r5769 = 1.0;
  float r5770=r5769;
  float r5771 = r5768/r5770;
  float r5772 = floor(r5771);
  float r5773 = r5770*r5772;
  float r5774 = r5768-r5773;
  float r5775 = 78.233;
  float r5776 = r5765*r5775;
  float r5777 = r5774+r5776;
  float r5778=r5777;
  float r5779 = 1.0;
  float r5780=r5779;
  float r5781 = r5778/r5780;
  float r5782 = floor(r5781);
  float r5783 = r5780*r5782;
  float r5784 = r5778-r5783;
  float r5785 = r5784+r5743;
  float r5786=r5785;
  float r5787 = 43758.5453123;
  float r5788 = r5786*r5787;
  float r5789=r5788;
  float r5790 = 1.0;
  float r5791=r5790;
  float r5792 = r5789/r5791;
  float r5793 = floor(r5792);
  float r5794 = r5791*r5793;
  float r5795 = r5789-r5794;
  float r5796 = 78.233;
  float r5797 = r5786*r5796;
  float r5798 = r5795+r5797;
  float r5799=r5798;
  float r5800 = 1.0;
  float r5801=r5800;
  float r5802 = r5799/r5801;
  float r5803 = floor(r5802);
  float r5804 = r5801*r5803;
  float r5805 = r5799-r5804;
  float r5806=r5805;
  float r5807 = 43758.5453123;
  float r5808 = r5806*r5807;
  float r5809=r5808;
  float r5810 = 1.0;
  float r5811=r5810;
  float r5812 = r5809/r5811;
  float r5813 = floor(r5812);
  float r5814 = r5811*r5813;
  float r5815 = r5809-r5814;
  float r5816 = 78.233;
  float r5817 = r5806*r5816;
  float r5818 = r5815+r5817;
  float r5819=r5818;
  float r5820 = 1.0;
  float r5821=r5820;
  float r5822 = r5819/r5821;
  float r5823 = floor(r5822);
  float r5824 = r5821*r5823;
  float r5825 = r5819-r5824;
  float r5826=r5740;
  float r5827 = 43758.5453123;
  float r5828 = r5826*r5827;
  float r5829=r5828;
  float r5830 = 1.0;
  float r5831=r5830;
  float r5832 = r5829/r5831;
  float r5833 = floor(r5832);
  float r5834 = r5831*r5833;
  float r5835 = r5829-r5834;
  float r5836 = 78.233;
  float r5837 = r5826*r5836;
  float r5838 = r5835+r5837;
  float r5839=r5838;
  float r5840 = 1.0;
  float r5841=r5840;
  float r5842 = r5839/r5841;
  float r5843 = floor(r5842);
  float r5844 = r5841*r5843;
  float r5845 = r5839-r5844;
  float r5846 = r5845+r5743;
  float r5847=r5846;
  float r5848 = 43758.5453123;
  float r5849 = r5847*r5848;
  float r5850=r5849;
  float r5851 = 1.0;
  float r5852=r5851;
  float r5853 = r5850/r5852;
  float r5854 = floor(r5853);
  float r5855 = r5852*r5854;
  float r5856 = r5850-r5855;
  float r5857 = 78.233;
  float r5858 = r5847*r5857;
  float r5859 = r5856+r5858;
  float r5860=r5859;
  float r5861 = 1.0;
  float r5862=r5861;
  float r5863 = r5860/r5862;
  float r5864 = floor(r5863);
  float r5865 = r5862*r5864;
  float r5866 = r5860-r5865;
  float r5867 = r5866+r5739;
  float r5868=r5867;
  float r5869 = 43758.5453123;
  float r5870 = r5868*r5869;
  float r5871=r5870;
  float r5872 = 1.0;
  float r5873=r5872;
  float r5874 = r5871/r5873;
  float r5875 = floor(r5874);
  float r5876 = r5873*r5875;
  float r5877 = r5871-r5876;
  float r5878 = 78.233;
  float r5879 = r5868*r5878;
  float r5880 = r5877+r5879;
  float r5881=r5880;
  float r5882 = 1.0;
  float r5883=r5882;
  float r5884 = r5881/r5883;
  float r5885 = floor(r5884);
  float r5886 = r5883*r5885;
  float r5887 = r5881-r5886;
  float r5888=r5887;
  float r5889 = 43758.5453123;
  float r5890 = r5888*r5889;
  float r5891=r5890;
  float r5892 = 1.0;
  float r5893=r5892;
  float r5894 = r5891/r5893;
  float r5895 = floor(r5894);
  float r5896 = r5893*r5895;
  float r5897 = r5891-r5896;
  float r5898 = 78.233;
  float r5899 = r5888*r5898;
  float r5900 = r5897+r5899;
  float r5901=r5900;
  float r5902 = 1.0;
  float r5903=r5902;
  float r5904 = r5901/r5903;
  float r5905 = floor(r5904);
  float r5906 = r5903*r5905;
  float r5907 = r5901-r5906;
  float r5908=r5743;
  float r5909 = 43758.5453123;
  float r5910 = r5908*r5909;
  float r5911=r5910;
  float r5912 = 1.0;
  float r5913=r5912;
  float r5914 = r5911/r5913;
  float r5915 = floor(r5914);
  float r5916 = r5913*r5915;
  float r5917 = r5911-r5916;
  float r5918 = 78.233;
  float r5919 = r5908*r5918;
  float r5920 = r5917+r5919;
  float r5921=r5920;
  float r5922 = 1.0;
  float r5923=r5922;
  float r5924 = r5921/r5923;
  float r5925 = floor(r5924);
  float r5926 = r5923*r5925;
  float r5927 = r5921-r5926;
  float r5928 = r5927+r5739;
  float r5929=r5928;
  float r5930 = 43758.5453123;
  float r5931 = r5929*r5930;
  float r5932=r5931;
  float r5933 = 1.0;
  float r5934=r5933;
  float r5935 = r5932/r5934;
  float r5936 = floor(r5935);
  float r5937 = r5934*r5936;
  float r5938 = r5932-r5937;
  float r5939 = 78.233;
  float r5940 = r5929*r5939;
  float r5941 = r5938+r5940;
  float r5942=r5941;
  float r5943 = 1.0;
  float r5944=r5943;
  float r5945 = r5942/r5944;
  float r5946 = floor(r5945);
  float r5947 = r5944*r5946;
  float r5948 = r5942-r5947;
  float r5949 = r5948+r5740;
  float r5950=r5949;
  float r5951 = 43758.5453123;
  float r5952 = r5950*r5951;
  float r5953=r5952;
  float r5954 = 1.0;
  float r5955=r5954;
  float r5956 = r5953/r5955;
  float r5957 = floor(r5956);
  float r5958 = r5955*r5957;
  float r5959 = r5953-r5958;
  float r5960 = 78.233;
  float r5961 = r5950*r5960;
  float r5962 = r5959+r5961;
  float r5963=r5962;
  float r5964 = 1.0;
  float r5965=r5964;
  float r5966 = r5963/r5965;
  float r5967 = floor(r5966);
  float r5968 = r5965*r5967;
  float r5969 = r5963-r5968;
  float r5970=r5969;
  float r5971 = 43758.5453123;
  float r5972 = r5970*r5971;
  float r5973=r5972;
  float r5974 = 1.0;
  float r5975=r5974;
  float r5976 = r5973/r5975;
  float r5977 = floor(r5976);
  float r5978 = r5975*r5977;
  float r5979 = r5973-r5978;
  float r5980 = 78.233;
  float r5981 = r5970*r5980;
  float r5982 = r5979+r5981;
  float r5983=r5982;
  float r5984 = 1.0;
  float r5985=r5984;
  float r5986 = r5983/r5985;
  float r5987 = floor(r5986);
  float r5988 = r5985*r5987;
  float r5989 = r5983-r5988;
  vec3 r5990 = vec3(r5825,r5907,r5989);
  vec3 r5991=r5990;
  float r5992 = 1.0;
  float r5993 = r4395+r5992;
  float r5994=r5993;
  float r5995 = 1.0;
  float r5996 = r4397+r5995;
  float r5997=r5996;
  float r5998 = 1.0;
  float r5999 = r4399+r5998;
  float r6000=r5999;
  float r6001=r5994;
  float r6002 = 43758.5453123;
  float r6003 = r6001*r6002;
  float r6004=r6003;
  float r6005 = 1.0;
  float r6006=r6005;
  float r6007 = r6004/r6006;
  float r6008 = floor(r6007);
  float r6009 = r6006*r6008;
  float r6010 = r6004-r6009;
  float r6011 = 78.233;
  float r6012 = r6001*r6011;
  float r6013 = r6010+r6012;
  float r6014=r6013;
  float r6015 = 1.0;
  float r6016=r6015;
  float r6017 = r6014/r6016;
  float r6018 = floor(r6017);
  float r6019 = r6016*r6018;
  float r6020 = r6014-r6019;
  float r6021 = r6020+r5997;
  float r6022=r6021;
  float r6023 = 43758.5453123;
  float r6024 = r6022*r6023;
  float r6025=r6024;
  float r6026 = 1.0;
  float r6027=r6026;
  float r6028 = r6025/r6027;
  float r6029 = floor(r6028);
  float r6030 = r6027*r6029;
  float r6031 = r6025-r6030;
  float r6032 = 78.233;
  float r6033 = r6022*r6032;
  float r6034 = r6031+r6033;
  float r6035=r6034;
  float r6036 = 1.0;
  float r6037=r6036;
  float r6038 = r6035/r6037;
  float r6039 = floor(r6038);
  float r6040 = r6037*r6039;
  float r6041 = r6035-r6040;
  float r6042 = r6041+r6000;
  float r6043=r6042;
  float r6044 = 43758.5453123;
  float r6045 = r6043*r6044;
  float r6046=r6045;
  float r6047 = 1.0;
  float r6048=r6047;
  float r6049 = r6046/r6048;
  float r6050 = floor(r6049);
  float r6051 = r6048*r6050;
  float r6052 = r6046-r6051;
  float r6053 = 78.233;
  float r6054 = r6043*r6053;
  float r6055 = r6052+r6054;
  float r6056=r6055;
  float r6057 = 1.0;
  float r6058=r6057;
  float r6059 = r6056/r6058;
  float r6060 = floor(r6059);
  float r6061 = r6058*r6060;
  float r6062 = r6056-r6061;
  float r6063=r6062;
  float r6064 = 43758.5453123;
  float r6065 = r6063*r6064;
  float r6066=r6065;
  float r6067 = 1.0;
  float r6068=r6067;
  float r6069 = r6066/r6068;
  float r6070 = floor(r6069);
  float r6071 = r6068*r6070;
  float r6072 = r6066-r6071;
  float r6073 = 78.233;
  float r6074 = r6063*r6073;
  float r6075 = r6072+r6074;
  float r6076=r6075;
  float r6077 = 1.0;
  float r6078=r6077;
  float r6079 = r6076/r6078;
  float r6080 = floor(r6079);
  float r6081 = r6078*r6080;
  float r6082 = r6076-r6081;
  float r6083=r5997;
  float r6084 = 43758.5453123;
  float r6085 = r6083*r6084;
  float r6086=r6085;
  float r6087 = 1.0;
  float r6088=r6087;
  float r6089 = r6086/r6088;
  float r6090 = floor(r6089);
  float r6091 = r6088*r6090;
  float r6092 = r6086-r6091;
  float r6093 = 78.233;
  float r6094 = r6083*r6093;
  float r6095 = r6092+r6094;
  float r6096=r6095;
  float r6097 = 1.0;
  float r6098=r6097;
  float r6099 = r6096/r6098;
  float r6100 = floor(r6099);
  float r6101 = r6098*r6100;
  float r6102 = r6096-r6101;
  float r6103 = r6102+r6000;
  float r6104=r6103;
  float r6105 = 43758.5453123;
  float r6106 = r6104*r6105;
  float r6107=r6106;
  float r6108 = 1.0;
  float r6109=r6108;
  float r6110 = r6107/r6109;
  float r6111 = floor(r6110);
  float r6112 = r6109*r6111;
  float r6113 = r6107-r6112;
  float r6114 = 78.233;
  float r6115 = r6104*r6114;
  float r6116 = r6113+r6115;
  float r6117=r6116;
  float r6118 = 1.0;
  float r6119=r6118;
  float r6120 = r6117/r6119;
  float r6121 = floor(r6120);
  float r6122 = r6119*r6121;
  float r6123 = r6117-r6122;
  float r6124 = r6123+r5994;
  float r6125=r6124;
  float r6126 = 43758.5453123;
  float r6127 = r6125*r6126;
  float r6128=r6127;
  float r6129 = 1.0;
  float r6130=r6129;
  float r6131 = r6128/r6130;
  float r6132 = floor(r6131);
  float r6133 = r6130*r6132;
  float r6134 = r6128-r6133;
  float r6135 = 78.233;
  float r6136 = r6125*r6135;
  float r6137 = r6134+r6136;
  float r6138=r6137;
  float r6139 = 1.0;
  float r6140=r6139;
  float r6141 = r6138/r6140;
  float r6142 = floor(r6141);
  float r6143 = r6140*r6142;
  float r6144 = r6138-r6143;
  float r6145=r6144;
  float r6146 = 43758.5453123;
  float r6147 = r6145*r6146;
  float r6148=r6147;
  float r6149 = 1.0;
  float r6150=r6149;
  float r6151 = r6148/r6150;
  float r6152 = floor(r6151);
  float r6153 = r6150*r6152;
  float r6154 = r6148-r6153;
  float r6155 = 78.233;
  float r6156 = r6145*r6155;
  float r6157 = r6154+r6156;
  float r6158=r6157;
  float r6159 = 1.0;
  float r6160=r6159;
  float r6161 = r6158/r6160;
  float r6162 = floor(r6161);
  float r6163 = r6160*r6162;
  float r6164 = r6158-r6163;
  float r6165=r6000;
  float r6166 = 43758.5453123;
  float r6167 = r6165*r6166;
  float r6168=r6167;
  float r6169 = 1.0;
  float r6170=r6169;
  float r6171 = r6168/r6170;
  float r6172 = floor(r6171);
  float r6173 = r6170*r6172;
  float r6174 = r6168-r6173;
  float r6175 = 78.233;
  float r6176 = r6165*r6175;
  float r6177 = r6174+r6176;
  float r6178=r6177;
  float r6179 = 1.0;
  float r6180=r6179;
  float r6181 = r6178/r6180;
  float r6182 = floor(r6181);
  float r6183 = r6180*r6182;
  float r6184 = r6178-r6183;
  float r6185 = r6184+r5994;
  float r6186=r6185;
  float r6187 = 43758.5453123;
  float r6188 = r6186*r6187;
  float r6189=r6188;
  float r6190 = 1.0;
  float r6191=r6190;
  float r6192 = r6189/r6191;
  float r6193 = floor(r6192);
  float r6194 = r6191*r6193;
  float r6195 = r6189-r6194;
  float r6196 = 78.233;
  float r6197 = r6186*r6196;
  float r6198 = r6195+r6197;
  float r6199=r6198;
  float r6200 = 1.0;
  float r6201=r6200;
  float r6202 = r6199/r6201;
  float r6203 = floor(r6202);
  float r6204 = r6201*r6203;
  float r6205 = r6199-r6204;
  float r6206 = r6205+r5997;
  float r6207=r6206;
  float r6208 = 43758.5453123;
  float r6209 = r6207*r6208;
  float r6210=r6209;
  float r6211 = 1.0;
  float r6212=r6211;
  float r6213 = r6210/r6212;
  float r6214 = floor(r6213);
  float r6215 = r6212*r6214;
  float r6216 = r6210-r6215;
  float r6217 = 78.233;
  float r6218 = r6207*r6217;
  float r6219 = r6216+r6218;
  float r6220=r6219;
  float r6221 = 1.0;
  float r6222=r6221;
  float r6223 = r6220/r6222;
  float r6224 = floor(r6223);
  float r6225 = r6222*r6224;
  float r6226 = r6220-r6225;
  float r6227=r6226;
  float r6228 = 43758.5453123;
  float r6229 = r6227*r6228;
  float r6230=r6229;
  float r6231 = 1.0;
  float r6232=r6231;
  float r6233 = r6230/r6232;
  float r6234 = floor(r6233);
  float r6235 = r6232*r6234;
  float r6236 = r6230-r6235;
  float r6237 = 78.233;
  float r6238 = r6227*r6237;
  float r6239 = r6236+r6238;
  float r6240=r6239;
  float r6241 = 1.0;
  float r6242=r6241;
  float r6243 = r6240/r6242;
  float r6244 = floor(r6243);
  float r6245 = r6242*r6244;
  float r6246 = r6240-r6245;
  vec3 r6247 = vec3(r6082,r6164,r6246);
  vec3 r6248=r6247;
  float r6249=r4395;
  float r6250 = 1.0;
  float r6251 = r4397+r6250;
  float r6252=r6251;
  float r6253 = 1.0;
  float r6254 = r4399+r6253;
  float r6255=r6254;
  float r6256=r6249;
  float r6257 = 43758.5453123;
  float r6258 = r6256*r6257;
  float r6259=r6258;
  float r6260 = 1.0;
  float r6261=r6260;
  float r6262 = r6259/r6261;
  float r6263 = floor(r6262);
  float r6264 = r6261*r6263;
  float r6265 = r6259-r6264;
  float r6266 = 78.233;
  float r6267 = r6256*r6266;
  float r6268 = r6265+r6267;
  float r6269=r6268;
  float r6270 = 1.0;
  float r6271=r6270;
  float r6272 = r6269/r6271;
  float r6273 = floor(r6272);
  float r6274 = r6271*r6273;
  float r6275 = r6269-r6274;
  float r6276 = r6275+r6252;
  float r6277=r6276;
  float r6278 = 43758.5453123;
  float r6279 = r6277*r6278;
  float r6280=r6279;
  float r6281 = 1.0;
  float r6282=r6281;
  float r6283 = r6280/r6282;
  float r6284 = floor(r6283);
  float r6285 = r6282*r6284;
  float r6286 = r6280-r6285;
  float r6287 = 78.233;
  float r6288 = r6277*r6287;
  float r6289 = r6286+r6288;
  float r6290=r6289;
  float r6291 = 1.0;
  float r6292=r6291;
  float r6293 = r6290/r6292;
  float r6294 = floor(r6293);
  float r6295 = r6292*r6294;
  float r6296 = r6290-r6295;
  float r6297 = r6296+r6255;
  float r6298=r6297;
  float r6299 = 43758.5453123;
  float r6300 = r6298*r6299;
  float r6301=r6300;
  float r6302 = 1.0;
  float r6303=r6302;
  float r6304 = r6301/r6303;
  float r6305 = floor(r6304);
  float r6306 = r6303*r6305;
  float r6307 = r6301-r6306;
  float r6308 = 78.233;
  float r6309 = r6298*r6308;
  float r6310 = r6307+r6309;
  float r6311=r6310;
  float r6312 = 1.0;
  float r6313=r6312;
  float r6314 = r6311/r6313;
  float r6315 = floor(r6314);
  float r6316 = r6313*r6315;
  float r6317 = r6311-r6316;
  float r6318=r6317;
  float r6319 = 43758.5453123;
  float r6320 = r6318*r6319;
  float r6321=r6320;
  float r6322 = 1.0;
  float r6323=r6322;
  float r6324 = r6321/r6323;
  float r6325 = floor(r6324);
  float r6326 = r6323*r6325;
  float r6327 = r6321-r6326;
  float r6328 = 78.233;
  float r6329 = r6318*r6328;
  float r6330 = r6327+r6329;
  float r6331=r6330;
  float r6332 = 1.0;
  float r6333=r6332;
  float r6334 = r6331/r6333;
  float r6335 = floor(r6334);
  float r6336 = r6333*r6335;
  float r6337 = r6331-r6336;
  float r6338=r6252;
  float r6339 = 43758.5453123;
  float r6340 = r6338*r6339;
  float r6341=r6340;
  float r6342 = 1.0;
  float r6343=r6342;
  float r6344 = r6341/r6343;
  float r6345 = floor(r6344);
  float r6346 = r6343*r6345;
  float r6347 = r6341-r6346;
  float r6348 = 78.233;
  float r6349 = r6338*r6348;
  float r6350 = r6347+r6349;
  float r6351=r6350;
  float r6352 = 1.0;
  float r6353=r6352;
  float r6354 = r6351/r6353;
  float r6355 = floor(r6354);
  float r6356 = r6353*r6355;
  float r6357 = r6351-r6356;
  float r6358 = r6357+r6255;
  float r6359=r6358;
  float r6360 = 43758.5453123;
  float r6361 = r6359*r6360;
  float r6362=r6361;
  float r6363 = 1.0;
  float r6364=r6363;
  float r6365 = r6362/r6364;
  float r6366 = floor(r6365);
  float r6367 = r6364*r6366;
  float r6368 = r6362-r6367;
  float r6369 = 78.233;
  float r6370 = r6359*r6369;
  float r6371 = r6368+r6370;
  float r6372=r6371;
  float r6373 = 1.0;
  float r6374=r6373;
  float r6375 = r6372/r6374;
  float r6376 = floor(r6375);
  float r6377 = r6374*r6376;
  float r6378 = r6372-r6377;
  float r6379 = r6378+r6249;
  float r6380=r6379;
  float r6381 = 43758.5453123;
  float r6382 = r6380*r6381;
  float r6383=r6382;
  float r6384 = 1.0;
  float r6385=r6384;
  float r6386 = r6383/r6385;
  float r6387 = floor(r6386);
  float r6388 = r6385*r6387;
  float r6389 = r6383-r6388;
  float r6390 = 78.233;
  float r6391 = r6380*r6390;
  float r6392 = r6389+r6391;
  float r6393=r6392;
  float r6394 = 1.0;
  float r6395=r6394;
  float r6396 = r6393/r6395;
  float r6397 = floor(r6396);
  float r6398 = r6395*r6397;
  float r6399 = r6393-r6398;
  float r6400=r6399;
  float r6401 = 43758.5453123;
  float r6402 = r6400*r6401;
  float r6403=r6402;
  float r6404 = 1.0;
  float r6405=r6404;
  float r6406 = r6403/r6405;
  float r6407 = floor(r6406);
  float r6408 = r6405*r6407;
  float r6409 = r6403-r6408;
  float r6410 = 78.233;
  float r6411 = r6400*r6410;
  float r6412 = r6409+r6411;
  float r6413=r6412;
  float r6414 = 1.0;
  float r6415=r6414;
  float r6416 = r6413/r6415;
  float r6417 = floor(r6416);
  float r6418 = r6415*r6417;
  float r6419 = r6413-r6418;
  float r6420=r6255;
  float r6421 = 43758.5453123;
  float r6422 = r6420*r6421;
  float r6423=r6422;
  float r6424 = 1.0;
  float r6425=r6424;
  float r6426 = r6423/r6425;
  float r6427 = floor(r6426);
  float r6428 = r6425*r6427;
  float r6429 = r6423-r6428;
  float r6430 = 78.233;
  float r6431 = r6420*r6430;
  float r6432 = r6429+r6431;
  float r6433=r6432;
  float r6434 = 1.0;
  float r6435=r6434;
  float r6436 = r6433/r6435;
  float r6437 = floor(r6436);
  float r6438 = r6435*r6437;
  float r6439 = r6433-r6438;
  float r6440 = r6439+r6249;
  float r6441=r6440;
  float r6442 = 43758.5453123;
  float r6443 = r6441*r6442;
  float r6444=r6443;
  float r6445 = 1.0;
  float r6446=r6445;
  float r6447 = r6444/r6446;
  float r6448 = floor(r6447);
  float r6449 = r6446*r6448;
  float r6450 = r6444-r6449;
  float r6451 = 78.233;
  float r6452 = r6441*r6451;
  float r6453 = r6450+r6452;
  float r6454=r6453;
  float r6455 = 1.0;
  float r6456=r6455;
  float r6457 = r6454/r6456;
  float r6458 = floor(r6457);
  float r6459 = r6456*r6458;
  float r6460 = r6454-r6459;
  float r6461 = r6460+r6252;
  float r6462=r6461;
  float r6463 = 43758.5453123;
  float r6464 = r6462*r6463;
  float r6465=r6464;
  float r6466 = 1.0;
  float r6467=r6466;
  float r6468 = r6465/r6467;
  float r6469 = floor(r6468);
  float r6470 = r6467*r6469;
  float r6471 = r6465-r6470;
  float r6472 = 78.233;
  float r6473 = r6462*r6472;
  float r6474 = r6471+r6473;
  float r6475=r6474;
  float r6476 = 1.0;
  float r6477=r6476;
  float r6478 = r6475/r6477;
  float r6479 = floor(r6478);
  float r6480 = r6477*r6479;
  float r6481 = r6475-r6480;
  float r6482=r6481;
  float r6483 = 43758.5453123;
  float r6484 = r6482*r6483;
  float r6485=r6484;
  float r6486 = 1.0;
  float r6487=r6486;
  float r6488 = r6485/r6487;
  float r6489 = floor(r6488);
  float r6490 = r6487*r6489;
  float r6491 = r6485-r6490;
  float r6492 = 78.233;
  float r6493 = r6482*r6492;
  float r6494 = r6491+r6493;
  float r6495=r6494;
  float r6496 = 1.0;
  float r6497=r6496;
  float r6498 = r6495/r6497;
  float r6499 = floor(r6498);
  float r6500 = r6497*r6499;
  float r6501 = r6495-r6500;
  vec3 r6502 = vec3(r6337,r6419,r6501);
  vec3 r6503=r6502;
  vec3 r6504=r4722;
  vec3 r6505=r4975;
  float r6506=r4423;
  float r6507 = 1.0;
  float r6508 = r6507-r6506;
  vec3 r6509 = r6504*vec3(r6508,r6508,r6508);
  vec3 r6510 = r6505*vec3(r6506,r6506,r6506);
  vec3 r6511 = r6509+r6510;
  vec3 r6512=r6511;
  vec3 r6513=r5483;
  vec3 r6514=r5230;
  float r6515=r4423;
  float r6516 = 1.0;
  float r6517 = r6516-r6515;
  vec3 r6518 = r6513*vec3(r6517,r6517,r6517);
  vec3 r6519 = r6514*vec3(r6515,r6515,r6515);
  vec3 r6520 = r6518+r6519;
  vec3 r6521=r6520;
  vec3 r6522=r5736;
  vec3 r6523=r5991;
  float r6524=r4423;
  float r6525 = 1.0;
  float r6526 = r6525-r6524;
  vec3 r6527 = r6522*vec3(r6526,r6526,r6526);
  vec3 r6528 = r6523*vec3(r6524,r6524,r6524);
  vec3 r6529 = r6527+r6528;
  vec3 r6530=r6529;
  vec3 r6531=r6503;
  vec3 r6532=r6248;
  float r6533=r4423;
  float r6534 = 1.0;
  float r6535 = r6534-r6533;
  vec3 r6536 = r6531*vec3(r6535,r6535,r6535);
  vec3 r6537 = r6532*vec3(r6533,r6533,r6533);
  vec3 r6538 = r6536+r6537;
  vec3 r6539=r6538;
  vec3 r6540=r6512;
  vec3 r6541=r6521;
  float r6542=r4447;
  float r6543 = 1.0;
  float r6544 = r6543-r6542;
  vec3 r6545 = r6540*vec3(r6544,r6544,r6544);
  vec3 r6546 = r6541*vec3(r6542,r6542,r6542);
  vec3 r6547 = r6545+r6546;
  vec3 r6548=r6547;
  vec3 r6549=r6530;
  vec3 r6550=r6539;
  float r6551=r4447;
  float r6552 = 1.0;
  float r6553 = r6552-r6551;
  vec3 r6554 = r6549*vec3(r6553,r6553,r6553);
  vec3 r6555 = r6550*vec3(r6551,r6551,r6551);
  vec3 r6556 = r6554+r6555;
  vec3 r6557=r6556;
  vec3 r6558=r6548;
  vec3 r6559=r6557;
  float r6560=r4471;
  float r6561 = 1.0;
  float r6562 = r6561-r6560;
  vec3 r6563 = r6558*vec3(r6562,r6562,r6562);
  vec3 r6564 = r6559*vec3(r6560,r6560,r6560);
  vec3 r6565 = r6563+r6564;
  vec3 r6566=r6565;
  float r6567 = r6566.z;
  float r6568 = 0.25;
  float r6569 = r6567*r6568;
  vec3 r6570 = vec3(r2201,r4385,r6569);
  vec3 r6571 = r19-r6570;
  float r6572 = 0.0;
  float r6573=r6572;
  float r6574 = 0.0;
  float r6575=r6574;
  float r6576 = r15.z;
  float r6577 = 2.0;
  float r6578 = r6576*r6577;
  float r6579=r6578;
  float r6580 = floor(r6573);
  float r6581=r6580;
  float r6582 = floor(r6575);
  float r6583=r6582;
  float r6584 = floor(r6579);
  float r6585=r6584;
  float r6586 = 0.0;
  float r6587=r6586;
  float r6588 = 1.0;
  float r6589=r6588;
  float r6590 = r6573-r6581;
  float r6591=r6590;
  float r6592 = r6591-r6587;
  float r6593 = r6589-r6587;
  float r6594 = r6592/r6593;
  float r6595=r6594;
  float r6596 = 0.0;
  float r6597=r6596;
  float r6598 = 1.0;
  float r6599=r6598;
  float r6600 = max(r6595,r6597);
  float r6601 = min(r6600,r6599);
  float r6602=r6601;
  float r6603 = r6602*r6602;
  float r6604 = 3.0;
  float r6605 = 2.0;
  float r6606 = r6605*r6602;
  float r6607 = r6604-r6606;
  float r6608 = r6603*r6607;
  float r6609=r6608;
  float r6610 = 0.0;
  float r6611=r6610;
  float r6612 = 1.0;
  float r6613=r6612;
  float r6614 = r6575-r6583;
  float r6615=r6614;
  float r6616 = r6615-r6611;
  float r6617 = r6613-r6611;
  float r6618 = r6616/r6617;
  float r6619=r6618;
  float r6620 = 0.0;
  float r6621=r6620;
  float r6622 = 1.0;
  float r6623=r6622;
  float r6624 = max(r6619,r6621);
  float r6625 = min(r6624,r6623);
  float r6626=r6625;
  float r6627 = r6626*r6626;
  float r6628 = 3.0;
  float r6629 = 2.0;
  float r6630 = r6629*r6626;
  float r6631 = r6628-r6630;
  float r6632 = r6627*r6631;
  float r6633=r6632;
  float r6634 = 0.0;
  float r6635=r6634;
  float r6636 = 1.0;
  float r6637=r6636;
  float r6638 = r6579-r6585;
  float r6639=r6638;
  float r6640 = r6639-r6635;
  float r6641 = r6637-r6635;
  float r6642 = r6640/r6641;
  float r6643=r6642;
  float r6644 = 0.0;
  float r6645=r6644;
  float r6646 = 1.0;
  float r6647=r6646;
  float r6648 = max(r6643,r6645);
  float r6649 = min(r6648,r6647);
  float r6650=r6649;
  float r6651 = r6650*r6650;
  float r6652 = 3.0;
  float r6653 = 2.0;
  float r6654 = r6653*r6650;
  float r6655 = r6652-r6654;
  float r6656 = r6651*r6655;
  float r6657=r6656;
  float r6658=r6581;
  float r6659=r6583;
  float r6660=r6585;
  float r6661=r6658;
  float r6662 = 43758.5453123;
  float r6663 = r6661*r6662;
  float r6664=r6663;
  float r6665 = 1.0;
  float r6666=r6665;
  float r6667 = r6664/r6666;
  float r6668 = floor(r6667);
  float r6669 = r6666*r6668;
  float r6670 = r6664-r6669;
  float r6671 = 78.233;
  float r6672 = r6661*r6671;
  float r6673 = r6670+r6672;
  float r6674=r6673;
  float r6675 = 1.0;
  float r6676=r6675;
  float r6677 = r6674/r6676;
  float r6678 = floor(r6677);
  float r6679 = r6676*r6678;
  float r6680 = r6674-r6679;
  float r6681 = r6680+r6659;
  float r6682=r6681;
  float r6683 = 43758.5453123;
  float r6684 = r6682*r6683;
  float r6685=r6684;
  float r6686 = 1.0;
  float r6687=r6686;
  float r6688 = r6685/r6687;
  float r6689 = floor(r6688);
  float r6690 = r6687*r6689;
  float r6691 = r6685-r6690;
  float r6692 = 78.233;
  float r6693 = r6682*r6692;
  float r6694 = r6691+r6693;
  float r6695=r6694;
  float r6696 = 1.0;
  float r6697=r6696;
  float r6698 = r6695/r6697;
  float r6699 = floor(r6698);
  float r6700 = r6697*r6699;
  float r6701 = r6695-r6700;
  float r6702 = r6701+r6660;
  float r6703=r6702;
  float r6704 = 43758.5453123;
  float r6705 = r6703*r6704;
  float r6706=r6705;
  float r6707 = 1.0;
  float r6708=r6707;
  float r6709 = r6706/r6708;
  float r6710 = floor(r6709);
  float r6711 = r6708*r6710;
  float r6712 = r6706-r6711;
  float r6713 = 78.233;
  float r6714 = r6703*r6713;
  float r6715 = r6712+r6714;
  float r6716=r6715;
  float r6717 = 1.0;
  float r6718=r6717;
  float r6719 = r6716/r6718;
  float r6720 = floor(r6719);
  float r6721 = r6718*r6720;
  float r6722 = r6716-r6721;
  float r6723=r6722;
  float r6724 = 43758.5453123;
  float r6725 = r6723*r6724;
  float r6726=r6725;
  float r6727 = 1.0;
  float r6728=r6727;
  float r6729 = r6726/r6728;
  float r6730 = floor(r6729);
  float r6731 = r6728*r6730;
  float r6732 = r6726-r6731;
  float r6733 = 78.233;
  float r6734 = r6723*r6733;
  float r6735 = r6732+r6734;
  float r6736=r6735;
  float r6737 = 1.0;
  float r6738=r6737;
  float r6739 = r6736/r6738;
  float r6740 = floor(r6739);
  float r6741 = r6738*r6740;
  float r6742 = r6736-r6741;
  float r6743=r6659;
  float r6744 = 43758.5453123;
  float r6745 = r6743*r6744;
  float r6746=r6745;
  float r6747 = 1.0;
  float r6748=r6747;
  float r6749 = r6746/r6748;
  float r6750 = floor(r6749);
  float r6751 = r6748*r6750;
  float r6752 = r6746-r6751;
  float r6753 = 78.233;
  float r6754 = r6743*r6753;
  float r6755 = r6752+r6754;
  float r6756=r6755;
  float r6757 = 1.0;
  float r6758=r6757;
  float r6759 = r6756/r6758;
  float r6760 = floor(r6759);
  float r6761 = r6758*r6760;
  float r6762 = r6756-r6761;
  float r6763 = r6762+r6660;
  float r6764=r6763;
  float r6765 = 43758.5453123;
  float r6766 = r6764*r6765;
  float r6767=r6766;
  float r6768 = 1.0;
  float r6769=r6768;
  float r6770 = r6767/r6769;
  float r6771 = floor(r6770);
  float r6772 = r6769*r6771;
  float r6773 = r6767-r6772;
  float r6774 = 78.233;
  float r6775 = r6764*r6774;
  float r6776 = r6773+r6775;
  float r6777=r6776;
  float r6778 = 1.0;
  float r6779=r6778;
  float r6780 = r6777/r6779;
  float r6781 = floor(r6780);
  float r6782 = r6779*r6781;
  float r6783 = r6777-r6782;
  float r6784 = r6783+r6658;
  float r6785=r6784;
  float r6786 = 43758.5453123;
  float r6787 = r6785*r6786;
  float r6788=r6787;
  float r6789 = 1.0;
  float r6790=r6789;
  float r6791 = r6788/r6790;
  float r6792 = floor(r6791);
  float r6793 = r6790*r6792;
  float r6794 = r6788-r6793;
  float r6795 = 78.233;
  float r6796 = r6785*r6795;
  float r6797 = r6794+r6796;
  float r6798=r6797;
  float r6799 = 1.0;
  float r6800=r6799;
  float r6801 = r6798/r6800;
  float r6802 = floor(r6801);
  float r6803 = r6800*r6802;
  float r6804 = r6798-r6803;
  float r6805=r6804;
  float r6806 = 43758.5453123;
  float r6807 = r6805*r6806;
  float r6808=r6807;
  float r6809 = 1.0;
  float r6810=r6809;
  float r6811 = r6808/r6810;
  float r6812 = floor(r6811);
  float r6813 = r6810*r6812;
  float r6814 = r6808-r6813;
  float r6815 = 78.233;
  float r6816 = r6805*r6815;
  float r6817 = r6814+r6816;
  float r6818=r6817;
  float r6819 = 1.0;
  float r6820=r6819;
  float r6821 = r6818/r6820;
  float r6822 = floor(r6821);
  float r6823 = r6820*r6822;
  float r6824 = r6818-r6823;
  float r6825=r6660;
  float r6826 = 43758.5453123;
  float r6827 = r6825*r6826;
  float r6828=r6827;
  float r6829 = 1.0;
  float r6830=r6829;
  float r6831 = r6828/r6830;
  float r6832 = floor(r6831);
  float r6833 = r6830*r6832;
  float r6834 = r6828-r6833;
  float r6835 = 78.233;
  float r6836 = r6825*r6835;
  float r6837 = r6834+r6836;
  float r6838=r6837;
  float r6839 = 1.0;
  float r6840=r6839;
  float r6841 = r6838/r6840;
  float r6842 = floor(r6841);
  float r6843 = r6840*r6842;
  float r6844 = r6838-r6843;
  float r6845 = r6844+r6658;
  float r6846=r6845;
  float r6847 = 43758.5453123;
  float r6848 = r6846*r6847;
  float r6849=r6848;
  float r6850 = 1.0;
  float r6851=r6850;
  float r6852 = r6849/r6851;
  float r6853 = floor(r6852);
  float r6854 = r6851*r6853;
  float r6855 = r6849-r6854;
  float r6856 = 78.233;
  float r6857 = r6846*r6856;
  float r6858 = r6855+r6857;
  float r6859=r6858;
  float r6860 = 1.0;
  float r6861=r6860;
  float r6862 = r6859/r6861;
  float r6863 = floor(r6862);
  float r6864 = r6861*r6863;
  float r6865 = r6859-r6864;
  float r6866 = r6865+r6659;
  float r6867=r6866;
  float r6868 = 43758.5453123;
  float r6869 = r6867*r6868;
  float r6870=r6869;
  float r6871 = 1.0;
  float r6872=r6871;
  float r6873 = r6870/r6872;
  float r6874 = floor(r6873);
  float r6875 = r6872*r6874;
  float r6876 = r6870-r6875;
  float r6877 = 78.233;
  float r6878 = r6867*r6877;
  float r6879 = r6876+r6878;
  float r6880=r6879;
  float r6881 = 1.0;
  float r6882=r6881;
  float r6883 = r6880/r6882;
  float r6884 = floor(r6883);
  float r6885 = r6882*r6884;
  float r6886 = r6880-r6885;
  float r6887=r6886;
  float r6888 = 43758.5453123;
  float r6889 = r6887*r6888;
  float r6890=r6889;
  float r6891 = 1.0;
  float r6892=r6891;
  float r6893 = r6890/r6892;
  float r6894 = floor(r6893);
  float r6895 = r6892*r6894;
  float r6896 = r6890-r6895;
  float r6897 = 78.233;
  float r6898 = r6887*r6897;
  float r6899 = r6896+r6898;
  float r6900=r6899;
  float r6901 = 1.0;
  float r6902=r6901;
  float r6903 = r6900/r6902;
  float r6904 = floor(r6903);
  float r6905 = r6902*r6904;
  float r6906 = r6900-r6905;
  vec3 r6907 = vec3(r6742,r6824,r6906);
  vec3 r6908=r6907;
  float r6909 = 1.0;
  float r6910 = r6581+r6909;
  float r6911=r6910;
  float r6912=r6583;
  float r6913=r6585;
  float r6914=r6911;
  float r6915 = 43758.5453123;
  float r6916 = r6914*r6915;
  float r6917=r6916;
  float r6918 = 1.0;
  float r6919=r6918;
  float r6920 = r6917/r6919;
  float r6921 = floor(r6920);
  float r6922 = r6919*r6921;
  float r6923 = r6917-r6922;
  float r6924 = 78.233;
  float r6925 = r6914*r6924;
  float r6926 = r6923+r6925;
  float r6927=r6926;
  float r6928 = 1.0;
  float r6929=r6928;
  float r6930 = r6927/r6929;
  float r6931 = floor(r6930);
  float r6932 = r6929*r6931;
  float r6933 = r6927-r6932;
  float r6934 = r6933+r6912;
  float r6935=r6934;
  float r6936 = 43758.5453123;
  float r6937 = r6935*r6936;
  float r6938=r6937;
  float r6939 = 1.0;
  float r6940=r6939;
  float r6941 = r6938/r6940;
  float r6942 = floor(r6941);
  float r6943 = r6940*r6942;
  float r6944 = r6938-r6943;
  float r6945 = 78.233;
  float r6946 = r6935*r6945;
  float r6947 = r6944+r6946;
  float r6948=r6947;
  float r6949 = 1.0;
  float r6950=r6949;
  float r6951 = r6948/r6950;
  float r6952 = floor(r6951);
  float r6953 = r6950*r6952;
  float r6954 = r6948-r6953;
  float r6955 = r6954+r6913;
  float r6956=r6955;
  float r6957 = 43758.5453123;
  float r6958 = r6956*r6957;
  float r6959=r6958;
  float r6960 = 1.0;
  float r6961=r6960;
  float r6962 = r6959/r6961;
  float r6963 = floor(r6962);
  float r6964 = r6961*r6963;
  float r6965 = r6959-r6964;
  float r6966 = 78.233;
  float r6967 = r6956*r6966;
  float r6968 = r6965+r6967;
  float r6969=r6968;
  float r6970 = 1.0;
  float r6971=r6970;
  float r6972 = r6969/r6971;
  float r6973 = floor(r6972);
  float r6974 = r6971*r6973;
  float r6975 = r6969-r6974;
  float r6976=r6975;
  float r6977 = 43758.5453123;
  float r6978 = r6976*r6977;
  float r6979=r6978;
  float r6980 = 1.0;
  float r6981=r6980;
  float r6982 = r6979/r6981;
  float r6983 = floor(r6982);
  float r6984 = r6981*r6983;
  float r6985 = r6979-r6984;
  float r6986 = 78.233;
  float r6987 = r6976*r6986;
  float r6988 = r6985+r6987;
  float r6989=r6988;
  float r6990 = 1.0;
  float r6991=r6990;
  float r6992 = r6989/r6991;
  float r6993 = floor(r6992);
  float r6994 = r6991*r6993;
  float r6995 = r6989-r6994;
  float r6996=r6912;
  float r6997 = 43758.5453123;
  float r6998 = r6996*r6997;
  float r6999=r6998;
  float r7000 = 1.0;
  float r7001=r7000;
  float r7002 = r6999/r7001;
  float r7003 = floor(r7002);
  float r7004 = r7001*r7003;
  float r7005 = r6999-r7004;
  float r7006 = 78.233;
  float r7007 = r6996*r7006;
  float r7008 = r7005+r7007;
  float r7009=r7008;
  float r7010 = 1.0;
  float r7011=r7010;
  float r7012 = r7009/r7011;
  float r7013 = floor(r7012);
  float r7014 = r7011*r7013;
  float r7015 = r7009-r7014;
  float r7016 = r7015+r6913;
  float r7017=r7016;
  float r7018 = 43758.5453123;
  float r7019 = r7017*r7018;
  float r7020=r7019;
  float r7021 = 1.0;
  float r7022=r7021;
  float r7023 = r7020/r7022;
  float r7024 = floor(r7023);
  float r7025 = r7022*r7024;
  float r7026 = r7020-r7025;
  float r7027 = 78.233;
  float r7028 = r7017*r7027;
  float r7029 = r7026+r7028;
  float r7030=r7029;
  float r7031 = 1.0;
  float r7032=r7031;
  float r7033 = r7030/r7032;
  float r7034 = floor(r7033);
  float r7035 = r7032*r7034;
  float r7036 = r7030-r7035;
  float r7037 = r7036+r6911;
  float r7038=r7037;
  float r7039 = 43758.5453123;
  float r7040 = r7038*r7039;
  float r7041=r7040;
  float r7042 = 1.0;
  float r7043=r7042;
  float r7044 = r7041/r7043;
  float r7045 = floor(r7044);
  float r7046 = r7043*r7045;
  float r7047 = r7041-r7046;
  float r7048 = 78.233;
  float r7049 = r7038*r7048;
  float r7050 = r7047+r7049;
  float r7051=r7050;
  float r7052 = 1.0;
  float r7053=r7052;
  float r7054 = r7051/r7053;
  float r7055 = floor(r7054);
  float r7056 = r7053*r7055;
  float r7057 = r7051-r7056;
  float r7058=r7057;
  float r7059 = 43758.5453123;
  float r7060 = r7058*r7059;
  float r7061=r7060;
  float r7062 = 1.0;
  float r7063=r7062;
  float r7064 = r7061/r7063;
  float r7065 = floor(r7064);
  float r7066 = r7063*r7065;
  float r7067 = r7061-r7066;
  float r7068 = 78.233;
  float r7069 = r7058*r7068;
  float r7070 = r7067+r7069;
  float r7071=r7070;
  float r7072 = 1.0;
  float r7073=r7072;
  float r7074 = r7071/r7073;
  float r7075 = floor(r7074);
  float r7076 = r7073*r7075;
  float r7077 = r7071-r7076;
  float r7078=r6913;
  float r7079 = 43758.5453123;
  float r7080 = r7078*r7079;
  float r7081=r7080;
  float r7082 = 1.0;
  float r7083=r7082;
  float r7084 = r7081/r7083;
  float r7085 = floor(r7084);
  float r7086 = r7083*r7085;
  float r7087 = r7081-r7086;
  float r7088 = 78.233;
  float r7089 = r7078*r7088;
  float r7090 = r7087+r7089;
  float r7091=r7090;
  float r7092 = 1.0;
  float r7093=r7092;
  float r7094 = r7091/r7093;
  float r7095 = floor(r7094);
  float r7096 = r7093*r7095;
  float r7097 = r7091-r7096;
  float r7098 = r7097+r6911;
  float r7099=r7098;
  float r7100 = 43758.5453123;
  float r7101 = r7099*r7100;
  float r7102=r7101;
  float r7103 = 1.0;
  float r7104=r7103;
  float r7105 = r7102/r7104;
  float r7106 = floor(r7105);
  float r7107 = r7104*r7106;
  float r7108 = r7102-r7107;
  float r7109 = 78.233;
  float r7110 = r7099*r7109;
  float r7111 = r7108+r7110;
  float r7112=r7111;
  float r7113 = 1.0;
  float r7114=r7113;
  float r7115 = r7112/r7114;
  float r7116 = floor(r7115);
  float r7117 = r7114*r7116;
  float r7118 = r7112-r7117;
  float r7119 = r7118+r6912;
  float r7120=r7119;
  float r7121 = 43758.5453123;
  float r7122 = r7120*r7121;
  float r7123=r7122;
  float r7124 = 1.0;
  float r7125=r7124;
  float r7126 = r7123/r7125;
  float r7127 = floor(r7126);
  float r7128 = r7125*r7127;
  float r7129 = r7123-r7128;
  float r7130 = 78.233;
  float r7131 = r7120*r7130;
  float r7132 = r7129+r7131;
  float r7133=r7132;
  float r7134 = 1.0;
  float r7135=r7134;
  float r7136 = r7133/r7135;
  float r7137 = floor(r7136);
  float r7138 = r7135*r7137;
  float r7139 = r7133-r7138;
  float r7140=r7139;
  float r7141 = 43758.5453123;
  float r7142 = r7140*r7141;
  float r7143=r7142;
  float r7144 = 1.0;
  float r7145=r7144;
  float r7146 = r7143/r7145;
  float r7147 = floor(r7146);
  float r7148 = r7145*r7147;
  float r7149 = r7143-r7148;
  float r7150 = 78.233;
  float r7151 = r7140*r7150;
  float r7152 = r7149+r7151;
  float r7153=r7152;
  float r7154 = 1.0;
  float r7155=r7154;
  float r7156 = r7153/r7155;
  float r7157 = floor(r7156);
  float r7158 = r7155*r7157;
  float r7159 = r7153-r7158;
  vec3 r7160 = vec3(r6995,r7077,r7159);
  vec3 r7161=r7160;
  float r7162 = 1.0;
  float r7163 = r6581+r7162;
  float r7164=r7163;
  float r7165 = 1.0;
  float r7166 = r6583+r7165;
  float r7167=r7166;
  float r7168=r6585;
  float r7169=r7164;
  float r7170 = 43758.5453123;
  float r7171 = r7169*r7170;
  float r7172=r7171;
  float r7173 = 1.0;
  float r7174=r7173;
  float r7175 = r7172/r7174;
  float r7176 = floor(r7175);
  float r7177 = r7174*r7176;
  float r7178 = r7172-r7177;
  float r7179 = 78.233;
  float r7180 = r7169*r7179;
  float r7181 = r7178+r7180;
  float r7182=r7181;
  float r7183 = 1.0;
  float r7184=r7183;
  float r7185 = r7182/r7184;
  float r7186 = floor(r7185);
  float r7187 = r7184*r7186;
  float r7188 = r7182-r7187;
  float r7189 = r7188+r7167;
  float r7190=r7189;
  float r7191 = 43758.5453123;
  float r7192 = r7190*r7191;
  float r7193=r7192;
  float r7194 = 1.0;
  float r7195=r7194;
  float r7196 = r7193/r7195;
  float r7197 = floor(r7196);
  float r7198 = r7195*r7197;
  float r7199 = r7193-r7198;
  float r7200 = 78.233;
  float r7201 = r7190*r7200;
  float r7202 = r7199+r7201;
  float r7203=r7202;
  float r7204 = 1.0;
  float r7205=r7204;
  float r7206 = r7203/r7205;
  float r7207 = floor(r7206);
  float r7208 = r7205*r7207;
  float r7209 = r7203-r7208;
  float r7210 = r7209+r7168;
  float r7211=r7210;
  float r7212 = 43758.5453123;
  float r7213 = r7211*r7212;
  float r7214=r7213;
  float r7215 = 1.0;
  float r7216=r7215;
  float r7217 = r7214/r7216;
  float r7218 = floor(r7217);
  float r7219 = r7216*r7218;
  float r7220 = r7214-r7219;
  float r7221 = 78.233;
  float r7222 = r7211*r7221;
  float r7223 = r7220+r7222;
  float r7224=r7223;
  float r7225 = 1.0;
  float r7226=r7225;
  float r7227 = r7224/r7226;
  float r7228 = floor(r7227);
  float r7229 = r7226*r7228;
  float r7230 = r7224-r7229;
  float r7231=r7230;
  float r7232 = 43758.5453123;
  float r7233 = r7231*r7232;
  float r7234=r7233;
  float r7235 = 1.0;
  float r7236=r7235;
  float r7237 = r7234/r7236;
  float r7238 = floor(r7237);
  float r7239 = r7236*r7238;
  float r7240 = r7234-r7239;
  float r7241 = 78.233;
  float r7242 = r7231*r7241;
  float r7243 = r7240+r7242;
  float r7244=r7243;
  float r7245 = 1.0;
  float r7246=r7245;
  float r7247 = r7244/r7246;
  float r7248 = floor(r7247);
  float r7249 = r7246*r7248;
  float r7250 = r7244-r7249;
  float r7251=r7167;
  float r7252 = 43758.5453123;
  float r7253 = r7251*r7252;
  float r7254=r7253;
  float r7255 = 1.0;
  float r7256=r7255;
  float r7257 = r7254/r7256;
  float r7258 = floor(r7257);
  float r7259 = r7256*r7258;
  float r7260 = r7254-r7259;
  float r7261 = 78.233;
  float r7262 = r7251*r7261;
  float r7263 = r7260+r7262;
  float r7264=r7263;
  float r7265 = 1.0;
  float r7266=r7265;
  float r7267 = r7264/r7266;
  float r7268 = floor(r7267);
  float r7269 = r7266*r7268;
  float r7270 = r7264-r7269;
  float r7271 = r7270+r7168;
  float r7272=r7271;
  float r7273 = 43758.5453123;
  float r7274 = r7272*r7273;
  float r7275=r7274;
  float r7276 = 1.0;
  float r7277=r7276;
  float r7278 = r7275/r7277;
  float r7279 = floor(r7278);
  float r7280 = r7277*r7279;
  float r7281 = r7275-r7280;
  float r7282 = 78.233;
  float r7283 = r7272*r7282;
  float r7284 = r7281+r7283;
  float r7285=r7284;
  float r7286 = 1.0;
  float r7287=r7286;
  float r7288 = r7285/r7287;
  float r7289 = floor(r7288);
  float r7290 = r7287*r7289;
  float r7291 = r7285-r7290;
  float r7292 = r7291+r7164;
  float r7293=r7292;
  float r7294 = 43758.5453123;
  float r7295 = r7293*r7294;
  float r7296=r7295;
  float r7297 = 1.0;
  float r7298=r7297;
  float r7299 = r7296/r7298;
  float r7300 = floor(r7299);
  float r7301 = r7298*r7300;
  float r7302 = r7296-r7301;
  float r7303 = 78.233;
  float r7304 = r7293*r7303;
  float r7305 = r7302+r7304;
  float r7306=r7305;
  float r7307 = 1.0;
  float r7308=r7307;
  float r7309 = r7306/r7308;
  float r7310 = floor(r7309);
  float r7311 = r7308*r7310;
  float r7312 = r7306-r7311;
  float r7313=r7312;
  float r7314 = 43758.5453123;
  float r7315 = r7313*r7314;
  float r7316=r7315;
  float r7317 = 1.0;
  float r7318=r7317;
  float r7319 = r7316/r7318;
  float r7320 = floor(r7319);
  float r7321 = r7318*r7320;
  float r7322 = r7316-r7321;
  float r7323 = 78.233;
  float r7324 = r7313*r7323;
  float r7325 = r7322+r7324;
  float r7326=r7325;
  float r7327 = 1.0;
  float r7328=r7327;
  float r7329 = r7326/r7328;
  float r7330 = floor(r7329);
  float r7331 = r7328*r7330;
  float r7332 = r7326-r7331;
  float r7333=r7168;
  float r7334 = 43758.5453123;
  float r7335 = r7333*r7334;
  float r7336=r7335;
  float r7337 = 1.0;
  float r7338=r7337;
  float r7339 = r7336/r7338;
  float r7340 = floor(r7339);
  float r7341 = r7338*r7340;
  float r7342 = r7336-r7341;
  float r7343 = 78.233;
  float r7344 = r7333*r7343;
  float r7345 = r7342+r7344;
  float r7346=r7345;
  float r7347 = 1.0;
  float r7348=r7347;
  float r7349 = r7346/r7348;
  float r7350 = floor(r7349);
  float r7351 = r7348*r7350;
  float r7352 = r7346-r7351;
  float r7353 = r7352+r7164;
  float r7354=r7353;
  float r7355 = 43758.5453123;
  float r7356 = r7354*r7355;
  float r7357=r7356;
  float r7358 = 1.0;
  float r7359=r7358;
  float r7360 = r7357/r7359;
  float r7361 = floor(r7360);
  float r7362 = r7359*r7361;
  float r7363 = r7357-r7362;
  float r7364 = 78.233;
  float r7365 = r7354*r7364;
  float r7366 = r7363+r7365;
  float r7367=r7366;
  float r7368 = 1.0;
  float r7369=r7368;
  float r7370 = r7367/r7369;
  float r7371 = floor(r7370);
  float r7372 = r7369*r7371;
  float r7373 = r7367-r7372;
  float r7374 = r7373+r7167;
  float r7375=r7374;
  float r7376 = 43758.5453123;
  float r7377 = r7375*r7376;
  float r7378=r7377;
  float r7379 = 1.0;
  float r7380=r7379;
  float r7381 = r7378/r7380;
  float r7382 = floor(r7381);
  float r7383 = r7380*r7382;
  float r7384 = r7378-r7383;
  float r7385 = 78.233;
  float r7386 = r7375*r7385;
  float r7387 = r7384+r7386;
  float r7388=r7387;
  float r7389 = 1.0;
  float r7390=r7389;
  float r7391 = r7388/r7390;
  float r7392 = floor(r7391);
  float r7393 = r7390*r7392;
  float r7394 = r7388-r7393;
  float r7395=r7394;
  float r7396 = 43758.5453123;
  float r7397 = r7395*r7396;
  float r7398=r7397;
  float r7399 = 1.0;
  float r7400=r7399;
  float r7401 = r7398/r7400;
  float r7402 = floor(r7401);
  float r7403 = r7400*r7402;
  float r7404 = r7398-r7403;
  float r7405 = 78.233;
  float r7406 = r7395*r7405;
  float r7407 = r7404+r7406;
  float r7408=r7407;
  float r7409 = 1.0;
  float r7410=r7409;
  float r7411 = r7408/r7410;
  float r7412 = floor(r7411);
  float r7413 = r7410*r7412;
  float r7414 = r7408-r7413;
  vec3 r7415 = vec3(r7250,r7332,r7414);
  vec3 r7416=r7415;
  float r7417=r6581;
  float r7418 = 1.0;
  float r7419 = r6583+r7418;
  float r7420=r7419;
  float r7421=r6585;
  float r7422=r7417;
  float r7423 = 43758.5453123;
  float r7424 = r7422*r7423;
  float r7425=r7424;
  float r7426 = 1.0;
  float r7427=r7426;
  float r7428 = r7425/r7427;
  float r7429 = floor(r7428);
  float r7430 = r7427*r7429;
  float r7431 = r7425-r7430;
  float r7432 = 78.233;
  float r7433 = r7422*r7432;
  float r7434 = r7431+r7433;
  float r7435=r7434;
  float r7436 = 1.0;
  float r7437=r7436;
  float r7438 = r7435/r7437;
  float r7439 = floor(r7438);
  float r7440 = r7437*r7439;
  float r7441 = r7435-r7440;
  float r7442 = r7441+r7420;
  float r7443=r7442;
  float r7444 = 43758.5453123;
  float r7445 = r7443*r7444;
  float r7446=r7445;
  float r7447 = 1.0;
  float r7448=r7447;
  float r7449 = r7446/r7448;
  float r7450 = floor(r7449);
  float r7451 = r7448*r7450;
  float r7452 = r7446-r7451;
  float r7453 = 78.233;
  float r7454 = r7443*r7453;
  float r7455 = r7452+r7454;
  float r7456=r7455;
  float r7457 = 1.0;
  float r7458=r7457;
  float r7459 = r7456/r7458;
  float r7460 = floor(r7459);
  float r7461 = r7458*r7460;
  float r7462 = r7456-r7461;
  float r7463 = r7462+r7421;
  float r7464=r7463;
  float r7465 = 43758.5453123;
  float r7466 = r7464*r7465;
  float r7467=r7466;
  float r7468 = 1.0;
  float r7469=r7468;
  float r7470 = r7467/r7469;
  float r7471 = floor(r7470);
  float r7472 = r7469*r7471;
  float r7473 = r7467-r7472;
  float r7474 = 78.233;
  float r7475 = r7464*r7474;
  float r7476 = r7473+r7475;
  float r7477=r7476;
  float r7478 = 1.0;
  float r7479=r7478;
  float r7480 = r7477/r7479;
  float r7481 = floor(r7480);
  float r7482 = r7479*r7481;
  float r7483 = r7477-r7482;
  float r7484=r7483;
  float r7485 = 43758.5453123;
  float r7486 = r7484*r7485;
  float r7487=r7486;
  float r7488 = 1.0;
  float r7489=r7488;
  float r7490 = r7487/r7489;
  float r7491 = floor(r7490);
  float r7492 = r7489*r7491;
  float r7493 = r7487-r7492;
  float r7494 = 78.233;
  float r7495 = r7484*r7494;
  float r7496 = r7493+r7495;
  float r7497=r7496;
  float r7498 = 1.0;
  float r7499=r7498;
  float r7500 = r7497/r7499;
  float r7501 = floor(r7500);
  float r7502 = r7499*r7501;
  float r7503 = r7497-r7502;
  float r7504=r7420;
  float r7505 = 43758.5453123;
  float r7506 = r7504*r7505;
  float r7507=r7506;
  float r7508 = 1.0;
  float r7509=r7508;
  float r7510 = r7507/r7509;
  float r7511 = floor(r7510);
  float r7512 = r7509*r7511;
  float r7513 = r7507-r7512;
  float r7514 = 78.233;
  float r7515 = r7504*r7514;
  float r7516 = r7513+r7515;
  float r7517=r7516;
  float r7518 = 1.0;
  float r7519=r7518;
  float r7520 = r7517/r7519;
  float r7521 = floor(r7520);
  float r7522 = r7519*r7521;
  float r7523 = r7517-r7522;
  float r7524 = r7523+r7421;
  float r7525=r7524;
  float r7526 = 43758.5453123;
  float r7527 = r7525*r7526;
  float r7528=r7527;
  float r7529 = 1.0;
  float r7530=r7529;
  float r7531 = r7528/r7530;
  float r7532 = floor(r7531);
  float r7533 = r7530*r7532;
  float r7534 = r7528-r7533;
  float r7535 = 78.233;
  float r7536 = r7525*r7535;
  float r7537 = r7534+r7536;
  float r7538=r7537;
  float r7539 = 1.0;
  float r7540=r7539;
  float r7541 = r7538/r7540;
  float r7542 = floor(r7541);
  float r7543 = r7540*r7542;
  float r7544 = r7538-r7543;
  float r7545 = r7544+r7417;
  float r7546=r7545;
  float r7547 = 43758.5453123;
  float r7548 = r7546*r7547;
  float r7549=r7548;
  float r7550 = 1.0;
  float r7551=r7550;
  float r7552 = r7549/r7551;
  float r7553 = floor(r7552);
  float r7554 = r7551*r7553;
  float r7555 = r7549-r7554;
  float r7556 = 78.233;
  float r7557 = r7546*r7556;
  float r7558 = r7555+r7557;
  float r7559=r7558;
  float r7560 = 1.0;
  float r7561=r7560;
  float r7562 = r7559/r7561;
  float r7563 = floor(r7562);
  float r7564 = r7561*r7563;
  float r7565 = r7559-r7564;
  float r7566=r7565;
  float r7567 = 43758.5453123;
  float r7568 = r7566*r7567;
  float r7569=r7568;
  float r7570 = 1.0;
  float r7571=r7570;
  float r7572 = r7569/r7571;
  float r7573 = floor(r7572);
  float r7574 = r7571*r7573;
  float r7575 = r7569-r7574;
  float r7576 = 78.233;
  float r7577 = r7566*r7576;
  float r7578 = r7575+r7577;
  float r7579=r7578;
  float r7580 = 1.0;
  float r7581=r7580;
  float r7582 = r7579/r7581;
  float r7583 = floor(r7582);
  float r7584 = r7581*r7583;
  float r7585 = r7579-r7584;
  float r7586=r7421;
  float r7587 = 43758.5453123;
  float r7588 = r7586*r7587;
  float r7589=r7588;
  float r7590 = 1.0;
  float r7591=r7590;
  float r7592 = r7589/r7591;
  float r7593 = floor(r7592);
  float r7594 = r7591*r7593;
  float r7595 = r7589-r7594;
  float r7596 = 78.233;
  float r7597 = r7586*r7596;
  float r7598 = r7595+r7597;
  float r7599=r7598;
  float r7600 = 1.0;
  float r7601=r7600;
  float r7602 = r7599/r7601;
  float r7603 = floor(r7602);
  float r7604 = r7601*r7603;
  float r7605 = r7599-r7604;
  float r7606 = r7605+r7417;
  float r7607=r7606;
  float r7608 = 43758.5453123;
  float r7609 = r7607*r7608;
  float r7610=r7609;
  float r7611 = 1.0;
  float r7612=r7611;
  float r7613 = r7610/r7612;
  float r7614 = floor(r7613);
  float r7615 = r7612*r7614;
  float r7616 = r7610-r7615;
  float r7617 = 78.233;
  float r7618 = r7607*r7617;
  float r7619 = r7616+r7618;
  float r7620=r7619;
  float r7621 = 1.0;
  float r7622=r7621;
  float r7623 = r7620/r7622;
  float r7624 = floor(r7623);
  float r7625 = r7622*r7624;
  float r7626 = r7620-r7625;
  float r7627 = r7626+r7420;
  float r7628=r7627;
  float r7629 = 43758.5453123;
  float r7630 = r7628*r7629;
  float r7631=r7630;
  float r7632 = 1.0;
  float r7633=r7632;
  float r7634 = r7631/r7633;
  float r7635 = floor(r7634);
  float r7636 = r7633*r7635;
  float r7637 = r7631-r7636;
  float r7638 = 78.233;
  float r7639 = r7628*r7638;
  float r7640 = r7637+r7639;
  float r7641=r7640;
  float r7642 = 1.0;
  float r7643=r7642;
  float r7644 = r7641/r7643;
  float r7645 = floor(r7644);
  float r7646 = r7643*r7645;
  float r7647 = r7641-r7646;
  float r7648=r7647;
  float r7649 = 43758.5453123;
  float r7650 = r7648*r7649;
  float r7651=r7650;
  float r7652 = 1.0;
  float r7653=r7652;
  float r7654 = r7651/r7653;
  float r7655 = floor(r7654);
  float r7656 = r7653*r7655;
  float r7657 = r7651-r7656;
  float r7658 = 78.233;
  float r7659 = r7648*r7658;
  float r7660 = r7657+r7659;
  float r7661=r7660;
  float r7662 = 1.0;
  float r7663=r7662;
  float r7664 = r7661/r7663;
  float r7665 = floor(r7664);
  float r7666 = r7663*r7665;
  float r7667 = r7661-r7666;
  vec3 r7668 = vec3(r7503,r7585,r7667);
  vec3 r7669=r7668;
  float r7670=r6581;
  float r7671=r6583;
  float r7672 = 1.0;
  float r7673 = r6585+r7672;
  float r7674=r7673;
  float r7675=r7670;
  float r7676 = 43758.5453123;
  float r7677 = r7675*r7676;
  float r7678=r7677;
  float r7679 = 1.0;
  float r7680=r7679;
  float r7681 = r7678/r7680;
  float r7682 = floor(r7681);
  float r7683 = r7680*r7682;
  float r7684 = r7678-r7683;
  float r7685 = 78.233;
  float r7686 = r7675*r7685;
  float r7687 = r7684+r7686;
  float r7688=r7687;
  float r7689 = 1.0;
  float r7690=r7689;
  float r7691 = r7688/r7690;
  float r7692 = floor(r7691);
  float r7693 = r7690*r7692;
  float r7694 = r7688-r7693;
  float r7695 = r7694+r7671;
  float r7696=r7695;
  float r7697 = 43758.5453123;
  float r7698 = r7696*r7697;
  float r7699=r7698;
  float r7700 = 1.0;
  float r7701=r7700;
  float r7702 = r7699/r7701;
  float r7703 = floor(r7702);
  float r7704 = r7701*r7703;
  float r7705 = r7699-r7704;
  float r7706 = 78.233;
  float r7707 = r7696*r7706;
  float r7708 = r7705+r7707;
  float r7709=r7708;
  float r7710 = 1.0;
  float r7711=r7710;
  float r7712 = r7709/r7711;
  float r7713 = floor(r7712);
  float r7714 = r7711*r7713;
  float r7715 = r7709-r7714;
  float r7716 = r7715+r7674;
  float r7717=r7716;
  float r7718 = 43758.5453123;
  float r7719 = r7717*r7718;
  float r7720=r7719;
  float r7721 = 1.0;
  float r7722=r7721;
  float r7723 = r7720/r7722;
  float r7724 = floor(r7723);
  float r7725 = r7722*r7724;
  float r7726 = r7720-r7725;
  float r7727 = 78.233;
  float r7728 = r7717*r7727;
  float r7729 = r7726+r7728;
  float r7730=r7729;
  float r7731 = 1.0;
  float r7732=r7731;
  float r7733 = r7730/r7732;
  float r7734 = floor(r7733);
  float r7735 = r7732*r7734;
  float r7736 = r7730-r7735;
  float r7737=r7736;
  float r7738 = 43758.5453123;
  float r7739 = r7737*r7738;
  float r7740=r7739;
  float r7741 = 1.0;
  float r7742=r7741;
  float r7743 = r7740/r7742;
  float r7744 = floor(r7743);
  float r7745 = r7742*r7744;
  float r7746 = r7740-r7745;
  float r7747 = 78.233;
  float r7748 = r7737*r7747;
  float r7749 = r7746+r7748;
  float r7750=r7749;
  float r7751 = 1.0;
  float r7752=r7751;
  float r7753 = r7750/r7752;
  float r7754 = floor(r7753);
  float r7755 = r7752*r7754;
  float r7756 = r7750-r7755;
  float r7757=r7671;
  float r7758 = 43758.5453123;
  float r7759 = r7757*r7758;
  float r7760=r7759;
  float r7761 = 1.0;
  float r7762=r7761;
  float r7763 = r7760/r7762;
  float r7764 = floor(r7763);
  float r7765 = r7762*r7764;
  float r7766 = r7760-r7765;
  float r7767 = 78.233;
  float r7768 = r7757*r7767;
  float r7769 = r7766+r7768;
  float r7770=r7769;
  float r7771 = 1.0;
  float r7772=r7771;
  float r7773 = r7770/r7772;
  float r7774 = floor(r7773);
  float r7775 = r7772*r7774;
  float r7776 = r7770-r7775;
  float r7777 = r7776+r7674;
  float r7778=r7777;
  float r7779 = 43758.5453123;
  float r7780 = r7778*r7779;
  float r7781=r7780;
  float r7782 = 1.0;
  float r7783=r7782;
  float r7784 = r7781/r7783;
  float r7785 = floor(r7784);
  float r7786 = r7783*r7785;
  float r7787 = r7781-r7786;
  float r7788 = 78.233;
  float r7789 = r7778*r7788;
  float r7790 = r7787+r7789;
  float r7791=r7790;
  float r7792 = 1.0;
  float r7793=r7792;
  float r7794 = r7791/r7793;
  float r7795 = floor(r7794);
  float r7796 = r7793*r7795;
  float r7797 = r7791-r7796;
  float r7798 = r7797+r7670;
  float r7799=r7798;
  float r7800 = 43758.5453123;
  float r7801 = r7799*r7800;
  float r7802=r7801;
  float r7803 = 1.0;
  float r7804=r7803;
  float r7805 = r7802/r7804;
  float r7806 = floor(r7805);
  float r7807 = r7804*r7806;
  float r7808 = r7802-r7807;
  float r7809 = 78.233;
  float r7810 = r7799*r7809;
  float r7811 = r7808+r7810;
  float r7812=r7811;
  float r7813 = 1.0;
  float r7814=r7813;
  float r7815 = r7812/r7814;
  float r7816 = floor(r7815);
  float r7817 = r7814*r7816;
  float r7818 = r7812-r7817;
  float r7819=r7818;
  float r7820 = 43758.5453123;
  float r7821 = r7819*r7820;
  float r7822=r7821;
  float r7823 = 1.0;
  float r7824=r7823;
  float r7825 = r7822/r7824;
  float r7826 = floor(r7825);
  float r7827 = r7824*r7826;
  float r7828 = r7822-r7827;
  float r7829 = 78.233;
  float r7830 = r7819*r7829;
  float r7831 = r7828+r7830;
  float r7832=r7831;
  float r7833 = 1.0;
  float r7834=r7833;
  float r7835 = r7832/r7834;
  float r7836 = floor(r7835);
  float r7837 = r7834*r7836;
  float r7838 = r7832-r7837;
  float r7839=r7674;
  float r7840 = 43758.5453123;
  float r7841 = r7839*r7840;
  float r7842=r7841;
  float r7843 = 1.0;
  float r7844=r7843;
  float r7845 = r7842/r7844;
  float r7846 = floor(r7845);
  float r7847 = r7844*r7846;
  float r7848 = r7842-r7847;
  float r7849 = 78.233;
  float r7850 = r7839*r7849;
  float r7851 = r7848+r7850;
  float r7852=r7851;
  float r7853 = 1.0;
  float r7854=r7853;
  float r7855 = r7852/r7854;
  float r7856 = floor(r7855);
  float r7857 = r7854*r7856;
  float r7858 = r7852-r7857;
  float r7859 = r7858+r7670;
  float r7860=r7859;
  float r7861 = 43758.5453123;
  float r7862 = r7860*r7861;
  float r7863=r7862;
  float r7864 = 1.0;
  float r7865=r7864;
  float r7866 = r7863/r7865;
  float r7867 = floor(r7866);
  float r7868 = r7865*r7867;
  float r7869 = r7863-r7868;
  float r7870 = 78.233;
  float r7871 = r7860*r7870;
  float r7872 = r7869+r7871;
  float r7873=r7872;
  float r7874 = 1.0;
  float r7875=r7874;
  float r7876 = r7873/r7875;
  float r7877 = floor(r7876);
  float r7878 = r7875*r7877;
  float r7879 = r7873-r7878;
  float r7880 = r7879+r7671;
  float r7881=r7880;
  float r7882 = 43758.5453123;
  float r7883 = r7881*r7882;
  float r7884=r7883;
  float r7885 = 1.0;
  float r7886=r7885;
  float r7887 = r7884/r7886;
  float r7888 = floor(r7887);
  float r7889 = r7886*r7888;
  float r7890 = r7884-r7889;
  float r7891 = 78.233;
  float r7892 = r7881*r7891;
  float r7893 = r7890+r7892;
  float r7894=r7893;
  float r7895 = 1.0;
  float r7896=r7895;
  float r7897 = r7894/r7896;
  float r7898 = floor(r7897);
  float r7899 = r7896*r7898;
  float r7900 = r7894-r7899;
  float r7901=r7900;
  float r7902 = 43758.5453123;
  float r7903 = r7901*r7902;
  float r7904=r7903;
  float r7905 = 1.0;
  float r7906=r7905;
  float r7907 = r7904/r7906;
  float r7908 = floor(r7907);
  float r7909 = r7906*r7908;
  float r7910 = r7904-r7909;
  float r7911 = 78.233;
  float r7912 = r7901*r7911;
  float r7913 = r7910+r7912;
  float r7914=r7913;
  float r7915 = 1.0;
  float r7916=r7915;
  float r7917 = r7914/r7916;
  float r7918 = floor(r7917);
  float r7919 = r7916*r7918;
  float r7920 = r7914-r7919;
  vec3 r7921 = vec3(r7756,r7838,r7920);
  vec3 r7922=r7921;
  float r7923 = 1.0;
  float r7924 = r6581+r7923;
  float r7925=r7924;
  float r7926=r6583;
  float r7927 = 1.0;
  float r7928 = r6585+r7927;
  float r7929=r7928;
  float r7930=r7925;
  float r7931 = 43758.5453123;
  float r7932 = r7930*r7931;
  float r7933=r7932;
  float r7934 = 1.0;
  float r7935=r7934;
  float r7936 = r7933/r7935;
  float r7937 = floor(r7936);
  float r7938 = r7935*r7937;
  float r7939 = r7933-r7938;
  float r7940 = 78.233;
  float r7941 = r7930*r7940;
  float r7942 = r7939+r7941;
  float r7943=r7942;
  float r7944 = 1.0;
  float r7945=r7944;
  float r7946 = r7943/r7945;
  float r7947 = floor(r7946);
  float r7948 = r7945*r7947;
  float r7949 = r7943-r7948;
  float r7950 = r7949+r7926;
  float r7951=r7950;
  float r7952 = 43758.5453123;
  float r7953 = r7951*r7952;
  float r7954=r7953;
  float r7955 = 1.0;
  float r7956=r7955;
  float r7957 = r7954/r7956;
  float r7958 = floor(r7957);
  float r7959 = r7956*r7958;
  float r7960 = r7954-r7959;
  float r7961 = 78.233;
  float r7962 = r7951*r7961;
  float r7963 = r7960+r7962;
  float r7964=r7963;
  float r7965 = 1.0;
  float r7966=r7965;
  float r7967 = r7964/r7966;
  float r7968 = floor(r7967);
  float r7969 = r7966*r7968;
  float r7970 = r7964-r7969;
  float r7971 = r7970+r7929;
  float r7972=r7971;
  float r7973 = 43758.5453123;
  float r7974 = r7972*r7973;
  float r7975=r7974;
  float r7976 = 1.0;
  float r7977=r7976;
  float r7978 = r7975/r7977;
  float r7979 = floor(r7978);
  float r7980 = r7977*r7979;
  float r7981 = r7975-r7980;
  float r7982 = 78.233;
  float r7983 = r7972*r7982;
  float r7984 = r7981+r7983;
  float r7985=r7984;
  float r7986 = 1.0;
  float r7987=r7986;
  float r7988 = r7985/r7987;
  float r7989 = floor(r7988);
  float r7990 = r7987*r7989;
  float r7991 = r7985-r7990;
  float r7992=r7991;
  float r7993 = 43758.5453123;
  float r7994 = r7992*r7993;
  float r7995=r7994;
  float r7996 = 1.0;
  float r7997=r7996;
  float r7998 = r7995/r7997;
  float r7999 = floor(r7998);
  float r8000 = r7997*r7999;
  float r8001 = r7995-r8000;
  float r8002 = 78.233;
  float r8003 = r7992*r8002;
  float r8004 = r8001+r8003;
  float r8005=r8004;
  float r8006 = 1.0;
  float r8007=r8006;
  float r8008 = r8005/r8007;
  float r8009 = floor(r8008);
  float r8010 = r8007*r8009;
  float r8011 = r8005-r8010;
  float r8012=r7926;
  float r8013 = 43758.5453123;
  float r8014 = r8012*r8013;
  float r8015=r8014;
  float r8016 = 1.0;
  float r8017=r8016;
  float r8018 = r8015/r8017;
  float r8019 = floor(r8018);
  float r8020 = r8017*r8019;
  float r8021 = r8015-r8020;
  float r8022 = 78.233;
  float r8023 = r8012*r8022;
  float r8024 = r8021+r8023;
  float r8025=r8024;
  float r8026 = 1.0;
  float r8027=r8026;
  float r8028 = r8025/r8027;
  float r8029 = floor(r8028);
  float r8030 = r8027*r8029;
  float r8031 = r8025-r8030;
  float r8032 = r8031+r7929;
  float r8033=r8032;
  float r8034 = 43758.5453123;
  float r8035 = r8033*r8034;
  float r8036=r8035;
  float r8037 = 1.0;
  float r8038=r8037;
  float r8039 = r8036/r8038;
  float r8040 = floor(r8039);
  float r8041 = r8038*r8040;
  float r8042 = r8036-r8041;
  float r8043 = 78.233;
  float r8044 = r8033*r8043;
  float r8045 = r8042+r8044;
  float r8046=r8045;
  float r8047 = 1.0;
  float r8048=r8047;
  float r8049 = r8046/r8048;
  float r8050 = floor(r8049);
  float r8051 = r8048*r8050;
  float r8052 = r8046-r8051;
  float r8053 = r8052+r7925;
  float r8054=r8053;
  float r8055 = 43758.5453123;
  float r8056 = r8054*r8055;
  float r8057=r8056;
  float r8058 = 1.0;
  float r8059=r8058;
  float r8060 = r8057/r8059;
  float r8061 = floor(r8060);
  float r8062 = r8059*r8061;
  float r8063 = r8057-r8062;
  float r8064 = 78.233;
  float r8065 = r8054*r8064;
  float r8066 = r8063+r8065;
  float r8067=r8066;
  float r8068 = 1.0;
  float r8069=r8068;
  float r8070 = r8067/r8069;
  float r8071 = floor(r8070);
  float r8072 = r8069*r8071;
  float r8073 = r8067-r8072;
  float r8074=r8073;
  float r8075 = 43758.5453123;
  float r8076 = r8074*r8075;
  float r8077=r8076;
  float r8078 = 1.0;
  float r8079=r8078;
  float r8080 = r8077/r8079;
  float r8081 = floor(r8080);
  float r8082 = r8079*r8081;
  float r8083 = r8077-r8082;
  float r8084 = 78.233;
  float r8085 = r8074*r8084;
  float r8086 = r8083+r8085;
  float r8087=r8086;
  float r8088 = 1.0;
  float r8089=r8088;
  float r8090 = r8087/r8089;
  float r8091 = floor(r8090);
  float r8092 = r8089*r8091;
  float r8093 = r8087-r8092;
  float r8094=r7929;
  float r8095 = 43758.5453123;
  float r8096 = r8094*r8095;
  float r8097=r8096;
  float r8098 = 1.0;
  float r8099=r8098;
  float r8100 = r8097/r8099;
  float r8101 = floor(r8100);
  float r8102 = r8099*r8101;
  float r8103 = r8097-r8102;
  float r8104 = 78.233;
  float r8105 = r8094*r8104;
  float r8106 = r8103+r8105;
  float r8107=r8106;
  float r8108 = 1.0;
  float r8109=r8108;
  float r8110 = r8107/r8109;
  float r8111 = floor(r8110);
  float r8112 = r8109*r8111;
  float r8113 = r8107-r8112;
  float r8114 = r8113+r7925;
  float r8115=r8114;
  float r8116 = 43758.5453123;
  float r8117 = r8115*r8116;
  float r8118=r8117;
  float r8119 = 1.0;
  float r8120=r8119;
  float r8121 = r8118/r8120;
  float r8122 = floor(r8121);
  float r8123 = r8120*r8122;
  float r8124 = r8118-r8123;
  float r8125 = 78.233;
  float r8126 = r8115*r8125;
  float r8127 = r8124+r8126;
  float r8128=r8127;
  float r8129 = 1.0;
  float r8130=r8129;
  float r8131 = r8128/r8130;
  float r8132 = floor(r8131);
  float r8133 = r8130*r8132;
  float r8134 = r8128-r8133;
  float r8135 = r8134+r7926;
  float r8136=r8135;
  float r8137 = 43758.5453123;
  float r8138 = r8136*r8137;
  float r8139=r8138;
  float r8140 = 1.0;
  float r8141=r8140;
  float r8142 = r8139/r8141;
  float r8143 = floor(r8142);
  float r8144 = r8141*r8143;
  float r8145 = r8139-r8144;
  float r8146 = 78.233;
  float r8147 = r8136*r8146;
  float r8148 = r8145+r8147;
  float r8149=r8148;
  float r8150 = 1.0;
  float r8151=r8150;
  float r8152 = r8149/r8151;
  float r8153 = floor(r8152);
  float r8154 = r8151*r8153;
  float r8155 = r8149-r8154;
  float r8156=r8155;
  float r8157 = 43758.5453123;
  float r8158 = r8156*r8157;
  float r8159=r8158;
  float r8160 = 1.0;
  float r8161=r8160;
  float r8162 = r8159/r8161;
  float r8163 = floor(r8162);
  float r8164 = r8161*r8163;
  float r8165 = r8159-r8164;
  float r8166 = 78.233;
  float r8167 = r8156*r8166;
  float r8168 = r8165+r8167;
  float r8169=r8168;
  float r8170 = 1.0;
  float r8171=r8170;
  float r8172 = r8169/r8171;
  float r8173 = floor(r8172);
  float r8174 = r8171*r8173;
  float r8175 = r8169-r8174;
  vec3 r8176 = vec3(r8011,r8093,r8175);
  vec3 r8177=r8176;
  float r8178 = 1.0;
  float r8179 = r6581+r8178;
  float r8180=r8179;
  float r8181 = 1.0;
  float r8182 = r6583+r8181;
  float r8183=r8182;
  float r8184 = 1.0;
  float r8185 = r6585+r8184;
  float r8186=r8185;
  float r8187=r8180;
  float r8188 = 43758.5453123;
  float r8189 = r8187*r8188;
  float r8190=r8189;
  float r8191 = 1.0;
  float r8192=r8191;
  float r8193 = r8190/r8192;
  float r8194 = floor(r8193);
  float r8195 = r8192*r8194;
  float r8196 = r8190-r8195;
  float r8197 = 78.233;
  float r8198 = r8187*r8197;
  float r8199 = r8196+r8198;
  float r8200=r8199;
  float r8201 = 1.0;
  float r8202=r8201;
  float r8203 = r8200/r8202;
  float r8204 = floor(r8203);
  float r8205 = r8202*r8204;
  float r8206 = r8200-r8205;
  float r8207 = r8206+r8183;
  float r8208=r8207;
  float r8209 = 43758.5453123;
  float r8210 = r8208*r8209;
  float r8211=r8210;
  float r8212 = 1.0;
  float r8213=r8212;
  float r8214 = r8211/r8213;
  float r8215 = floor(r8214);
  float r8216 = r8213*r8215;
  float r8217 = r8211-r8216;
  float r8218 = 78.233;
  float r8219 = r8208*r8218;
  float r8220 = r8217+r8219;
  float r8221=r8220;
  float r8222 = 1.0;
  float r8223=r8222;
  float r8224 = r8221/r8223;
  float r8225 = floor(r8224);
  float r8226 = r8223*r8225;
  float r8227 = r8221-r8226;
  float r8228 = r8227+r8186;
  float r8229=r8228;
  float r8230 = 43758.5453123;
  float r8231 = r8229*r8230;
  float r8232=r8231;
  float r8233 = 1.0;
  float r8234=r8233;
  float r8235 = r8232/r8234;
  float r8236 = floor(r8235);
  float r8237 = r8234*r8236;
  float r8238 = r8232-r8237;
  float r8239 = 78.233;
  float r8240 = r8229*r8239;
  float r8241 = r8238+r8240;
  float r8242=r8241;
  float r8243 = 1.0;
  float r8244=r8243;
  float r8245 = r8242/r8244;
  float r8246 = floor(r8245);
  float r8247 = r8244*r8246;
  float r8248 = r8242-r8247;
  float r8249=r8248;
  float r8250 = 43758.5453123;
  float r8251 = r8249*r8250;
  float r8252=r8251;
  float r8253 = 1.0;
  float r8254=r8253;
  float r8255 = r8252/r8254;
  float r8256 = floor(r8255);
  float r8257 = r8254*r8256;
  float r8258 = r8252-r8257;
  float r8259 = 78.233;
  float r8260 = r8249*r8259;
  float r8261 = r8258+r8260;
  float r8262=r8261;
  float r8263 = 1.0;
  float r8264=r8263;
  float r8265 = r8262/r8264;
  float r8266 = floor(r8265);
  float r8267 = r8264*r8266;
  float r8268 = r8262-r8267;
  float r8269=r8183;
  float r8270 = 43758.5453123;
  float r8271 = r8269*r8270;
  float r8272=r8271;
  float r8273 = 1.0;
  float r8274=r8273;
  float r8275 = r8272/r8274;
  float r8276 = floor(r8275);
  float r8277 = r8274*r8276;
  float r8278 = r8272-r8277;
  float r8279 = 78.233;
  float r8280 = r8269*r8279;
  float r8281 = r8278+r8280;
  float r8282=r8281;
  float r8283 = 1.0;
  float r8284=r8283;
  float r8285 = r8282/r8284;
  float r8286 = floor(r8285);
  float r8287 = r8284*r8286;
  float r8288 = r8282-r8287;
  float r8289 = r8288+r8186;
  float r8290=r8289;
  float r8291 = 43758.5453123;
  float r8292 = r8290*r8291;
  float r8293=r8292;
  float r8294 = 1.0;
  float r8295=r8294;
  float r8296 = r8293/r8295;
  float r8297 = floor(r8296);
  float r8298 = r8295*r8297;
  float r8299 = r8293-r8298;
  float r8300 = 78.233;
  float r8301 = r8290*r8300;
  float r8302 = r8299+r8301;
  float r8303=r8302;
  float r8304 = 1.0;
  float r8305=r8304;
  float r8306 = r8303/r8305;
  float r8307 = floor(r8306);
  float r8308 = r8305*r8307;
  float r8309 = r8303-r8308;
  float r8310 = r8309+r8180;
  float r8311=r8310;
  float r8312 = 43758.5453123;
  float r8313 = r8311*r8312;
  float r8314=r8313;
  float r8315 = 1.0;
  float r8316=r8315;
  float r8317 = r8314/r8316;
  float r8318 = floor(r8317);
  float r8319 = r8316*r8318;
  float r8320 = r8314-r8319;
  float r8321 = 78.233;
  float r8322 = r8311*r8321;
  float r8323 = r8320+r8322;
  float r8324=r8323;
  float r8325 = 1.0;
  float r8326=r8325;
  float r8327 = r8324/r8326;
  float r8328 = floor(r8327);
  float r8329 = r8326*r8328;
  float r8330 = r8324-r8329;
  float r8331=r8330;
  float r8332 = 43758.5453123;
  float r8333 = r8331*r8332;
  float r8334=r8333;
  float r8335 = 1.0;
  float r8336=r8335;
  float r8337 = r8334/r8336;
  float r8338 = floor(r8337);
  float r8339 = r8336*r8338;
  float r8340 = r8334-r8339;
  float r8341 = 78.233;
  float r8342 = r8331*r8341;
  float r8343 = r8340+r8342;
  float r8344=r8343;
  float r8345 = 1.0;
  float r8346=r8345;
  float r8347 = r8344/r8346;
  float r8348 = floor(r8347);
  float r8349 = r8346*r8348;
  float r8350 = r8344-r8349;
  float r8351=r8186;
  float r8352 = 43758.5453123;
  float r8353 = r8351*r8352;
  float r8354=r8353;
  float r8355 = 1.0;
  float r8356=r8355;
  float r8357 = r8354/r8356;
  float r8358 = floor(r8357);
  float r8359 = r8356*r8358;
  float r8360 = r8354-r8359;
  float r8361 = 78.233;
  float r8362 = r8351*r8361;
  float r8363 = r8360+r8362;
  float r8364=r8363;
  float r8365 = 1.0;
  float r8366=r8365;
  float r8367 = r8364/r8366;
  float r8368 = floor(r8367);
  float r8369 = r8366*r8368;
  float r8370 = r8364-r8369;
  float r8371 = r8370+r8180;
  float r8372=r8371;
  float r8373 = 43758.5453123;
  float r8374 = r8372*r8373;
  float r8375=r8374;
  float r8376 = 1.0;
  float r8377=r8376;
  float r8378 = r8375/r8377;
  float r8379 = floor(r8378);
  float r8380 = r8377*r8379;
  float r8381 = r8375-r8380;
  float r8382 = 78.233;
  float r8383 = r8372*r8382;
  float r8384 = r8381+r8383;
  float r8385=r8384;
  float r8386 = 1.0;
  float r8387=r8386;
  float r8388 = r8385/r8387;
  float r8389 = floor(r8388);
  float r8390 = r8387*r8389;
  float r8391 = r8385-r8390;
  float r8392 = r8391+r8183;
  float r8393=r8392;
  float r8394 = 43758.5453123;
  float r8395 = r8393*r8394;
  float r8396=r8395;
  float r8397 = 1.0;
  float r8398=r8397;
  float r8399 = r8396/r8398;
  float r8400 = floor(r8399);
  float r8401 = r8398*r8400;
  float r8402 = r8396-r8401;
  float r8403 = 78.233;
  float r8404 = r8393*r8403;
  float r8405 = r8402+r8404;
  float r8406=r8405;
  float r8407 = 1.0;
  float r8408=r8407;
  float r8409 = r8406/r8408;
  float r8410 = floor(r8409);
  float r8411 = r8408*r8410;
  float r8412 = r8406-r8411;
  float r8413=r8412;
  float r8414 = 43758.5453123;
  float r8415 = r8413*r8414;
  float r8416=r8415;
  float r8417 = 1.0;
  float r8418=r8417;
  float r8419 = r8416/r8418;
  float r8420 = floor(r8419);
  float r8421 = r8418*r8420;
  float r8422 = r8416-r8421;
  float r8423 = 78.233;
  float r8424 = r8413*r8423;
  float r8425 = r8422+r8424;
  float r8426=r8425;
  float r8427 = 1.0;
  float r8428=r8427;
  float r8429 = r8426/r8428;
  float r8430 = floor(r8429);
  float r8431 = r8428*r8430;
  float r8432 = r8426-r8431;
  vec3 r8433 = vec3(r8268,r8350,r8432);
  vec3 r8434=r8433;
  float r8435=r6581;
  float r8436 = 1.0;
  float r8437 = r6583+r8436;
  float r8438=r8437;
  float r8439 = 1.0;
  float r8440 = r6585+r8439;
  float r8441=r8440;
  float r8442=r8435;
  float r8443 = 43758.5453123;
  float r8444 = r8442*r8443;
  float r8445=r8444;
  float r8446 = 1.0;
  float r8447=r8446;
  float r8448 = r8445/r8447;
  float r8449 = floor(r8448);
  float r8450 = r8447*r8449;
  float r8451 = r8445-r8450;
  float r8452 = 78.233;
  float r8453 = r8442*r8452;
  float r8454 = r8451+r8453;
  float r8455=r8454;
  float r8456 = 1.0;
  float r8457=r8456;
  float r8458 = r8455/r8457;
  float r8459 = floor(r8458);
  float r8460 = r8457*r8459;
  float r8461 = r8455-r8460;
  float r8462 = r8461+r8438;
  float r8463=r8462;
  float r8464 = 43758.5453123;
  float r8465 = r8463*r8464;
  float r8466=r8465;
  float r8467 = 1.0;
  float r8468=r8467;
  float r8469 = r8466/r8468;
  float r8470 = floor(r8469);
  float r8471 = r8468*r8470;
  float r8472 = r8466-r8471;
  float r8473 = 78.233;
  float r8474 = r8463*r8473;
  float r8475 = r8472+r8474;
  float r8476=r8475;
  float r8477 = 1.0;
  float r8478=r8477;
  float r8479 = r8476/r8478;
  float r8480 = floor(r8479);
  float r8481 = r8478*r8480;
  float r8482 = r8476-r8481;
  float r8483 = r8482+r8441;
  float r8484=r8483;
  float r8485 = 43758.5453123;
  float r8486 = r8484*r8485;
  float r8487=r8486;
  float r8488 = 1.0;
  float r8489=r8488;
  float r8490 = r8487/r8489;
  float r8491 = floor(r8490);
  float r8492 = r8489*r8491;
  float r8493 = r8487-r8492;
  float r8494 = 78.233;
  float r8495 = r8484*r8494;
  float r8496 = r8493+r8495;
  float r8497=r8496;
  float r8498 = 1.0;
  float r8499=r8498;
  float r8500 = r8497/r8499;
  float r8501 = floor(r8500);
  float r8502 = r8499*r8501;
  float r8503 = r8497-r8502;
  float r8504=r8503;
  float r8505 = 43758.5453123;
  float r8506 = r8504*r8505;
  float r8507=r8506;
  float r8508 = 1.0;
  float r8509=r8508;
  float r8510 = r8507/r8509;
  float r8511 = floor(r8510);
  float r8512 = r8509*r8511;
  float r8513 = r8507-r8512;
  float r8514 = 78.233;
  float r8515 = r8504*r8514;
  float r8516 = r8513+r8515;
  float r8517=r8516;
  float r8518 = 1.0;
  float r8519=r8518;
  float r8520 = r8517/r8519;
  float r8521 = floor(r8520);
  float r8522 = r8519*r8521;
  float r8523 = r8517-r8522;
  float r8524=r8438;
  float r8525 = 43758.5453123;
  float r8526 = r8524*r8525;
  float r8527=r8526;
  float r8528 = 1.0;
  float r8529=r8528;
  float r8530 = r8527/r8529;
  float r8531 = floor(r8530);
  float r8532 = r8529*r8531;
  float r8533 = r8527-r8532;
  float r8534 = 78.233;
  float r8535 = r8524*r8534;
  float r8536 = r8533+r8535;
  float r8537=r8536;
  float r8538 = 1.0;
  float r8539=r8538;
  float r8540 = r8537/r8539;
  float r8541 = floor(r8540);
  float r8542 = r8539*r8541;
  float r8543 = r8537-r8542;
  float r8544 = r8543+r8441;
  float r8545=r8544;
  float r8546 = 43758.5453123;
  float r8547 = r8545*r8546;
  float r8548=r8547;
  float r8549 = 1.0;
  float r8550=r8549;
  float r8551 = r8548/r8550;
  float r8552 = floor(r8551);
  float r8553 = r8550*r8552;
  float r8554 = r8548-r8553;
  float r8555 = 78.233;
  float r8556 = r8545*r8555;
  float r8557 = r8554+r8556;
  float r8558=r8557;
  float r8559 = 1.0;
  float r8560=r8559;
  float r8561 = r8558/r8560;
  float r8562 = floor(r8561);
  float r8563 = r8560*r8562;
  float r8564 = r8558-r8563;
  float r8565 = r8564+r8435;
  float r8566=r8565;
  float r8567 = 43758.5453123;
  float r8568 = r8566*r8567;
  float r8569=r8568;
  float r8570 = 1.0;
  float r8571=r8570;
  float r8572 = r8569/r8571;
  float r8573 = floor(r8572);
  float r8574 = r8571*r8573;
  float r8575 = r8569-r8574;
  float r8576 = 78.233;
  float r8577 = r8566*r8576;
  float r8578 = r8575+r8577;
  float r8579=r8578;
  float r8580 = 1.0;
  float r8581=r8580;
  float r8582 = r8579/r8581;
  float r8583 = floor(r8582);
  float r8584 = r8581*r8583;
  float r8585 = r8579-r8584;
  float r8586=r8585;
  float r8587 = 43758.5453123;
  float r8588 = r8586*r8587;
  float r8589=r8588;
  float r8590 = 1.0;
  float r8591=r8590;
  float r8592 = r8589/r8591;
  float r8593 = floor(r8592);
  float r8594 = r8591*r8593;
  float r8595 = r8589-r8594;
  float r8596 = 78.233;
  float r8597 = r8586*r8596;
  float r8598 = r8595+r8597;
  float r8599=r8598;
  float r8600 = 1.0;
  float r8601=r8600;
  float r8602 = r8599/r8601;
  float r8603 = floor(r8602);
  float r8604 = r8601*r8603;
  float r8605 = r8599-r8604;
  float r8606=r8441;
  float r8607 = 43758.5453123;
  float r8608 = r8606*r8607;
  float r8609=r8608;
  float r8610 = 1.0;
  float r8611=r8610;
  float r8612 = r8609/r8611;
  float r8613 = floor(r8612);
  float r8614 = r8611*r8613;
  float r8615 = r8609-r8614;
  float r8616 = 78.233;
  float r8617 = r8606*r8616;
  float r8618 = r8615+r8617;
  float r8619=r8618;
  float r8620 = 1.0;
  float r8621=r8620;
  float r8622 = r8619/r8621;
  float r8623 = floor(r8622);
  float r8624 = r8621*r8623;
  float r8625 = r8619-r8624;
  float r8626 = r8625+r8435;
  float r8627=r8626;
  float r8628 = 43758.5453123;
  float r8629 = r8627*r8628;
  float r8630=r8629;
  float r8631 = 1.0;
  float r8632=r8631;
  float r8633 = r8630/r8632;
  float r8634 = floor(r8633);
  float r8635 = r8632*r8634;
  float r8636 = r8630-r8635;
  float r8637 = 78.233;
  float r8638 = r8627*r8637;
  float r8639 = r8636+r8638;
  float r8640=r8639;
  float r8641 = 1.0;
  float r8642=r8641;
  float r8643 = r8640/r8642;
  float r8644 = floor(r8643);
  float r8645 = r8642*r8644;
  float r8646 = r8640-r8645;
  float r8647 = r8646+r8438;
  float r8648=r8647;
  float r8649 = 43758.5453123;
  float r8650 = r8648*r8649;
  float r8651=r8650;
  float r8652 = 1.0;
  float r8653=r8652;
  float r8654 = r8651/r8653;
  float r8655 = floor(r8654);
  float r8656 = r8653*r8655;
  float r8657 = r8651-r8656;
  float r8658 = 78.233;
  float r8659 = r8648*r8658;
  float r8660 = r8657+r8659;
  float r8661=r8660;
  float r8662 = 1.0;
  float r8663=r8662;
  float r8664 = r8661/r8663;
  float r8665 = floor(r8664);
  float r8666 = r8663*r8665;
  float r8667 = r8661-r8666;
  float r8668=r8667;
  float r8669 = 43758.5453123;
  float r8670 = r8668*r8669;
  float r8671=r8670;
  float r8672 = 1.0;
  float r8673=r8672;
  float r8674 = r8671/r8673;
  float r8675 = floor(r8674);
  float r8676 = r8673*r8675;
  float r8677 = r8671-r8676;
  float r8678 = 78.233;
  float r8679 = r8668*r8678;
  float r8680 = r8677+r8679;
  float r8681=r8680;
  float r8682 = 1.0;
  float r8683=r8682;
  float r8684 = r8681/r8683;
  float r8685 = floor(r8684);
  float r8686 = r8683*r8685;
  float r8687 = r8681-r8686;
  vec3 r8688 = vec3(r8523,r8605,r8687);
  vec3 r8689=r8688;
  vec3 r8690=r6908;
  vec3 r8691=r7161;
  float r8692=r6609;
  float r8693 = 1.0;
  float r8694 = r8693-r8692;
  vec3 r8695 = r8690*vec3(r8694,r8694,r8694);
  vec3 r8696 = r8691*vec3(r8692,r8692,r8692);
  vec3 r8697 = r8695+r8696;
  vec3 r8698=r8697;
  vec3 r8699=r7669;
  vec3 r8700=r7416;
  float r8701=r6609;
  float r8702 = 1.0;
  float r8703 = r8702-r8701;
  vec3 r8704 = r8699*vec3(r8703,r8703,r8703);
  vec3 r8705 = r8700*vec3(r8701,r8701,r8701);
  vec3 r8706 = r8704+r8705;
  vec3 r8707=r8706;
  vec3 r8708=r7922;
  vec3 r8709=r8177;
  float r8710=r6609;
  float r8711 = 1.0;
  float r8712 = r8711-r8710;
  vec3 r8713 = r8708*vec3(r8712,r8712,r8712);
  vec3 r8714 = r8709*vec3(r8710,r8710,r8710);
  vec3 r8715 = r8713+r8714;
  vec3 r8716=r8715;
  vec3 r8717=r8689;
  vec3 r8718=r8434;
  float r8719=r6609;
  float r8720 = 1.0;
  float r8721 = r8720-r8719;
  vec3 r8722 = r8717*vec3(r8721,r8721,r8721);
  vec3 r8723 = r8718*vec3(r8719,r8719,r8719);
  vec3 r8724 = r8722+r8723;
  vec3 r8725=r8724;
  vec3 r8726=r8698;
  vec3 r8727=r8707;
  float r8728=r6633;
  float r8729 = 1.0;
  float r8730 = r8729-r8728;
  vec3 r8731 = r8726*vec3(r8730,r8730,r8730);
  vec3 r8732 = r8727*vec3(r8728,r8728,r8728);
  vec3 r8733 = r8731+r8732;
  vec3 r8734=r8733;
  vec3 r8735=r8716;
  vec3 r8736=r8725;
  float r8737=r6633;
  float r8738 = 1.0;
  float r8739 = r8738-r8737;
  vec3 r8740 = r8735*vec3(r8739,r8739,r8739);
  vec3 r8741 = r8736*vec3(r8737,r8737,r8737);
  vec3 r8742 = r8740+r8741;
  vec3 r8743=r8742;
  vec3 r8744=r8734;
  vec3 r8745=r8743;
  float r8746=r6657;
  float r8747 = 1.0;
  float r8748 = r8747-r8746;
  vec3 r8749 = r8744*vec3(r8748,r8748,r8748);
  vec3 r8750 = r8745*vec3(r8746,r8746,r8746);
  vec3 r8751 = r8749+r8750;
  vec3 r8752=r8751;
  float r8753 = 0.3;
  vec3 r8754 = r8752*vec3(r8753,r8753,r8753);
  vec3 r8755 = r6571-r8754;
  vec3 r8756=r8755;
  float r8757 = r8756.x;
  float r8758 = r8756.y;
  float r8759 = r8756.z;
  float r8760 = r15.w;
  vec4 r8761 = vec4(r8757,r8758,r8759,r8760);
  vec4 r8762=r8761;
  vec4 r8763=r8762;
  vec4 r8764=r8763;
  float r8765 = r8764[0];
  float r8766 = r8764[1];
  float r8767 = r8764[2];
  float r8768 = r8764[3];
  float r8769 = 0.6981317007977318;
  float r8770=r8769;
  vec3 r8771 = vec3(0.4472135954999579,0.0,0.8944271909999159);
  vec3 r8772=r8771;
  vec3 r8773 = vec3(r8765,r8766,r8767);
  vec3 r8774=r8773;
  float r8775 = cos(r8770);
  vec3 r8776 = r8774*vec3(r8775,r8775,r8775);
  vec3 r8777=r8772;
  vec3 r8778=r8774;
  float r8779 = r8777.y;
  float r8780 = r8778.z;
  float r8781 = r8779*r8780;
  float r8782 = r8777.z;
  float r8783 = r8778.y;
  float r8784 = r8782*r8783;
  float r8785 = r8781-r8784;
  float r8786 = r8777.z;
  float r8787 = r8778.x;
  float r8788 = r8786*r8787;
  float r8789 = r8777.x;
  float r8790 = r8778.z;
  float r8791 = r8789*r8790;
  float r8792 = r8788-r8791;
  float r8793 = r8777.x;
  float r8794 = r8778.y;
  float r8795 = r8793*r8794;
  float r8796 = r8777.y;
  float r8797 = r8778.x;
  float r8798 = r8796*r8797;
  float r8799 = r8795-r8798;
  vec3 r8800 = vec3(r8785,r8792,r8799);
  float r8801 = sin(r8770);
  vec3 r8802 = r8800*vec3(r8801,r8801,r8801);
  vec3 r8803 = r8776-r8802;
  float r8804 = 1.0;
  float r8805 = cos(r8770);
  float r8806 = r8804-r8805;
  vec3 r8807 = r8774*vec3(r8806,r8806,r8806);
  float r8808 = dot(r8772,r8807);
  vec3 r8809 = r8772*vec3(r8808,r8808,r8808);
  vec3 r8810 = r8803+r8809;
  vec3 r8811=r8810;
  float r8812 = r8811.x;
  float r8813=r8812;
  float r8814 = r8811.y;
  float r8815=r8814;
  float r8816 = r8811.z;
  float r8817=r8816;
  float r8818=r8768;
  vec3 r8819 = vec3(r8813,r8815,r8817);
  vec3 r8820 = abs(r8819);
  vec3 r8821 = vec3(8.0,10.0,4.5);
  vec3 r8822 = r8820-r8821;
  vec3 r8823=r8822;
  float r8824 = max(max(r8823.x,r8823.y),r8823.z);
  float r8825 = 0.0;
  float r8826 = min(r8824,r8825);
  float r8827 = 0.0;
  vec3 r8828 = max(r8823,r8827);
  float r8829 = length(r8828);
  float r8830 = r8826+r8829;
  float r8831 = 2.0;
  float r8832 = r8830-r8831;
  vec4 r8833=r8763;
  float r8834 = r8833[0];
  float r8835 = r8833[1];
  float r8836 = r8833[2];
  float r8837 = r8833[3];
  float r8838 = -0.17453292519943295;
  float r8839=r8838;
  vec3 r8840 = vec3(-0.19245008972987523,0.19245008972987523,0.9622504486493761);
  vec3 r8841=r8840;
  vec3 r8842 = vec3(r8834,r8835,r8836);
  vec3 r8843=r8842;
  float r8844 = cos(r8839);
  vec3 r8845 = r8843*vec3(r8844,r8844,r8844);
  vec3 r8846=r8841;
  vec3 r8847=r8843;
  float r8848 = r8846.y;
  float r8849 = r8847.z;
  float r8850 = r8848*r8849;
  float r8851 = r8846.z;
  float r8852 = r8847.y;
  float r8853 = r8851*r8852;
  float r8854 = r8850-r8853;
  float r8855 = r8846.z;
  float r8856 = r8847.x;
  float r8857 = r8855*r8856;
  float r8858 = r8846.x;
  float r8859 = r8847.z;
  float r8860 = r8858*r8859;
  float r8861 = r8857-r8860;
  float r8862 = r8846.x;
  float r8863 = r8847.y;
  float r8864 = r8862*r8863;
  float r8865 = r8846.y;
  float r8866 = r8847.x;
  float r8867 = r8865*r8866;
  float r8868 = r8864-r8867;
  vec3 r8869 = vec3(r8854,r8861,r8868);
  float r8870 = sin(r8839);
  vec3 r8871 = r8869*vec3(r8870,r8870,r8870);
  vec3 r8872 = r8845-r8871;
  float r8873 = 1.0;
  float r8874 = cos(r8839);
  float r8875 = r8873-r8874;
  vec3 r8876 = r8843*vec3(r8875,r8875,r8875);
  float r8877 = dot(r8841,r8876);
  vec3 r8878 = r8841*vec3(r8877,r8877,r8877);
  vec3 r8879 = r8872+r8878;
  vec3 r8880=r8879;
  float r8881 = r8880.x;
  float r8882=r8881;
  float r8883 = r8880.y;
  float r8884=r8883;
  float r8885 = r8880.z;
  float r8886=r8885;
  float r8887=r8837;
  vec3 r8888 = vec3(r8882,r8884,r8886);
  vec3 r8889 = abs(r8888);
  vec3 r8890 = vec3(10.0,3.5,8.0);
  vec3 r8891 = r8889-r8890;
  vec3 r8892=r8891;
  float r8893 = max(max(r8892.x,r8892.y),r8892.z);
  float r8894 = 0.0;
  float r8895 = min(r8893,r8894);
  float r8896 = 0.0;
  vec3 r8897 = max(r8892,r8896);
  float r8898 = length(r8897);
  float r8899 = r8895+r8898;
  float r8900 = 2.0;
  float r8901 = r8899-r8900;
  float r8902 = min(r8832,r8901);
  vec4 r8903=r8762;
  float r8904 = r8903[0];
  float r8905 = r8903[1];
  float r8906 = r8903[2];
  float r8907 = r8903[3];
  float r8908 = 1.0471975511965976;
  float r8909=r8908;
  vec3 r8910 = vec3(0.0,0.4472135954999579,0.8944271909999159);
  vec3 r8911=r8910;
  vec3 r8912 = vec3(r8904,r8905,r8906);
  vec3 r8913=r8912;
  float r8914 = cos(r8909);
  vec3 r8915 = r8913*vec3(r8914,r8914,r8914);
  vec3 r8916=r8911;
  vec3 r8917=r8913;
  float r8918 = r8916.y;
  float r8919 = r8917.z;
  float r8920 = r8918*r8919;
  float r8921 = r8916.z;
  float r8922 = r8917.y;
  float r8923 = r8921*r8922;
  float r8924 = r8920-r8923;
  float r8925 = r8916.z;
  float r8926 = r8917.x;
  float r8927 = r8925*r8926;
  float r8928 = r8916.x;
  float r8929 = r8917.z;
  float r8930 = r8928*r8929;
  float r8931 = r8927-r8930;
  float r8932 = r8916.x;
  float r8933 = r8917.y;
  float r8934 = r8932*r8933;
  float r8935 = r8916.y;
  float r8936 = r8917.x;
  float r8937 = r8935*r8936;
  float r8938 = r8934-r8937;
  vec3 r8939 = vec3(r8924,r8931,r8938);
  float r8940 = sin(r8909);
  vec3 r8941 = r8939*vec3(r8940,r8940,r8940);
  vec3 r8942 = r8915-r8941;
  float r8943 = 1.0;
  float r8944 = cos(r8909);
  float r8945 = r8943-r8944;
  vec3 r8946 = r8913*vec3(r8945,r8945,r8945);
  float r8947 = dot(r8911,r8946);
  vec3 r8948 = r8911*vec3(r8947,r8947,r8947);
  vec3 r8949 = r8942+r8948;
  vec3 r8950=r8949;
  float r8951 = r8950.x;
  float r8952=r8951;
  float r8953 = r8950.y;
  float r8954=r8953;
  float r8955 = r8950.z;
  float r8956=r8955;
  float r8957=r8907;
  vec3 r8958 = vec3(r8952,r8954,r8956);
  vec3 r8959 = abs(r8958);
  vec3 r8960 = vec3(3.5,8.0,10.0);
  vec3 r8961 = r8959-r8960;
  vec3 r8962=r8961;
  float r8963 = max(max(r8962.x,r8962.y),r8962.z);
  float r8964 = 0.0;
  float r8965 = min(r8963,r8964);
  float r8966 = 0.0;
  vec3 r8967 = max(r8962,r8966);
  float r8968 = length(r8967);
  float r8969 = r8965+r8968;
  float r8970 = 1.0;
  float r8971 = r8969-r8970;
  float r8972 = min(r8902,r8971);
  vec3 r8973 = vec3(4.0,4.0,1.0);
  float r8974 = min(min(r8973.x,r8973.y),r8973.z);
  float r8975 = r8972*r8974;
  float r8976 = r0[0];
  float r8977 = r0[1];
  float r8978 = r0[2];
  float r8979 = r0[3];
  vec3 r8980 = vec3(4.0,4.0,1.0);
  float r8981 = r8980.x;
  float r8982 = r8976/r8981;
  vec3 r8983 = vec3(4.0,4.0,1.0);
  float r8984 = r8983.y;
  float r8985 = r8977/r8984;
  vec3 r8986 = vec3(4.0,4.0,1.0);
  float r8987 = r8986.z;
  float r8988 = r8978/r8987;
  vec4 r8989 = vec4(r8982,r8985,r8988,r8979);
  vec4 r8990=r8989;
  float r8991 = r8990.x;
  vec3 r8992 = vec3(0.0,0.0,0.0);
  float r8993 = r8992.x;
  float r8994 = r8991-r8993;
  float r8995 = r8990.y;
  vec3 r8996 = vec3(0.0,0.0,0.0);
  float r8997 = r8996.y;
  float r8998 = r8995-r8997;
  float r8999 = r8990.z;
  vec3 r9000 = vec3(0.0,0.0,0.0);
  float r9001 = r9000.z;
  float r9002 = r8999-r9001;
  float r9003 = r8990.w;
  vec4 r9004 = vec4(r8994,r8998,r9002,r9003);
  vec4 r9005=r9004;
  vec4 r9006=r9005;
  vec4 r9007=r9006;
  float r9008 = r9007[0];
  float r9009 = r9007[1];
  float r9010 = r9007[2];
  float r9011 = r9007[3];
  float r9012 = 0.6981317007977318;
  float r9013=r9012;
  vec3 r9014 = vec3(0.4472135954999579,0.0,0.8944271909999159);
  vec3 r9015=r9014;
  vec3 r9016 = vec3(r9008,r9009,r9010);
  vec3 r9017=r9016;
  float r9018 = cos(r9013);
  vec3 r9019 = r9017*vec3(r9018,r9018,r9018);
  vec3 r9020=r9015;
  vec3 r9021=r9017;
  float r9022 = r9020.y;
  float r9023 = r9021.z;
  float r9024 = r9022*r9023;
  float r9025 = r9020.z;
  float r9026 = r9021.y;
  float r9027 = r9025*r9026;
  float r9028 = r9024-r9027;
  float r9029 = r9020.z;
  float r9030 = r9021.x;
  float r9031 = r9029*r9030;
  float r9032 = r9020.x;
  float r9033 = r9021.z;
  float r9034 = r9032*r9033;
  float r9035 = r9031-r9034;
  float r9036 = r9020.x;
  float r9037 = r9021.y;
  float r9038 = r9036*r9037;
  float r9039 = r9020.y;
  float r9040 = r9021.x;
  float r9041 = r9039*r9040;
  float r9042 = r9038-r9041;
  vec3 r9043 = vec3(r9028,r9035,r9042);
  float r9044 = sin(r9013);
  vec3 r9045 = r9043*vec3(r9044,r9044,r9044);
  vec3 r9046 = r9019-r9045;
  float r9047 = 1.0;
  float r9048 = cos(r9013);
  float r9049 = r9047-r9048;
  vec3 r9050 = r9017*vec3(r9049,r9049,r9049);
  float r9051 = dot(r9015,r9050);
  vec3 r9052 = r9015*vec3(r9051,r9051,r9051);
  vec3 r9053 = r9046+r9052;
  vec3 r9054=r9053;
  float r9055 = r9054.x;
  float r9056=r9055;
  float r9057 = r9054.y;
  float r9058=r9057;
  float r9059 = r9054.z;
  float r9060=r9059;
  float r9061=r9011;
  vec3 r9062 = vec3(r9056,r9058,r9060);
  vec3 r9063 = abs(r9062);
  vec3 r9064 = vec3(8.0,10.0,4.5);
  vec3 r9065 = r9063-r9064;
  vec3 r9066=r9065;
  float r9067 = max(max(r9066.x,r9066.y),r9066.z);
  float r9068 = 0.0;
  float r9069 = min(r9067,r9068);
  float r9070 = 0.0;
  vec3 r9071 = max(r9066,r9070);
  float r9072 = length(r9071);
  float r9073 = r9069+r9072;
  float r9074 = 2.0;
  float r9075 = r9073-r9074;
  vec4 r9076=r9006;
  float r9077 = r9076[0];
  float r9078 = r9076[1];
  float r9079 = r9076[2];
  float r9080 = r9076[3];
  float r9081 = -0.17453292519943295;
  float r9082=r9081;
  vec3 r9083 = vec3(-0.19245008972987523,0.19245008972987523,0.9622504486493761);
  vec3 r9084=r9083;
  vec3 r9085 = vec3(r9077,r9078,r9079);
  vec3 r9086=r9085;
  float r9087 = cos(r9082);
  vec3 r9088 = r9086*vec3(r9087,r9087,r9087);
  vec3 r9089=r9084;
  vec3 r9090=r9086;
  float r9091 = r9089.y;
  float r9092 = r9090.z;
  float r9093 = r9091*r9092;
  float r9094 = r9089.z;
  float r9095 = r9090.y;
  float r9096 = r9094*r9095;
  float r9097 = r9093-r9096;
  float r9098 = r9089.z;
  float r9099 = r9090.x;
  float r9100 = r9098*r9099;
  float r9101 = r9089.x;
  float r9102 = r9090.z;
  float r9103 = r9101*r9102;
  float r9104 = r9100-r9103;
  float r9105 = r9089.x;
  float r9106 = r9090.y;
  float r9107 = r9105*r9106;
  float r9108 = r9089.y;
  float r9109 = r9090.x;
  float r9110 = r9108*r9109;
  float r9111 = r9107-r9110;
  vec3 r9112 = vec3(r9097,r9104,r9111);
  float r9113 = sin(r9082);
  vec3 r9114 = r9112*vec3(r9113,r9113,r9113);
  vec3 r9115 = r9088-r9114;
  float r9116 = 1.0;
  float r9117 = cos(r9082);
  float r9118 = r9116-r9117;
  vec3 r9119 = r9086*vec3(r9118,r9118,r9118);
  float r9120 = dot(r9084,r9119);
  vec3 r9121 = r9084*vec3(r9120,r9120,r9120);
  vec3 r9122 = r9115+r9121;
  vec3 r9123=r9122;
  float r9124 = r9123.x;
  float r9125=r9124;
  float r9126 = r9123.y;
  float r9127=r9126;
  float r9128 = r9123.z;
  float r9129=r9128;
  float r9130=r9080;
  vec3 r9131 = vec3(r9125,r9127,r9129);
  vec3 r9132 = abs(r9131);
  vec3 r9133 = vec3(10.0,3.5,8.0);
  vec3 r9134 = r9132-r9133;
  vec3 r9135=r9134;
  float r9136 = max(max(r9135.x,r9135.y),r9135.z);
  float r9137 = 0.0;
  float r9138 = min(r9136,r9137);
  float r9139 = 0.0;
  vec3 r9140 = max(r9135,r9139);
  float r9141 = length(r9140);
  float r9142 = r9138+r9141;
  float r9143 = 2.0;
  float r9144 = r9142-r9143;
  float r9145 = min(r9075,r9144);
  float r9146=r9145;
  vec4 r9147=r9005;
  float r9148 = r9147[0];
  float r9149 = r9147[1];
  float r9150 = r9147[2];
  float r9151 = r9147[3];
  float r9152 = 1.0471975511965976;
  float r9153=r9152;
  vec3 r9154 = vec3(0.0,0.4472135954999579,0.8944271909999159);
  vec3 r9155=r9154;
  vec3 r9156 = vec3(r9148,r9149,r9150);
  vec3 r9157=r9156;
  float r9158 = cos(r9153);
  vec3 r9159 = r9157*vec3(r9158,r9158,r9158);
  vec3 r9160=r9155;
  vec3 r9161=r9157;
  float r9162 = r9160.y;
  float r9163 = r9161.z;
  float r9164 = r9162*r9163;
  float r9165 = r9160.z;
  float r9166 = r9161.y;
  float r9167 = r9165*r9166;
  float r9168 = r9164-r9167;
  float r9169 = r9160.z;
  float r9170 = r9161.x;
  float r9171 = r9169*r9170;
  float r9172 = r9160.x;
  float r9173 = r9161.z;
  float r9174 = r9172*r9173;
  float r9175 = r9171-r9174;
  float r9176 = r9160.x;
  float r9177 = r9161.y;
  float r9178 = r9176*r9177;
  float r9179 = r9160.y;
  float r9180 = r9161.x;
  float r9181 = r9179*r9180;
  float r9182 = r9178-r9181;
  vec3 r9183 = vec3(r9168,r9175,r9182);
  float r9184 = sin(r9153);
  vec3 r9185 = r9183*vec3(r9184,r9184,r9184);
  vec3 r9186 = r9159-r9185;
  float r9187 = 1.0;
  float r9188 = cos(r9153);
  float r9189 = r9187-r9188;
  vec3 r9190 = r9157*vec3(r9189,r9189,r9189);
  float r9191 = dot(r9155,r9190);
  vec3 r9192 = r9155*vec3(r9191,r9191,r9191);
  vec3 r9193 = r9186+r9192;
  vec3 r9194=r9193;
  float r9195 = r9194.x;
  float r9196=r9195;
  float r9197 = r9194.y;
  float r9198=r9197;
  float r9199 = r9194.z;
  float r9200=r9199;
  float r9201=r9151;
  vec3 r9202 = vec3(r9196,r9198,r9200);
  vec3 r9203 = abs(r9202);
  vec3 r9204 = vec3(3.5,8.0,10.0);
  vec3 r9205 = r9203-r9204;
  vec3 r9206=r9205;
  float r9207 = max(max(r9206.x,r9206.y),r9206.z);
  float r9208 = 0.0;
  float r9209 = min(r9207,r9208);
  float r9210 = 0.0;
  vec3 r9211 = max(r9206,r9210);
  float r9212 = length(r9211);
  float r9213 = r9209+r9212;
  float r9214 = 1.0;
  float r9215 = r9213-r9214;
  float r9216=r9215;
  float r9217 = 0.0;
  bool r9218 =(r9216 <= r9217);
  bool r9219 =(r9216 <= r9146);
  bool r9220 =(r9218 || r9219);
  vec4 r9221=r9005;
  float r9222 = r9221[0];
  float r9223 = r9221[1];
  float r9224 = r9221[2];
  float r9225 = r9221[3];
  float r9226 = 1.0471975511965976;
  float r9227=r9226;
  vec3 r9228 = vec3(0.0,0.4472135954999579,0.8944271909999159);
  vec3 r9229=r9228;
  vec3 r9230 = vec3(r9222,r9223,r9224);
  vec3 r9231=r9230;
  float r9232 = cos(r9227);
  vec3 r9233 = r9231*vec3(r9232,r9232,r9232);
  vec3 r9234=r9229;
  vec3 r9235=r9231;
  float r9236 = r9234.y;
  float r9237 = r9235.z;
  float r9238 = r9236*r9237;
  float r9239 = r9234.z;
  float r9240 = r9235.y;
  float r9241 = r9239*r9240;
  float r9242 = r9238-r9241;
  float r9243 = r9234.z;
  float r9244 = r9235.x;
  float r9245 = r9243*r9244;
  float r9246 = r9234.x;
  float r9247 = r9235.z;
  float r9248 = r9246*r9247;
  float r9249 = r9245-r9248;
  float r9250 = r9234.x;
  float r9251 = r9235.y;
  float r9252 = r9250*r9251;
  float r9253 = r9234.y;
  float r9254 = r9235.x;
  float r9255 = r9253*r9254;
  float r9256 = r9252-r9255;
  vec3 r9257 = vec3(r9242,r9249,r9256);
  float r9258 = sin(r9227);
  vec3 r9259 = r9257*vec3(r9258,r9258,r9258);
  vec3 r9260 = r9233-r9259;
  float r9261 = 1.0;
  float r9262 = cos(r9227);
  float r9263 = r9261-r9262;
  vec3 r9264 = r9231*vec3(r9263,r9263,r9263);
  float r9265 = dot(r9229,r9264);
  vec3 r9266 = r9229*vec3(r9265,r9265,r9265);
  vec3 r9267 = r9260+r9266;
  vec3 r9268=r9267;
  float r9269 = r9268.x;
  float r9270 = r9268.y;
  float r9271 = r9268.z;
  vec4 r9272 = vec4(r9269,r9270,r9271,r9225);
  vec4 r9273=r9272;
  float r9274 = 0.8;
  float r9275 = 0.8;
  float r9276 = 0.5;
  vec3 r9277 = vec3(r9274,r9275,r9276);
  float r9278 = 2.2;
  vec3 r9279 = pow(r9277,vec3(r9278,r9278,r9278));
  vec4 r9280=r9005;
  vec4 r9281=r9280;
  float r9282 = r9281[0];
  float r9283 = r9281[1];
  float r9284 = r9281[2];
  float r9285 = r9281[3];
  float r9286 = 0.6981317007977318;
  float r9287=r9286;
  vec3 r9288 = vec3(0.4472135954999579,0.0,0.8944271909999159);
  vec3 r9289=r9288;
  vec3 r9290 = vec3(r9282,r9283,r9284);
  vec3 r9291=r9290;
  float r9292 = cos(r9287);
  vec3 r9293 = r9291*vec3(r9292,r9292,r9292);
  vec3 r9294=r9289;
  vec3 r9295=r9291;
  float r9296 = r9294.y;
  float r9297 = r9295.z;
  float r9298 = r9296*r9297;
  float r9299 = r9294.z;
  float r9300 = r9295.y;
  float r9301 = r9299*r9300;
  float r9302 = r9298-r9301;
  float r9303 = r9294.z;
  float r9304 = r9295.x;
  float r9305 = r9303*r9304;
  float r9306 = r9294.x;
  float r9307 = r9295.z;
  float r9308 = r9306*r9307;
  float r9309 = r9305-r9308;
  float r9310 = r9294.x;
  float r9311 = r9295.y;
  float r9312 = r9310*r9311;
  float r9313 = r9294.y;
  float r9314 = r9295.x;
  float r9315 = r9313*r9314;
  float r9316 = r9312-r9315;
  vec3 r9317 = vec3(r9302,r9309,r9316);
  float r9318 = sin(r9287);
  vec3 r9319 = r9317*vec3(r9318,r9318,r9318);
  vec3 r9320 = r9293-r9319;
  float r9321 = 1.0;
  float r9322 = cos(r9287);
  float r9323 = r9321-r9322;
  vec3 r9324 = r9291*vec3(r9323,r9323,r9323);
  float r9325 = dot(r9289,r9324);
  vec3 r9326 = r9289*vec3(r9325,r9325,r9325);
  vec3 r9327 = r9320+r9326;
  vec3 r9328=r9327;
  float r9329 = r9328.x;
  float r9330=r9329;
  float r9331 = r9328.y;
  float r9332=r9331;
  float r9333 = r9328.z;
  float r9334=r9333;
  float r9335=r9285;
  vec3 r9336 = vec3(r9330,r9332,r9334);
  vec3 r9337 = abs(r9336);
  vec3 r9338 = vec3(8.0,10.0,4.5);
  vec3 r9339 = r9337-r9338;
  vec3 r9340=r9339;
  float r9341 = max(max(r9340.x,r9340.y),r9340.z);
  float r9342 = 0.0;
  float r9343 = min(r9341,r9342);
  float r9344 = 0.0;
  vec3 r9345 = max(r9340,r9344);
  float r9346 = length(r9345);
  float r9347 = r9343+r9346;
  float r9348 = 2.0;
  float r9349 = r9347-r9348;
  float r9350=r9349;
  vec4 r9351=r9280;
  float r9352 = r9351[0];
  float r9353 = r9351[1];
  float r9354 = r9351[2];
  float r9355 = r9351[3];
  float r9356 = -0.17453292519943295;
  float r9357=r9356;
  vec3 r9358 = vec3(-0.19245008972987523,0.19245008972987523,0.9622504486493761);
  vec3 r9359=r9358;
  vec3 r9360 = vec3(r9352,r9353,r9354);
  vec3 r9361=r9360;
  float r9362 = cos(r9357);
  vec3 r9363 = r9361*vec3(r9362,r9362,r9362);
  vec3 r9364=r9359;
  vec3 r9365=r9361;
  float r9366 = r9364.y;
  float r9367 = r9365.z;
  float r9368 = r9366*r9367;
  float r9369 = r9364.z;
  float r9370 = r9365.y;
  float r9371 = r9369*r9370;
  float r9372 = r9368-r9371;
  float r9373 = r9364.z;
  float r9374 = r9365.x;
  float r9375 = r9373*r9374;
  float r9376 = r9364.x;
  float r9377 = r9365.z;
  float r9378 = r9376*r9377;
  float r9379 = r9375-r9378;
  float r9380 = r9364.x;
  float r9381 = r9365.y;
  float r9382 = r9380*r9381;
  float r9383 = r9364.y;
  float r9384 = r9365.x;
  float r9385 = r9383*r9384;
  float r9386 = r9382-r9385;
  vec3 r9387 = vec3(r9372,r9379,r9386);
  float r9388 = sin(r9357);
  vec3 r9389 = r9387*vec3(r9388,r9388,r9388);
  vec3 r9390 = r9363-r9389;
  float r9391 = 1.0;
  float r9392 = cos(r9357);
  float r9393 = r9391-r9392;
  vec3 r9394 = r9361*vec3(r9393,r9393,r9393);
  float r9395 = dot(r9359,r9394);
  vec3 r9396 = r9359*vec3(r9395,r9395,r9395);
  vec3 r9397 = r9390+r9396;
  vec3 r9398=r9397;
  float r9399 = r9398.x;
  float r9400=r9399;
  float r9401 = r9398.y;
  float r9402=r9401;
  float r9403 = r9398.z;
  float r9404=r9403;
  float r9405=r9355;
  vec3 r9406 = vec3(r9400,r9402,r9404);
  vec3 r9407 = abs(r9406);
  vec3 r9408 = vec3(10.0,3.5,8.0);
  vec3 r9409 = r9407-r9408;
  vec3 r9410=r9409;
  float r9411 = max(max(r9410.x,r9410.y),r9410.z);
  float r9412 = 0.0;
  float r9413 = min(r9411,r9412);
  float r9414 = 0.0;
  vec3 r9415 = max(r9410,r9414);
  float r9416 = length(r9415);
  float r9417 = r9413+r9416;
  float r9418 = 2.0;
  float r9419 = r9417-r9418;
  float r9420=r9419;
  float r9421 = 0.0;
  bool r9422 =(r9420 <= r9421);
  bool r9423 =(r9420 <= r9350);
  bool r9424 =(r9422 || r9423);
  vec4 r9425=r9280;
  float r9426 = r9425[0];
  float r9427 = r9425[1];
  float r9428 = r9425[2];
  float r9429 = r9425[3];
  float r9430 = -0.17453292519943295;
  float r9431=r9430;
  vec3 r9432 = vec3(-0.19245008972987523,0.19245008972987523,0.9622504486493761);
  vec3 r9433=r9432;
  vec3 r9434 = vec3(r9426,r9427,r9428);
  vec3 r9435=r9434;
  float r9436 = cos(r9431);
  vec3 r9437 = r9435*vec3(r9436,r9436,r9436);
  vec3 r9438=r9433;
  vec3 r9439=r9435;
  float r9440 = r9438.y;
  float r9441 = r9439.z;
  float r9442 = r9440*r9441;
  float r9443 = r9438.z;
  float r9444 = r9439.y;
  float r9445 = r9443*r9444;
  float r9446 = r9442-r9445;
  float r9447 = r9438.z;
  float r9448 = r9439.x;
  float r9449 = r9447*r9448;
  float r9450 = r9438.x;
  float r9451 = r9439.z;
  float r9452 = r9450*r9451;
  float r9453 = r9449-r9452;
  float r9454 = r9438.x;
  float r9455 = r9439.y;
  float r9456 = r9454*r9455;
  float r9457 = r9438.y;
  float r9458 = r9439.x;
  float r9459 = r9457*r9458;
  float r9460 = r9456-r9459;
  vec3 r9461 = vec3(r9446,r9453,r9460);
  float r9462 = sin(r9431);
  vec3 r9463 = r9461*vec3(r9462,r9462,r9462);
  vec3 r9464 = r9437-r9463;
  float r9465 = 1.0;
  float r9466 = cos(r9431);
  float r9467 = r9465-r9466;
  vec3 r9468 = r9435*vec3(r9467,r9467,r9467);
  float r9469 = dot(r9433,r9468);
  vec3 r9470 = r9433*vec3(r9469,r9469,r9469);
  vec3 r9471 = r9464+r9470;
  vec3 r9472=r9471;
  float r9473 = r9472.x;
  float r9474 = r9472.y;
  float r9475 = r9472.z;
  vec4 r9476 = vec4(r9473,r9474,r9475,r9429);
  vec4 r9477=r9476;
  float r9478 = 0.8;
  float r9479 = 0.8;
  float r9480 = 0.5;
  vec3 r9481 = vec3(r9478,r9479,r9480);
  float r9482 = 2.2;
  vec3 r9483 = pow(r9481,vec3(r9482,r9482,r9482));
  vec4 r9484=r9280;
  float r9485 = r9484[0];
  float r9486 = r9484[1];
  float r9487 = r9484[2];
  float r9488 = r9484[3];
  float r9489 = 0.6981317007977318;
  float r9490=r9489;
  vec3 r9491 = vec3(0.4472135954999579,0.0,0.8944271909999159);
  vec3 r9492=r9491;
  vec3 r9493 = vec3(r9485,r9486,r9487);
  vec3 r9494=r9493;
  float r9495 = cos(r9490);
  vec3 r9496 = r9494*vec3(r9495,r9495,r9495);
  vec3 r9497=r9492;
  vec3 r9498=r9494;
  float r9499 = r9497.y;
  float r9500 = r9498.z;
  float r9501 = r9499*r9500;
  float r9502 = r9497.z;
  float r9503 = r9498.y;
  float r9504 = r9502*r9503;
  float r9505 = r9501-r9504;
  float r9506 = r9497.z;
  float r9507 = r9498.x;
  float r9508 = r9506*r9507;
  float r9509 = r9497.x;
  float r9510 = r9498.z;
  float r9511 = r9509*r9510;
  float r9512 = r9508-r9511;
  float r9513 = r9497.x;
  float r9514 = r9498.y;
  float r9515 = r9513*r9514;
  float r9516 = r9497.y;
  float r9517 = r9498.x;
  float r9518 = r9516*r9517;
  float r9519 = r9515-r9518;
  vec3 r9520 = vec3(r9505,r9512,r9519);
  float r9521 = sin(r9490);
  vec3 r9522 = r9520*vec3(r9521,r9521,r9521);
  vec3 r9523 = r9496-r9522;
  float r9524 = 1.0;
  float r9525 = cos(r9490);
  float r9526 = r9524-r9525;
  vec3 r9527 = r9494*vec3(r9526,r9526,r9526);
  float r9528 = dot(r9492,r9527);
  vec3 r9529 = r9492*vec3(r9528,r9528,r9528);
  vec3 r9530 = r9523+r9529;
  vec3 r9531=r9530;
  float r9532 = r9531.x;
  float r9533 = r9531.y;
  float r9534 = r9531.z;
  vec4 r9535 = vec4(r9532,r9533,r9534,r9488);
  vec4 r9536=r9535;
  float r9537 = 0.8;
  float r9538 = 0.8;
  float r9539 = 0.5;
  vec3 r9540 = vec3(r9537,r9538,r9539);
  float r9541 = 2.2;
  vec3 r9542 = pow(r9540,vec3(r9541,r9541,r9541));
  vec3 r9543 =(r9424 ? r9483 : r9542);
  vec3 r9544 =(r9220 ? r9279 : r9543);
  return vec4(r8975,r9544);
}
const vec3 bbox_min = vec3(-58.69228639904846,-62.21377308655987,-12.955544171172594);
const vec3 bbox_max = vec3(58.69228639904846,62.21377308655987,12.955544171172594);
// ray marching. ro is ray origin, rd is ray direction (unit vector).
// result is (t,r,g,b), where
//  * t is the distance that we marched,
//  * r,g,b is the colour of the distance field at the point we ended up at.
//    (-1,-1,-1) means no object was hit.
vec4 castRay( in vec3 ro, in vec3 rd )
{
    float tmin = 1.0;
    float tmax = 200.0;
   
    float t = tmin;
    vec3 c = vec3(-1.0,-1.0,-1.0);
    for (int i=0; i<200; i++) {
        float precis = 0.0005*t;
        vec4 res = map( vec4(ro+rd*t,iGlobalTime) );
        if (res.x < precis) {
            c = res.yzw;
            break;
        }
        t += res.x;
        if (t > tmax) break;
    }
    return vec4( t, c );
}
vec3 calcNormal( in vec3 pos )
{
    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;
    return normalize( e.xyy*map( vec4(pos + e.xyy,iGlobalTime) ).x + 
                      e.yyx*map( vec4(pos + e.yyx,iGlobalTime) ).x + 
                      e.yxy*map( vec4(pos + e.yxy,iGlobalTime) ).x + 
                      e.xxx*map( vec4(pos + e.xxx,iGlobalTime) ).x );
}
float calcAO( in vec3 pos, in vec3 nor )
{
    float occ = 0.0;
    float sca = 1.0;
    for( int i=0; i<5; i++ )
    {
        float hr = 0.01 + 0.12*float(i)/4.0;
        vec3 aopos =  nor * hr + pos;
        float dd = map( vec4(aopos,iGlobalTime) ).x;
        occ += -(dd-hr)*sca;
        sca *= 0.95;
    }
    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    
}
// in ro: ray origin
// in rd: ray direction
// out: rgb colour
vec3 render( in vec3 ro, in vec3 rd )
{ 
    //vec3 col = vec3(0.7, 0.9, 1.0) +rd.z*0.8;
    //vec3 col = vec3(0.8, 0.9, 1.0);
    vec3 col = vec3(1.0, 1.0, 1.0);
    vec4 res = castRay(ro,rd);
    float t = res.x;
    vec3 c = res.yzw;
    if( c.x>=0.0 )
    {
        vec3 pos = ro + t*rd;
        vec3 nor = calcNormal( pos );
        vec3 ref = reflect( rd, nor );
        
        // material        
        col = c;

        // lighting        
        float occ = calcAO( pos, nor );
        vec3  lig = normalize( vec3(-0.4, 0.6, 0.7) );
        float amb = clamp( 0.5+0.5*nor.z, 0.0, 1.0 );
        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );
        float bac = clamp( dot( nor, normalize(vec3(-lig.x,lig.y,0.0))), 0.0, 1.0 )*clamp( 1.0-pos.z,0.0,1.0);
        float dom = smoothstep( -0.1, 0.1, ref.z );
        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );
        float spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);
        
        vec3 lin = vec3(0.0);
        lin += 1.30*dif*vec3(1.00,0.80,0.55);
        lin += 2.00*spe*vec3(1.00,0.90,0.70)*dif;
        lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;
        lin += 0.50*dom*vec3(0.40,0.60,1.00)*occ;
        lin += 0.50*bac*vec3(0.35,0.35,0.35)*occ;
        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;
        vec3 iqcol = col*lin;

        //col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );
        col = mix(col,iqcol, 0.4);
    }

    return vec3( clamp(col,0.0,1.0) );
}
// Create a matrix to transform coordinates to look towards a given point.
// * `eye` is the position of the camera.
// * `centre` is the position to look towards.
// * `up` is the 'up' direction.
mat3 look_at(vec3 eye, vec3 centre, vec3 up)
{
    vec3 ww = normalize(centre - eye);
    vec3 uu = normalize(cross(ww, up));
    vec3 vv = normalize(cross(uu, ww));
    return mat3(uu, vv, ww);
}
// Generate a ray direction for ray-casting.
// * `camera` is the camera look-at matrix.
// * `pos` is the screen position, normally in the range -1..1
// * `lens` is the lens length of the camera (encodes field-of-view).
//   0 is very wide, and 2 is a good default.
vec3 ray_direction(mat3 camera, vec2 pos, float lens)
{
    return normalize(camera * vec3(pos, lens));
}
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    const vec3 origin = (bbox_min + bbox_max) / 2.0;
    const vec3 radius = (bbox_max - bbox_min) / 2.0;
    float r = max(radius.x, max(radius.y, radius.z)) / 1.3;
    vec2 p = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;
    p.x *= iResolution.x/iResolution.y;

#ifdef GLSLVIEWER
    vec3 eye = vec3(u_eye3d.x, -u_eye3d.z, u_eye3d.y)*r + origin;
    vec3 centre = vec3(u_centre3d.x, -u_centre3d.z, u_centre3d.y)*r + origin;
    vec3 up = vec3(u_up3d.x, -u_up3d.z, u_up3d.y);
#else
    vec3 eye = vec3(2.6, -4.5, 3.0);
    vec3 centre = vec3(0.0, 0.0, 0.0);
    vec3 up = vec3(-0.25, 0.433, 0.866);
#endif
    mat3 camera = look_at(eye, centre, up);
    vec3 dir = ray_direction(camera, p, 2.5);

    vec3 col = render( eye, dir );
    
    // convert linear RGB to sRGB
    col = pow(col, vec3(0.4545));
    
    fragColor = vec4(col,1.0);
}
